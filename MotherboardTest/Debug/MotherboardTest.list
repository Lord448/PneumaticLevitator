
MotherboardTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800adf0  0800adf0  0001adf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af38  0800af38  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800af38  0800af38  0001af38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af40  0800af40  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af40  0800af40  0001af40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af44  0800af44  0001af44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800af48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001df4  20000164  0800b0ac  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f58  0800b0ac  00021f58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb55  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cd0  00000000  00000000  0003cce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  000409c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001638  00000000  00000000  00042168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0bf  00000000  00000000  000437a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001de11  00000000  00000000  0005e85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ab2c  00000000  00000000  0007c670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011719c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006868  00000000  00000000  001171ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000164 	.word	0x20000164
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800add8 	.word	0x0800add8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000168 	.word	0x20000168
 80001dc:	0800add8 	.word	0x0800add8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fdfa 	bl	8001190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f82c 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f992 	bl	80008c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005a4:	f000 f892 	bl	80006cc <MX_I2C1_Init>
  MX_I2C2_Init();
 80005a8:	f000 f8be 	bl	8000728 <MX_I2C2_Init>
  MX_RTC_Init();
 80005ac:	f000 f8ea 	bl	8000784 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80005b0:	f000 f95e 	bl	8000870 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80005b4:	f009 fa48 	bl	8009a48 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80005b8:	f000 f90a 	bl	80007d0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80005bc:	480a      	ldr	r0, [pc, #40]	; (80005e8 <main+0x54>)
 80005be:	f004 fabf 	bl	8004b40 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&UART_IncomData, 1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	4909      	ldr	r1, [pc, #36]	; (80005ec <main+0x58>)
 80005c6:	480a      	ldr	r0, [pc, #40]	; (80005f0 <main+0x5c>)
 80005c8:	f004 fefd 	bl	80053c6 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	vTaskUSB();
 80005cc:	f000 fa06 	bl	80009dc <vTaskUSB>
	vTaskBlinks();
 80005d0:	f000 faf4 	bl	8000bbc <vTaskBlinks>
	ParsedFlag = 1;
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <main+0x60>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	801a      	strh	r2, [r3, #0]
	while(ParsedFlag);
 80005da:	bf00      	nop
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <main+0x60>)
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d1fb      	bne.n	80005dc <main+0x48>
	vTaskUSB();
 80005e4:	e7f2      	b.n	80005cc <main+0x38>
 80005e6:	bf00      	nop
 80005e8:	20000248 	.word	0x20000248
 80005ec:	20000301 	.word	0x20000301
 80005f0:	20000290 	.word	0x20000290
 80005f4:	20000000 	.word	0x20000000

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f009 ff70 	bl	800a4ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a27      	ldr	r2, [pc, #156]	; (80006c4 <SystemClock_Config+0xcc>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <SystemClock_Config+0xd0>)
 8000642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000654:	2305      	movs	r3, #5
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800065e:	2301      	movs	r3, #1
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800066c:	2319      	movs	r3, #25
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000670:	23c0      	movs	r3, #192	; 0xc0
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 0320 	add.w	r3, r7, #32
 8000680:	4618      	mov	r0, r3
 8000682:	f003 fbcb 	bl	8003e1c <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800068c:	f000 fb5e 	bl	8000d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2302      	movs	r3, #2
 8000696:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2103      	movs	r1, #3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f003 fe2d 	bl	800430c <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006b8:	f000 fb48 	bl	8000d4c <Error_Handler>
  }
}
 80006bc:	bf00      	nop
 80006be:	3750      	adds	r7, #80	; 0x50
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_I2C1_Init+0x50>)
 80006d2:	4a13      	ldr	r2, [pc, #76]	; (8000720 <MX_I2C1_Init+0x54>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_I2C1_Init+0x50>)
 80006d8:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_I2C1_Init+0x58>)
 80006da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_I2C1_Init+0x50>)
 80006ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_I2C1_Init+0x50>)
 800070a:	f001 f94b 	bl	80019a4 <HAL_I2C_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000714:	f000 fb1a 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000180 	.word	0x20000180
 8000720:	40005400 	.word	0x40005400
 8000724:	00061a80 	.word	0x00061a80

08000728 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_I2C2_Init+0x50>)
 800072e:	4a13      	ldr	r2, [pc, #76]	; (800077c <MX_I2C2_Init+0x54>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_I2C2_Init+0x50>)
 8000734:	4a12      	ldr	r2, [pc, #72]	; (8000780 <MX_I2C2_Init+0x58>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_I2C2_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_I2C2_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_I2C2_Init+0x50>)
 8000746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_I2C2_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_I2C2_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_I2C2_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_I2C2_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_I2C2_Init+0x50>)
 8000766:	f001 f91d 	bl	80019a4 <HAL_I2C_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 faec 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200001d4 	.word	0x200001d4
 800077c:	40005800 	.word	0x40005800
 8000780:	00061a80 	.word	0x00061a80

08000784 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_RTC_Init+0x44>)
 800078a:	4a10      	ldr	r2, [pc, #64]	; (80007cc <MX_RTC_Init+0x48>)
 800078c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_RTC_Init+0x44>)
 8000790:	2200      	movs	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_RTC_Init+0x44>)
 8000796:	227f      	movs	r2, #127	; 0x7f
 8000798:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_RTC_Init+0x44>)
 800079c:	22ff      	movs	r2, #255	; 0xff
 800079e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_RTC_Init+0x44>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_RTC_Init+0x44>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_RTC_Init+0x44>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_RTC_Init+0x44>)
 80007b4:	f004 f87a 	bl	80048ac <HAL_RTC_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80007be:	f000 fac5 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000228 	.word	0x20000228
 80007cc:	40002800 	.word	0x40002800

080007d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e4:	463b      	mov	r3, r7
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_TIM1_Init+0x98>)
 80007ee:	4a1f      	ldr	r2, [pc, #124]	; (800086c <MX_TIM1_Init+0x9c>)
 80007f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_TIM1_Init+0x98>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_TIM1_Init+0x98>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 47999;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_TIM1_Init+0x98>)
 8000800:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000804:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_TIM1_Init+0x98>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_TIM1_Init+0x98>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_TIM1_Init+0x98>)
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000818:	4813      	ldr	r0, [pc, #76]	; (8000868 <MX_TIM1_Init+0x98>)
 800081a:	f004 f941 	bl	8004aa0 <HAL_TIM_Base_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000824:	f000 fa92 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	4619      	mov	r1, r3
 8000834:	480c      	ldr	r0, [pc, #48]	; (8000868 <MX_TIM1_Init+0x98>)
 8000836:	f004 faed 	bl	8004e14 <HAL_TIM_ConfigClockSource>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000840:	f000 fa84 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_TIM1_Init+0x98>)
 8000852:	f004 fce9 	bl	8005228 <HAL_TIMEx_MasterConfigSynchronization>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800085c:	f000 fa76 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000248 	.word	0x20000248
 800086c:	40010000 	.word	0x40010000

08000870 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_USART1_UART_Init+0x50>)
 8000876:	4a13      	ldr	r2, [pc, #76]	; (80008c4 <MX_USART1_UART_Init+0x54>)
 8000878:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART1_UART_Init+0x50>)
 800087c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000880:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_USART1_UART_Init+0x50>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <MX_USART1_UART_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USART1_UART_Init+0x50>)
 8000892:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000896:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART1_UART_Init+0x50>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USART1_UART_Init+0x50>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART1_UART_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_USART1_UART_Init+0x50>)
 80008ac:	f004 fd3e 	bl	800532c <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 80008b6:	f000 fa49 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000290 	.word	0x20000290
 80008c4:	40011000 	.word	0x40011000

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b3b      	ldr	r3, [pc, #236]	; (80009d0 <MX_GPIO_Init+0x108>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a3a      	ldr	r2, [pc, #232]	; (80009d0 <MX_GPIO_Init+0x108>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <MX_GPIO_Init+0x108>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <MX_GPIO_Init+0x108>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a33      	ldr	r2, [pc, #204]	; (80009d0 <MX_GPIO_Init+0x108>)
 8000904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b31      	ldr	r3, [pc, #196]	; (80009d0 <MX_GPIO_Init+0x108>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <MX_GPIO_Init+0x108>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a2c      	ldr	r2, [pc, #176]	; (80009d0 <MX_GPIO_Init+0x108>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <MX_GPIO_Init+0x108>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <MX_GPIO_Init+0x108>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a25      	ldr	r2, [pc, #148]	; (80009d0 <MX_GPIO_Init+0x108>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <MX_GPIO_Init+0x108>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000954:	481f      	ldr	r0, [pc, #124]	; (80009d4 <MX_GPIO_Init+0x10c>)
 8000956:	f000 ffd9 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2118      	movs	r1, #24
 800095e:	481e      	ldr	r0, [pc, #120]	; (80009d8 <MX_GPIO_Init+0x110>)
 8000960:	f000 ffd4 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	4815      	ldr	r0, [pc, #84]	; (80009d4 <MX_GPIO_Init+0x10c>)
 800097e:	f000 fe41 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : DevMode_Pin */
  GPIO_InitStruct.Pin = DevMode_Pin;
 8000982:	2301      	movs	r3, #1
 8000984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000986:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098c:	2301      	movs	r3, #1
 800098e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DevMode_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	4810      	ldr	r0, [pc, #64]	; (80009d8 <MX_GPIO_Init+0x110>)
 8000998:	f000 fe34 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800099c:	2318      	movs	r3, #24
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4619      	mov	r1, r3
 80009b2:	4809      	ldr	r0, [pc, #36]	; (80009d8 <MX_GPIO_Init+0x110>)
 80009b4:	f000 fe26 	bl	8001604 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2100      	movs	r1, #0
 80009bc:	2006      	movs	r0, #6
 80009be:	f000 fd58 	bl	8001472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009c2:	2006      	movs	r0, #6
 80009c4:	f000 fd71 	bl	80014aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	; 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020800 	.word	0x40020800
 80009d8:	40020000 	.word	0x40020000

080009dc <vTaskUSB>:

/* USER CODE BEGIN 4 */
static void vTaskUSB(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08e      	sub	sp, #56	; 0x38
 80009e0:	af04      	add	r7, sp, #16
	uint8_t MemValue = 1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t ReadVal;
	static uint16_t Counts = 0;
	static uint32_t NumberOfSends = 0;
	char Buffer[32] = "";
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
 80009fc:	615a      	str	r2, [r3, #20]
 80009fe:	619a      	str	r2, [r3, #24]
	if(Counts == 1000)
 8000a00:	4b65      	ldr	r3, [pc, #404]	; (8000b98 <vTaskUSB+0x1bc>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a08:	d15e      	bne.n	8000ac8 <vTaskUSB+0xec>
	{
		if(hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 8000a0a:	4b64      	ldr	r3, [pc, #400]	; (8000b9c <vTaskUSB+0x1c0>)
 8000a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	d154      	bne.n	8000ac0 <vTaskUSB+0xe4>
		{
			if(hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 8000a16:	4b61      	ldr	r3, [pc, #388]	; (8000b9c <vTaskUSB+0x1c0>)
 8000a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b03      	cmp	r3, #3
 8000a20:	d14e      	bne.n	8000ac0 <vTaskUSB+0xe4>
			{
				if(HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDR, 0, 1, &MemValue, 1, 100) == HAL_OK)
 8000a22:	2364      	movs	r3, #100	; 0x64
 8000a24:	9302      	str	r3, [sp, #8]
 8000a26:	2301      	movs	r3, #1
 8000a28:	9301      	str	r3, [sp, #4]
 8000a2a:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	2301      	movs	r3, #1
 8000a32:	2200      	movs	r2, #0
 8000a34:	21a0      	movs	r1, #160	; 0xa0
 8000a36:	485a      	ldr	r0, [pc, #360]	; (8000ba0 <vTaskUSB+0x1c4>)
 8000a38:	f001 f8f8 	bl	8001c2c <HAL_I2C_Mem_Write>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d123      	bne.n	8000a8a <vTaskUSB+0xae>
				{
					if(CDC_getReady() == USBD_OK)
 8000a42:	f009 f8f7 	bl	8009c34 <CDC_getReady>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d139      	bne.n	8000ac0 <vTaskUSB+0xe4>
					{
						memset(Buffer, '\0', sizeof(Buffer));
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2220      	movs	r2, #32
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f009 fd4a 	bl	800a4ec <memset>
						sprintf(Buffer, "Memory OK N:%d\n", (int)NumberOfSends);
 8000a58:	4b52      	ldr	r3, [pc, #328]	; (8000ba4 <vTaskUSB+0x1c8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	4951      	ldr	r1, [pc, #324]	; (8000ba8 <vTaskUSB+0x1cc>)
 8000a62:	4618      	mov	r0, r3
 8000a64:	f009 fd4a 	bl	800a4fc <siprintf>
						CDC_Transmit_FS((uint8_t *)Buffer, strlen(Buffer));
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fbb8 	bl	80001e0 <strlen>
 8000a70:	4603      	mov	r3, r0
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	4611      	mov	r1, r2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f009 f8a3 	bl	8009bc4 <CDC_Transmit_FS>
						NumberOfSends++;
 8000a7e:	4b49      	ldr	r3, [pc, #292]	; (8000ba4 <vTaskUSB+0x1c8>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	3301      	adds	r3, #1
 8000a84:	4a47      	ldr	r2, [pc, #284]	; (8000ba4 <vTaskUSB+0x1c8>)
 8000a86:	6013      	str	r3, [r2, #0]
 8000a88:	e01a      	b.n	8000ac0 <vTaskUSB+0xe4>
					}
				}
				else
				{
					if(CDC_getReady() == USBD_OK)
 8000a8a:	f009 f8d3 	bl	8009c34 <CDC_getReady>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d115      	bne.n	8000ac0 <vTaskUSB+0xe4>
					{
						memset(Buffer, '\0', sizeof(Buffer));
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2220      	movs	r2, #32
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f009 fd26 	bl	800a4ec <memset>
						sprintf(Buffer, "Memory not responding\n");
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	4942      	ldr	r1, [pc, #264]	; (8000bac <vTaskUSB+0x1d0>)
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f009 fd29 	bl	800a4fc <siprintf>
						CDC_Transmit_FS((uint8_t *)Buffer, strlen(Buffer));
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fb97 	bl	80001e0 <strlen>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	4611      	mov	r1, r2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f009 f882 	bl	8009bc4 <CDC_Transmit_FS>
					}
				}
			}
		}
		Counts = 0;
 8000ac0:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <vTaskUSB+0x1bc>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	801a      	strh	r2, [r3, #0]
 8000ac6:	e04d      	b.n	8000b64 <vTaskUSB+0x188>
	}
	else if(Counts == 500)
 8000ac8:	4b33      	ldr	r3, [pc, #204]	; (8000b98 <vTaskUSB+0x1bc>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ad0:	d148      	bne.n	8000b64 <vTaskUSB+0x188>
	{
		if(HAL_I2C_Mem_Read(&hi2c2, EEPROM_ADDR, 0, 1, &ReadVal, 1, 100) == HAL_OK)
 8000ad2:	2364      	movs	r3, #100	; 0x64
 8000ad4:	9302      	str	r3, [sp, #8]
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	9301      	str	r3, [sp, #4]
 8000ada:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	21a0      	movs	r1, #160	; 0xa0
 8000ae6:	482e      	ldr	r0, [pc, #184]	; (8000ba0 <vTaskUSB+0x1c4>)
 8000ae8:	f001 f99a 	bl	8001e20 <HAL_I2C_Mem_Read>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d11d      	bne.n	8000b2e <vTaskUSB+0x152>
		{
			if(CDC_getReady() == USBD_OK)
 8000af2:	f009 f89f 	bl	8009c34 <CDC_getReady>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d118      	bne.n	8000b2e <vTaskUSB+0x152>
			{
				memset(Buffer, '\0', sizeof(Buffer));
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2220      	movs	r2, #32
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f009 fcf2 	bl	800a4ec <memset>
				sprintf(Buffer, "Memory value is %d\n", (int)ReadVal);
 8000b08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	4927      	ldr	r1, [pc, #156]	; (8000bb0 <vTaskUSB+0x1d4>)
 8000b12:	4618      	mov	r0, r3
 8000b14:	f009 fcf2 	bl	800a4fc <siprintf>
				CDC_Transmit_FS((uint8_t *)Buffer, strlen(Buffer));
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fb60 	bl	80001e0 <strlen>
 8000b20:	4603      	mov	r3, r0
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f009 f84b 	bl	8009bc4 <CDC_Transmit_FS>
			}
		}
		if(CDC_getReady() == USBD_OK)
 8000b2e:	f009 f881 	bl	8009c34 <CDC_getReady>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d115      	bne.n	8000b64 <vTaskUSB+0x188>
		{
			memset(Buffer, '\0', sizeof(Buffer));
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2220      	movs	r2, #32
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f009 fcd4 	bl	800a4ec <memset>
			sprintf(Buffer, "Memory not responding\n");
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	4919      	ldr	r1, [pc, #100]	; (8000bac <vTaskUSB+0x1d0>)
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f009 fcd7 	bl	800a4fc <siprintf>
			CDC_Transmit_FS((uint8_t *)Buffer, strlen(Buffer));
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fb45 	bl	80001e0 <strlen>
 8000b56:	4603      	mov	r3, r0
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f009 f830 	bl	8009bc4 <CDC_Transmit_FS>
		}
	}
	//Counts++; Disable the EEPROM Test

	if(NeedToReport)
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <vTaskUSB+0x1d8>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d010      	beq.n	8000b8e <vTaskUSB+0x1b2>
	{
		if(CDC_getReady() == USBD_OK)
 8000b6c:	f009 f862 	bl	8009c34 <CDC_getReady>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d10b      	bne.n	8000b8e <vTaskUSB+0x1b2>
		{
			CDC_Transmit_FS((uint8_t *)USBBuffer, strlen(USBBuffer));
 8000b76:	4810      	ldr	r0, [pc, #64]	; (8000bb8 <vTaskUSB+0x1dc>)
 8000b78:	f7ff fb32 	bl	80001e0 <strlen>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	4619      	mov	r1, r3
 8000b82:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <vTaskUSB+0x1dc>)
 8000b84:	f009 f81e 	bl	8009bc4 <CDC_Transmit_FS>
			NeedToReport = 0;
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <vTaskUSB+0x1d8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000304 	.word	0x20000304
 8000b9c:	20000340 	.word	0x20000340
 8000ba0:	200001d4 	.word	0x200001d4
 8000ba4:	20000308 	.word	0x20000308
 8000ba8:	0800ae1c 	.word	0x0800ae1c
 8000bac:	0800ae2c 	.word	0x0800ae2c
 8000bb0:	0800ae44 	.word	0x0800ae44
 8000bb4:	20000302 	.word	0x20000302
 8000bb8:	200002d4 	.word	0x200002d4

08000bbc <vTaskBlinks>:

static void vTaskBlinks(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  static uint32_t Count = 0;
  if(Count == 100)
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <vTaskBlinks+0x5c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b64      	cmp	r3, #100	; 0x64
 8000bc6:	d105      	bne.n	8000bd4 <vTaskBlinks+0x18>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000bc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bcc:	4813      	ldr	r0, [pc, #76]	; (8000c1c <vTaskBlinks+0x60>)
 8000bce:	f000 feb6 	bl	800193e <HAL_GPIO_TogglePin>
 8000bd2:	e011      	b.n	8000bf8 <vTaskBlinks+0x3c>
  else if(Count == 200)
 8000bd4:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <vTaskBlinks+0x5c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2bc8      	cmp	r3, #200	; 0xc8
 8000bda:	d104      	bne.n	8000be6 <vTaskBlinks+0x2a>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8000bdc:	2108      	movs	r1, #8
 8000bde:	4810      	ldr	r0, [pc, #64]	; (8000c20 <vTaskBlinks+0x64>)
 8000be0:	f000 fead 	bl	800193e <HAL_GPIO_TogglePin>
 8000be4:	e008      	b.n	8000bf8 <vTaskBlinks+0x3c>
  else if(Count == 300)
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <vTaskBlinks+0x5c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000bee:	d103      	bne.n	8000bf8 <vTaskBlinks+0x3c>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000bf0:	2110      	movs	r1, #16
 8000bf2:	480b      	ldr	r0, [pc, #44]	; (8000c20 <vTaskBlinks+0x64>)
 8000bf4:	f000 fea3 	bl	800193e <HAL_GPIO_TogglePin>
  if(Count >= 400)
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <vTaskBlinks+0x5c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c00:	d302      	bcc.n	8000c08 <vTaskBlinks+0x4c>
	  Count = 0;
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <vTaskBlinks+0x5c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
  Count++;
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <vTaskBlinks+0x5c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	4a02      	ldr	r2, [pc, #8]	; (8000c18 <vTaskBlinks+0x5c>)
 8000c10:	6013      	str	r3, [r2, #0]
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2000030c 	.word	0x2000030c
 8000c1c:	40020800 	.word	0x40020800
 8000c20:	40020000 	.word	0x40020000

08000c24 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	ParsedFlag = 0;
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	801a      	strh	r2, [r3, #0]
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000000 	.word	0x20000000

08000c44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  const char* RXBufferOverflow = "UART RXBufferOverflow: Size 32\n";
 8000c4c:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <HAL_UART_RxCpltCallback+0xb0>)
 8000c4e:	60fb      	str	r3, [r7, #12]
  static uint16_t DataCount = 0;
  static char Buffer[32] = "";
  Buffer[DataCount] = UART_IncomData;
 8000c50:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <HAL_UART_RxCpltCallback+0xb4>)
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <HAL_UART_RxCpltCallback+0xb8>)
 8000c58:	7819      	ldrb	r1, [r3, #0]
 8000c5a:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <HAL_UART_RxCpltCallback+0xbc>)
 8000c5c:	5499      	strb	r1, [r3, r2]
  DataCount++;
 8000c5e:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <HAL_UART_RxCpltCallback+0xb4>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	3301      	adds	r3, #1
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <HAL_UART_RxCpltCallback+0xb4>)
 8000c68:	801a      	strh	r2, [r3, #0]
  if(UART_IncomData == '!')
 8000c6a:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <HAL_UART_RxCpltCallback+0xb8>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b21      	cmp	r3, #33	; 0x21
 8000c70:	d11f      	bne.n	8000cb2 <HAL_UART_RxCpltCallback+0x6e>
  {
    if(CDC_getReady() == USBD_OK)
 8000c72:	f008 ffdf 	bl	8009c34 <CDC_getReady>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d110      	bne.n	8000c9e <HAL_UART_RxCpltCallback+0x5a>
    {
      memset(USBBuffer, '\0', strlen(USBBuffer));
 8000c7c:	4821      	ldr	r0, [pc, #132]	; (8000d04 <HAL_UART_RxCpltCallback+0xc0>)
 8000c7e:	f7ff faaf 	bl	80001e0 <strlen>
 8000c82:	4603      	mov	r3, r0
 8000c84:	461a      	mov	r2, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	481e      	ldr	r0, [pc, #120]	; (8000d04 <HAL_UART_RxCpltCallback+0xc0>)
 8000c8a:	f009 fc2f 	bl	800a4ec <memset>
      sprintf(USBBuffer, "Incom Data: %s\n", Buffer);
 8000c8e:	4a1c      	ldr	r2, [pc, #112]	; (8000d00 <HAL_UART_RxCpltCallback+0xbc>)
 8000c90:	491d      	ldr	r1, [pc, #116]	; (8000d08 <HAL_UART_RxCpltCallback+0xc4>)
 8000c92:	481c      	ldr	r0, [pc, #112]	; (8000d04 <HAL_UART_RxCpltCallback+0xc0>)
 8000c94:	f009 fc32 	bl	800a4fc <siprintf>
      NeedToReport = 1;
 8000c98:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <HAL_UART_RxCpltCallback+0xc8>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
    }
    memset(Buffer, '\0', DataCount);
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <HAL_UART_RxCpltCallback+0xb4>)
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4816      	ldr	r0, [pc, #88]	; (8000d00 <HAL_UART_RxCpltCallback+0xbc>)
 8000ca8:	f009 fc20 	bl	800a4ec <memset>
    DataCount = 0;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_UART_RxCpltCallback+0xb4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	801a      	strh	r2, [r3, #0]
  }
  if(DataCount > 32)
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <HAL_UART_RxCpltCallback+0xb4>)
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	2b20      	cmp	r3, #32
 8000cb8:	d912      	bls.n	8000ce0 <HAL_UART_RxCpltCallback+0x9c>
  {
	if(CDC_getReady() == USBD_OK)
 8000cba:	f008 ffbb 	bl	8009c34 <CDC_getReady>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d108      	bne.n	8000cd6 <HAL_UART_RxCpltCallback+0x92>
	{
	  CDC_Transmit_FS((uint8_t*)RXBufferOverflow, strlen(RXBufferOverflow));
 8000cc4:	68f8      	ldr	r0, [r7, #12]
 8000cc6:	f7ff fa8b 	bl	80001e0 <strlen>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	4619      	mov	r1, r3
 8000cd0:	68f8      	ldr	r0, [r7, #12]
 8000cd2:	f008 ff77 	bl	8009bc4 <CDC_Transmit_FS>
	}
	memset(Buffer, '\0', 32);
 8000cd6:	2220      	movs	r2, #32
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4809      	ldr	r0, [pc, #36]	; (8000d00 <HAL_UART_RxCpltCallback+0xbc>)
 8000cdc:	f009 fc06 	bl	800a4ec <memset>
  }
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&UART_IncomData, 1);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	4906      	ldr	r1, [pc, #24]	; (8000cfc <HAL_UART_RxCpltCallback+0xb8>)
 8000ce4:	480a      	ldr	r0, [pc, #40]	; (8000d10 <HAL_UART_RxCpltCallback+0xcc>)
 8000ce6:	f004 fb6e 	bl	80053c6 <HAL_UART_Receive_IT>
}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	0800ae58 	.word	0x0800ae58
 8000cf8:	20000310 	.word	0x20000310
 8000cfc:	20000301 	.word	0x20000301
 8000d00:	20000314 	.word	0x20000314
 8000d04:	200002d4 	.word	0x200002d4
 8000d08:	0800ae78 	.word	0x0800ae78
 8000d0c:	20000302 	.word	0x20000302
 8000d10:	20000290 	.word	0x20000290

08000d14 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	80fb      	strh	r3, [r7, #6]
	const char *Buffer = "Pressed Dev Mode\n";
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_GPIO_EXTI_Callback+0x34>)
 8000d20:	60fb      	str	r3, [r7, #12]
	if(CDC_getReady() == USBD_OK)
 8000d22:	f008 ff87 	bl	8009c34 <CDC_getReady>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d108      	bne.n	8000d3e <HAL_GPIO_EXTI_Callback+0x2a>
	{
		CDC_Transmit_FS((uint8_t*)Buffer, strlen(Buffer));
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f7ff fa57 	bl	80001e0 <strlen>
 8000d32:	4603      	mov	r3, r0
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	4619      	mov	r1, r3
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f008 ff43 	bl	8009bc4 <CDC_Transmit_FS>
	}
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	0800ae88 	.word	0x0800ae88

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <Error_Handler+0x8>
	...

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800

08000da8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	; 0x30
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a3b      	ldr	r2, [pc, #236]	; (8000eb4 <HAL_I2C_MspInit+0x10c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d12d      	bne.n	8000e26 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	4b3a      	ldr	r3, [pc, #232]	; (8000eb8 <HAL_I2C_MspInit+0x110>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a39      	ldr	r2, [pc, #228]	; (8000eb8 <HAL_I2C_MspInit+0x110>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b37      	ldr	r3, [pc, #220]	; (8000eb8 <HAL_I2C_MspInit+0x110>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	61bb      	str	r3, [r7, #24]
 8000de4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000de6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dec:	2312      	movs	r3, #18
 8000dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000df8:	2304      	movs	r3, #4
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	482e      	ldr	r0, [pc, #184]	; (8000ebc <HAL_I2C_MspInit+0x114>)
 8000e04:	f000 fbfe 	bl	8001604 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <HAL_I2C_MspInit+0x110>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	4a29      	ldr	r2, [pc, #164]	; (8000eb8 <HAL_I2C_MspInit+0x110>)
 8000e12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e16:	6413      	str	r3, [r2, #64]	; 0x40
 8000e18:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <HAL_I2C_MspInit+0x110>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e24:	e041      	b.n	8000eaa <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a25      	ldr	r2, [pc, #148]	; (8000ec0 <HAL_I2C_MspInit+0x118>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d13c      	bne.n	8000eaa <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <HAL_I2C_MspInit+0x110>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <HAL_I2C_MspInit+0x110>)
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e40:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <HAL_I2C_MspInit+0x110>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e52:	2312      	movs	r3, #18
 8000e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e5e:	2304      	movs	r3, #4
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	4814      	ldr	r0, [pc, #80]	; (8000ebc <HAL_I2C_MspInit+0x114>)
 8000e6a:	f000 fbcb 	bl	8001604 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e6e:	2308      	movs	r3, #8
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e72:	2312      	movs	r3, #18
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000e7e:	2309      	movs	r3, #9
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	480c      	ldr	r0, [pc, #48]	; (8000ebc <HAL_I2C_MspInit+0x114>)
 8000e8a:	f000 fbbb 	bl	8001604 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <HAL_I2C_MspInit+0x110>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <HAL_I2C_MspInit+0x110>)
 8000e98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_I2C_MspInit+0x110>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
}
 8000eaa:	bf00      	nop
 8000eac:	3730      	adds	r7, #48	; 0x30
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40005400 	.word	0x40005400
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020400 	.word	0x40020400
 8000ec0:	40005800 	.word	0x40005800

08000ec4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ecc:	f107 0308 	add.w	r3, r7, #8
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
 8000edc:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a0c      	ldr	r2, [pc, #48]	; (8000f14 <HAL_RTC_MspInit+0x50>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d111      	bne.n	8000f0c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f003 fbe8 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000f02:	f7ff ff23 	bl	8000d4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <HAL_RTC_MspInit+0x54>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f0c:	bf00      	nop
 8000f0e:	3720      	adds	r7, #32
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40002800 	.word	0x40002800
 8000f18:	42470e3c 	.word	0x42470e3c

08000f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <HAL_TIM_Base_MspInit+0x48>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d115      	bne.n	8000f5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_TIM_Base_MspInit+0x4c>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <HAL_TIM_Base_MspInit+0x4c>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_TIM_Base_MspInit+0x4c>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2019      	movs	r0, #25
 8000f50:	f000 fa8f 	bl	8001472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f54:	2019      	movs	r0, #25
 8000f56:	f000 faa8 	bl	80014aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40010000 	.word	0x40010000
 8000f68:	40023800 	.word	0x40023800

08000f6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a1d      	ldr	r2, [pc, #116]	; (8001000 <HAL_UART_MspInit+0x94>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d134      	bne.n	8000ff8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <HAL_UART_MspInit+0x98>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	4a1b      	ldr	r2, [pc, #108]	; (8001004 <HAL_UART_MspInit+0x98>)
 8000f98:	f043 0310 	orr.w	r3, r3, #16
 8000f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_UART_MspInit+0x98>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f003 0310 	and.w	r3, r3, #16
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_UART_MspInit+0x98>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a14      	ldr	r2, [pc, #80]	; (8001004 <HAL_UART_MspInit+0x98>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_UART_MspInit+0x98>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fc6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fd8:	2307      	movs	r3, #7
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4809      	ldr	r0, [pc, #36]	; (8001008 <HAL_UART_MspInit+0x9c>)
 8000fe4:	f000 fb0e 	bl	8001604 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	2025      	movs	r0, #37	; 0x25
 8000fee:	f000 fa40 	bl	8001472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ff2:	2025      	movs	r0, #37	; 0x25
 8000ff4:	f000 fa59 	bl	80014aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ff8:	bf00      	nop
 8000ffa:	3728      	adds	r7, #40	; 0x28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40011000 	.word	0x40011000
 8001004:	40023800 	.word	0x40023800
 8001008:	40020000 	.word	0x40020000

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <NMI_Handler+0x4>

08001012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <MemManage_Handler+0x4>

0800101e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <UsageFault_Handler+0x4>

0800102a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001058:	f000 f8ec 	bl	8001234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DevMode_Pin);
 8001064:	2001      	movs	r0, #1
 8001066:	f000 fc85 	bl	8001974 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001076:	f003 fdc5 	bl	8004c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000248 	.word	0x20000248

08001084 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <USART1_IRQHandler+0x10>)
 800108a:	f004 f9cd 	bl	8005428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000290 	.word	0x20000290

08001098 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <OTG_FS_IRQHandler+0x10>)
 800109e:	f001 fd90 	bl	8002bc2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000181c 	.word	0x2000181c

080010ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b4:	4a14      	ldr	r2, [pc, #80]	; (8001108 <_sbrk+0x5c>)
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <_sbrk+0x60>)
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <_sbrk+0x64>)
 80010ca:	4a12      	ldr	r2, [pc, #72]	; (8001114 <_sbrk+0x68>)
 80010cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d207      	bcs.n	80010ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010dc:	f009 f9dc 	bl	800a498 <__errno>
 80010e0:	4603      	mov	r3, r0
 80010e2:	220c      	movs	r2, #12
 80010e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ea:	e009      	b.n	8001100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <_sbrk+0x64>)
 80010fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20020000 	.word	0x20020000
 800110c:	00000400 	.word	0x00000400
 8001110:	20000334 	.word	0x20000334
 8001114:	20001f58 	.word	0x20001f58

08001118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <SystemInit+0x20>)
 800111e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <SystemInit+0x20>)
 8001124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800113c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001174 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001142:	490e      	ldr	r1, [pc, #56]	; (800117c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001144:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001158:	4c0b      	ldr	r4, [pc, #44]	; (8001188 <LoopFillZerobss+0x26>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001166:	f7ff ffd7 	bl	8001118 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116a:	f009 f99b 	bl	800a4a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800116e:	f7ff fa11 	bl	8000594 <main>
  bx  lr    
 8001172:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001174:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800117c:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8001180:	0800af48 	.word	0x0800af48
  ldr r2, =_sbss
 8001184:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8001188:	20001f58 	.word	0x20001f58

0800118c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC_IRQHandler>
	...

08001190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <HAL_Init+0x40>)
 800119a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_Init+0x40>)
 80011a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <HAL_Init+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <HAL_Init+0x40>)
 80011b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b8:	2003      	movs	r0, #3
 80011ba:	f000 f94f 	bl	800145c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011be:	200f      	movs	r0, #15
 80011c0:	f000 f808 	bl	80011d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c4:	f7ff fdc8 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023c00 	.word	0x40023c00

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_InitTick+0x54>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_InitTick+0x58>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f967 	bl	80014c6 <HAL_SYSTICK_Config>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e00e      	b.n	8001220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d80a      	bhi.n	800121e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001210:	f000 f92f 	bl	8001472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <HAL_InitTick+0x5c>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	e000      	b.n	8001220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000004 	.word	0x20000004
 800122c:	2000000c 	.word	0x2000000c
 8001230:	20000008 	.word	0x20000008

08001234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_IncTick+0x20>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x24>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_IncTick+0x24>)
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	2000000c 	.word	0x2000000c
 8001258:	20000338 	.word	0x20000338

0800125c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return uwTick;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <HAL_GetTick+0x14>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000338 	.word	0x20000338

08001274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff ffee 	bl	800125c <HAL_GetTick>
 8001280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800128c:	d005      	beq.n	800129a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_Delay+0x44>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800129a:	bf00      	nop
 800129c:	f7ff ffde 	bl	800125c <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d8f7      	bhi.n	800129c <HAL_Delay+0x28>
  {
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000000c 	.word	0x2000000c

080012bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ee:	4a04      	ldr	r2, [pc, #16]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	2b00      	cmp	r3, #0
 8001330:	db0b      	blt.n	800134a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f003 021f 	and.w	r2, r3, #31
 8001338:	4907      	ldr	r1, [pc, #28]	; (8001358 <__NVIC_EnableIRQ+0x38>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	2001      	movs	r0, #1
 8001342:	fa00 f202 	lsl.w	r2, r0, r2
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000e100 	.word	0xe000e100

0800135c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	; (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	; (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	; 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
         );
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	; 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001428:	d301      	bcc.n	800142e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142a:	2301      	movs	r3, #1
 800142c:	e00f      	b.n	800144e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <SysTick_Config+0x40>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001436:	210f      	movs	r1, #15
 8001438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800143c:	f7ff ff8e 	bl	800135c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <SysTick_Config+0x40>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <SysTick_Config+0x40>)
 8001448:	2207      	movs	r2, #7
 800144a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	e000e010 	.word	0xe000e010

0800145c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff29 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001484:	f7ff ff3e 	bl	8001304 <__NVIC_GetPriorityGrouping>
 8001488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	6978      	ldr	r0, [r7, #20]
 8001490:	f7ff ff8e 	bl	80013b0 <NVIC_EncodePriority>
 8001494:	4602      	mov	r2, r0
 8001496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149a:	4611      	mov	r1, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff5d 	bl	800135c <__NVIC_SetPriority>
}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff31 	bl	8001320 <__NVIC_EnableIRQ>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ffa2 	bl	8001418 <SysTick_Config>
 80014d4:	4603      	mov	r3, r0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b084      	sub	sp, #16
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff feb6 	bl	800125c <HAL_GetTick>
 80014f0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d008      	beq.n	8001510 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2280      	movs	r2, #128	; 0x80
 8001502:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e052      	b.n	80015b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0216 	bic.w	r2, r2, #22
 800151e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800152e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	2b00      	cmp	r3, #0
 8001536:	d103      	bne.n	8001540 <HAL_DMA_Abort+0x62>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153c:	2b00      	cmp	r3, #0
 800153e:	d007      	beq.n	8001550 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0208 	bic.w	r2, r2, #8
 800154e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0201 	bic.w	r2, r2, #1
 800155e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001560:	e013      	b.n	800158a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001562:	f7ff fe7b 	bl	800125c <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b05      	cmp	r3, #5
 800156e:	d90c      	bls.n	800158a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2220      	movs	r2, #32
 8001574:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2203      	movs	r2, #3
 800157a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e015      	b.n	80015b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1e4      	bne.n	8001562 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159c:	223f      	movs	r2, #63	; 0x3f
 800159e:	409a      	lsls	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d004      	beq.n	80015dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e00c      	b.n	80015f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2205      	movs	r2, #5
 80015e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0201 	bic.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001604:	b480      	push	{r7}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
 800161e:	e159      	b.n	80018d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001620:	2201      	movs	r2, #1
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	429a      	cmp	r2, r3
 800163a:	f040 8148 	bne.w	80018ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b01      	cmp	r3, #1
 8001648:	d005      	beq.n	8001656 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001652:	2b02      	cmp	r3, #2
 8001654:	d130      	bne.n	80016b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	2203      	movs	r2, #3
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4013      	ands	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	68da      	ldr	r2, [r3, #12]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800168c:	2201      	movs	r2, #1
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	091b      	lsrs	r3, r3, #4
 80016a2:	f003 0201 	and.w	r2, r3, #1
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d017      	beq.n	80016f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	2203      	movs	r2, #3
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d123      	bne.n	8001748 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	08da      	lsrs	r2, r3, #3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3208      	adds	r2, #8
 8001708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800170c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	220f      	movs	r2, #15
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	691a      	ldr	r2, [r3, #16]
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	08da      	lsrs	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3208      	adds	r2, #8
 8001742:	69b9      	ldr	r1, [r7, #24]
 8001744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	2203      	movs	r2, #3
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0203 	and.w	r2, r3, #3
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 80a2 	beq.w	80018ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b57      	ldr	r3, [pc, #348]	; (80018ec <HAL_GPIO_Init+0x2e8>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a56      	ldr	r2, [pc, #344]	; (80018ec <HAL_GPIO_Init+0x2e8>)
 8001794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
 800179a:	4b54      	ldr	r3, [pc, #336]	; (80018ec <HAL_GPIO_Init+0x2e8>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017a6:	4a52      	ldr	r2, [pc, #328]	; (80018f0 <HAL_GPIO_Init+0x2ec>)
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	3302      	adds	r3, #2
 80017ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	220f      	movs	r2, #15
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a49      	ldr	r2, [pc, #292]	; (80018f4 <HAL_GPIO_Init+0x2f0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d019      	beq.n	8001806 <HAL_GPIO_Init+0x202>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a48      	ldr	r2, [pc, #288]	; (80018f8 <HAL_GPIO_Init+0x2f4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d013      	beq.n	8001802 <HAL_GPIO_Init+0x1fe>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a47      	ldr	r2, [pc, #284]	; (80018fc <HAL_GPIO_Init+0x2f8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00d      	beq.n	80017fe <HAL_GPIO_Init+0x1fa>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a46      	ldr	r2, [pc, #280]	; (8001900 <HAL_GPIO_Init+0x2fc>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d007      	beq.n	80017fa <HAL_GPIO_Init+0x1f6>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a45      	ldr	r2, [pc, #276]	; (8001904 <HAL_GPIO_Init+0x300>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d101      	bne.n	80017f6 <HAL_GPIO_Init+0x1f2>
 80017f2:	2304      	movs	r3, #4
 80017f4:	e008      	b.n	8001808 <HAL_GPIO_Init+0x204>
 80017f6:	2307      	movs	r3, #7
 80017f8:	e006      	b.n	8001808 <HAL_GPIO_Init+0x204>
 80017fa:	2303      	movs	r3, #3
 80017fc:	e004      	b.n	8001808 <HAL_GPIO_Init+0x204>
 80017fe:	2302      	movs	r3, #2
 8001800:	e002      	b.n	8001808 <HAL_GPIO_Init+0x204>
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <HAL_GPIO_Init+0x204>
 8001806:	2300      	movs	r3, #0
 8001808:	69fa      	ldr	r2, [r7, #28]
 800180a:	f002 0203 	and.w	r2, r2, #3
 800180e:	0092      	lsls	r2, r2, #2
 8001810:	4093      	lsls	r3, r2
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001818:	4935      	ldr	r1, [pc, #212]	; (80018f0 <HAL_GPIO_Init+0x2ec>)
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	3302      	adds	r3, #2
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001826:	4b38      	ldr	r3, [pc, #224]	; (8001908 <HAL_GPIO_Init+0x304>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800184a:	4a2f      	ldr	r2, [pc, #188]	; (8001908 <HAL_GPIO_Init+0x304>)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001850:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <HAL_GPIO_Init+0x304>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001874:	4a24      	ldr	r2, [pc, #144]	; (8001908 <HAL_GPIO_Init+0x304>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800187a:	4b23      	ldr	r3, [pc, #140]	; (8001908 <HAL_GPIO_Init+0x304>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800189e:	4a1a      	ldr	r2, [pc, #104]	; (8001908 <HAL_GPIO_Init+0x304>)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_GPIO_Init+0x304>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018c8:	4a0f      	ldr	r2, [pc, #60]	; (8001908 <HAL_GPIO_Init+0x304>)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3301      	adds	r3, #1
 80018d2:	61fb      	str	r3, [r7, #28]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	2b0f      	cmp	r3, #15
 80018d8:	f67f aea2 	bls.w	8001620 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40013800 	.word	0x40013800
 80018f4:	40020000 	.word	0x40020000
 80018f8:	40020400 	.word	0x40020400
 80018fc:	40020800 	.word	0x40020800
 8001900:	40020c00 	.word	0x40020c00
 8001904:	40021000 	.word	0x40021000
 8001908:	40013c00 	.word	0x40013c00

0800190c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	807b      	strh	r3, [r7, #2]
 8001918:	4613      	mov	r3, r2
 800191a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800191c:	787b      	ldrb	r3, [r7, #1]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001922:	887a      	ldrh	r2, [r7, #2]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001928:	e003      	b.n	8001932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800192a:	887b      	ldrh	r3, [r7, #2]
 800192c:	041a      	lsls	r2, r3, #16
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	619a      	str	r2, [r3, #24]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800193e:	b480      	push	{r7}
 8001940:	b085      	sub	sp, #20
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	460b      	mov	r3, r1
 8001948:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001950:	887a      	ldrh	r2, [r7, #2]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4013      	ands	r3, r2
 8001956:	041a      	lsls	r2, r3, #16
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	43d9      	mvns	r1, r3
 800195c:	887b      	ldrh	r3, [r7, #2]
 800195e:	400b      	ands	r3, r1
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	619a      	str	r2, [r3, #24]
}
 8001966:	bf00      	nop
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	4013      	ands	r3, r2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d006      	beq.n	8001998 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff f9be 	bl	8000d14 <HAL_GPIO_EXTI_Callback>
  }
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40013c00 	.word	0x40013c00

080019a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e12b      	b.n	8001c0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d106      	bne.n	80019d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff f9ec 	bl	8000da8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2224      	movs	r2, #36	; 0x24
 80019d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0201 	bic.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a08:	f002 fe38 	bl	800467c <HAL_RCC_GetPCLK1Freq>
 8001a0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	4a81      	ldr	r2, [pc, #516]	; (8001c18 <HAL_I2C_Init+0x274>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d807      	bhi.n	8001a28 <HAL_I2C_Init+0x84>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4a80      	ldr	r2, [pc, #512]	; (8001c1c <HAL_I2C_Init+0x278>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	bf94      	ite	ls
 8001a20:	2301      	movls	r3, #1
 8001a22:	2300      	movhi	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	e006      	b.n	8001a36 <HAL_I2C_Init+0x92>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4a7d      	ldr	r2, [pc, #500]	; (8001c20 <HAL_I2C_Init+0x27c>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	bf94      	ite	ls
 8001a30:	2301      	movls	r3, #1
 8001a32:	2300      	movhi	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e0e7      	b.n	8001c0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4a78      	ldr	r2, [pc, #480]	; (8001c24 <HAL_I2C_Init+0x280>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	0c9b      	lsrs	r3, r3, #18
 8001a48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4a6a      	ldr	r2, [pc, #424]	; (8001c18 <HAL_I2C_Init+0x274>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d802      	bhi.n	8001a78 <HAL_I2C_Init+0xd4>
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	3301      	adds	r3, #1
 8001a76:	e009      	b.n	8001a8c <HAL_I2C_Init+0xe8>
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a7e:	fb02 f303 	mul.w	r3, r2, r3
 8001a82:	4a69      	ldr	r2, [pc, #420]	; (8001c28 <HAL_I2C_Init+0x284>)
 8001a84:	fba2 2303 	umull	r2, r3, r2, r3
 8001a88:	099b      	lsrs	r3, r3, #6
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	430b      	orrs	r3, r1
 8001a92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	495c      	ldr	r1, [pc, #368]	; (8001c18 <HAL_I2C_Init+0x274>)
 8001aa8:	428b      	cmp	r3, r1
 8001aaa:	d819      	bhi.n	8001ae0 <HAL_I2C_Init+0x13c>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1e59      	subs	r1, r3, #1
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aba:	1c59      	adds	r1, r3, #1
 8001abc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ac0:	400b      	ands	r3, r1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00a      	beq.n	8001adc <HAL_I2C_Init+0x138>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1e59      	subs	r1, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ada:	e051      	b.n	8001b80 <HAL_I2C_Init+0x1dc>
 8001adc:	2304      	movs	r3, #4
 8001ade:	e04f      	b.n	8001b80 <HAL_I2C_Init+0x1dc>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d111      	bne.n	8001b0c <HAL_I2C_Init+0x168>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	1e58      	subs	r0, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6859      	ldr	r1, [r3, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	440b      	add	r3, r1
 8001af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001afa:	3301      	adds	r3, #1
 8001afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf0c      	ite	eq
 8001b04:	2301      	moveq	r3, #1
 8001b06:	2300      	movne	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	e012      	b.n	8001b32 <HAL_I2C_Init+0x18e>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1e58      	subs	r0, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6859      	ldr	r1, [r3, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	0099      	lsls	r1, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b22:	3301      	adds	r3, #1
 8001b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf0c      	ite	eq
 8001b2c:	2301      	moveq	r3, #1
 8001b2e:	2300      	movne	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_I2C_Init+0x196>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e022      	b.n	8001b80 <HAL_I2C_Init+0x1dc>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10e      	bne.n	8001b60 <HAL_I2C_Init+0x1bc>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1e58      	subs	r0, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6859      	ldr	r1, [r3, #4]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	440b      	add	r3, r1
 8001b50:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b54:	3301      	adds	r3, #1
 8001b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b5e:	e00f      	b.n	8001b80 <HAL_I2C_Init+0x1dc>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1e58      	subs	r0, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6859      	ldr	r1, [r3, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	0099      	lsls	r1, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b76:	3301      	adds	r3, #1
 8001b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	6809      	ldr	r1, [r1, #0]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69da      	ldr	r2, [r3, #28]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6911      	ldr	r1, [r2, #16]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	68d2      	ldr	r2, [r2, #12]
 8001bba:	4311      	orrs	r1, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695a      	ldr	r2, [r3, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0201 	orr.w	r2, r2, #1
 8001bee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	000186a0 	.word	0x000186a0
 8001c1c:	001e847f 	.word	0x001e847f
 8001c20:	003d08ff 	.word	0x003d08ff
 8001c24:	431bde83 	.word	0x431bde83
 8001c28:	10624dd3 	.word	0x10624dd3

08001c2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af02      	add	r7, sp, #8
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	4608      	mov	r0, r1
 8001c36:	4611      	mov	r1, r2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	817b      	strh	r3, [r7, #10]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	813b      	strh	r3, [r7, #8]
 8001c42:	4613      	mov	r3, r2
 8001c44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c46:	f7ff fb09 	bl	800125c <HAL_GetTick>
 8001c4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b20      	cmp	r3, #32
 8001c56:	f040 80d9 	bne.w	8001e0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2319      	movs	r3, #25
 8001c60:	2201      	movs	r2, #1
 8001c62:	496d      	ldr	r1, [pc, #436]	; (8001e18 <HAL_I2C_Mem_Write+0x1ec>)
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 fc7f 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001c70:	2302      	movs	r3, #2
 8001c72:	e0cc      	b.n	8001e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_I2C_Mem_Write+0x56>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e0c5      	b.n	8001e0e <HAL_I2C_Mem_Write+0x1e2>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d007      	beq.n	8001ca8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0201 	orr.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2221      	movs	r2, #33	; 0x21
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2240      	movs	r2, #64	; 0x40
 8001cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a3a      	ldr	r2, [r7, #32]
 8001cd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4a4d      	ldr	r2, [pc, #308]	; (8001e1c <HAL_I2C_Mem_Write+0x1f0>)
 8001ce8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cea:	88f8      	ldrh	r0, [r7, #6]
 8001cec:	893a      	ldrh	r2, [r7, #8]
 8001cee:	8979      	ldrh	r1, [r7, #10]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 fab6 	bl	800226c <I2C_RequestMemoryWrite>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d052      	beq.n	8001dac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e081      	b.n	8001e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 fd00 	bl	8002714 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00d      	beq.n	8001d36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d107      	bne.n	8001d32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e06b      	b.n	8001e0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d11b      	bne.n	8001dac <HAL_I2C_Mem_Write+0x180>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d017      	beq.n	8001dac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	781a      	ldrb	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1aa      	bne.n	8001d0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 fcec 	bl	8002796 <I2C_WaitOnBTFFlagUntilTimeout>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00d      	beq.n	8001de0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d107      	bne.n	8001ddc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e016      	b.n	8001e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2220      	movs	r2, #32
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e000      	b.n	8001e0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001e0c:	2302      	movs	r3, #2
  }
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	00100002 	.word	0x00100002
 8001e1c:	ffff0000 	.word	0xffff0000

08001e20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	; 0x30
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	4608      	mov	r0, r1
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4603      	mov	r3, r0
 8001e30:	817b      	strh	r3, [r7, #10]
 8001e32:	460b      	mov	r3, r1
 8001e34:	813b      	strh	r3, [r7, #8]
 8001e36:	4613      	mov	r3, r2
 8001e38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e3a:	f7ff fa0f 	bl	800125c <HAL_GetTick>
 8001e3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b20      	cmp	r3, #32
 8001e4a:	f040 8208 	bne.w	800225e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	2319      	movs	r3, #25
 8001e54:	2201      	movs	r2, #1
 8001e56:	497b      	ldr	r1, [pc, #492]	; (8002044 <HAL_I2C_Mem_Read+0x224>)
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f000 fb85 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001e64:	2302      	movs	r3, #2
 8001e66:	e1fb      	b.n	8002260 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_I2C_Mem_Read+0x56>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e1f4      	b.n	8002260 <HAL_I2C_Mem_Read+0x440>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d007      	beq.n	8001e9c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2222      	movs	r2, #34	; 0x22
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2240      	movs	r2, #64	; 0x40
 8001eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4a5b      	ldr	r2, [pc, #364]	; (8002048 <HAL_I2C_Mem_Read+0x228>)
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ede:	88f8      	ldrh	r0, [r7, #6]
 8001ee0:	893a      	ldrh	r2, [r7, #8]
 8001ee2:	8979      	ldrh	r1, [r7, #10]
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	9301      	str	r3, [sp, #4]
 8001ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	4603      	mov	r3, r0
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 fa52 	bl	8002398 <I2C_RequestMemoryRead>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e1b0      	b.n	8002260 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d113      	bne.n	8001f2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f06:	2300      	movs	r3, #0
 8001f08:	623b      	str	r3, [r7, #32]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	623b      	str	r3, [r7, #32]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	623b      	str	r3, [r7, #32]
 8001f1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	e184      	b.n	8002238 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d11b      	bne.n	8001f6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	e164      	b.n	8002238 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d11b      	bne.n	8001fae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	61bb      	str	r3, [r7, #24]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	61bb      	str	r3, [r7, #24]
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	e144      	b.n	8002238 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001fc4:	e138      	b.n	8002238 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	f200 80f1 	bhi.w	80021b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d123      	bne.n	8002020 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 fc1b 	bl	8002818 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e139      	b.n	8002260 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002014:	b29b      	uxth	r3, r3
 8002016:	3b01      	subs	r3, #1
 8002018:	b29a      	uxth	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800201e:	e10b      	b.n	8002238 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002024:	2b02      	cmp	r3, #2
 8002026:	d14e      	bne.n	80020c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800202e:	2200      	movs	r2, #0
 8002030:	4906      	ldr	r1, [pc, #24]	; (800204c <HAL_I2C_Mem_Read+0x22c>)
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 fa98 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d008      	beq.n	8002050 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e10e      	b.n	8002260 <HAL_I2C_Mem_Read+0x440>
 8002042:	bf00      	nop
 8002044:	00100002 	.word	0x00100002
 8002048:	ffff0000 	.word	0xffff0000
 800204c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800205e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691a      	ldr	r2, [r3, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002088:	b29b      	uxth	r3, r3
 800208a:	3b01      	subs	r3, #1
 800208c:	b29a      	uxth	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3b01      	subs	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020c4:	e0b8      	b.n	8002238 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020cc:	2200      	movs	r2, #0
 80020ce:	4966      	ldr	r1, [pc, #408]	; (8002268 <HAL_I2C_Mem_Read+0x448>)
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 fa49 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0bf      	b.n	8002260 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29b      	uxth	r3, r3
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002128:	2200      	movs	r2, #0
 800212a:	494f      	ldr	r1, [pc, #316]	; (8002268 <HAL_I2C_Mem_Read+0x448>)
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 fa1b 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e091      	b.n	8002260 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800214a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691a      	ldr	r2, [r3, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002174:	b29b      	uxth	r3, r3
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	3b01      	subs	r3, #1
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021b0:	e042      	b.n	8002238 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fb2e 	bl	8002818 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e04c      	b.n	8002260 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b04      	cmp	r3, #4
 8002204:	d118      	bne.n	8002238 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002222:	3b01      	subs	r3, #1
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222e:	b29b      	uxth	r3, r3
 8002230:	3b01      	subs	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223c:	2b00      	cmp	r3, #0
 800223e:	f47f aec2 	bne.w	8001fc6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2220      	movs	r2, #32
 8002246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e000      	b.n	8002260 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800225e:	2302      	movs	r3, #2
  }
}
 8002260:	4618      	mov	r0, r3
 8002262:	3728      	adds	r7, #40	; 0x28
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	00010004 	.word	0x00010004

0800226c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af02      	add	r7, sp, #8
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	4608      	mov	r0, r1
 8002276:	4611      	mov	r1, r2
 8002278:	461a      	mov	r2, r3
 800227a:	4603      	mov	r3, r0
 800227c:	817b      	strh	r3, [r7, #10]
 800227e:	460b      	mov	r3, r1
 8002280:	813b      	strh	r3, [r7, #8]
 8002282:	4613      	mov	r3, r2
 8002284:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002294:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	2200      	movs	r2, #0
 800229e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f960 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00d      	beq.n	80022ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022bc:	d103      	bne.n	80022c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e05f      	b.n	800238a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022ca:	897b      	ldrh	r3, [r7, #10]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	461a      	mov	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	6a3a      	ldr	r2, [r7, #32]
 80022de:	492d      	ldr	r1, [pc, #180]	; (8002394 <I2C_RequestMemoryWrite+0x128>)
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 f998 	bl	8002616 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e04c      	b.n	800238a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002308:	6a39      	ldr	r1, [r7, #32]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 fa02 	bl	8002714 <I2C_WaitOnTXEFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00d      	beq.n	8002332 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	2b04      	cmp	r3, #4
 800231c:	d107      	bne.n	800232e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e02b      	b.n	800238a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d105      	bne.n	8002344 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002338:	893b      	ldrh	r3, [r7, #8]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	611a      	str	r2, [r3, #16]
 8002342:	e021      	b.n	8002388 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002344:	893b      	ldrh	r3, [r7, #8]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	b29b      	uxth	r3, r3
 800234a:	b2da      	uxtb	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002354:	6a39      	ldr	r1, [r7, #32]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f9dc 	bl	8002714 <I2C_WaitOnTXEFlagUntilTimeout>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00d      	beq.n	800237e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	2b04      	cmp	r3, #4
 8002368:	d107      	bne.n	800237a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002378:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e005      	b.n	800238a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800237e:	893b      	ldrh	r3, [r7, #8]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	00010002 	.word	0x00010002

08002398 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af02      	add	r7, sp, #8
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	4608      	mov	r0, r1
 80023a2:	4611      	mov	r1, r2
 80023a4:	461a      	mov	r2, r3
 80023a6:	4603      	mov	r3, r0
 80023a8:	817b      	strh	r3, [r7, #10]
 80023aa:	460b      	mov	r3, r1
 80023ac:	813b      	strh	r3, [r7, #8]
 80023ae:	4613      	mov	r3, r2
 80023b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	2200      	movs	r2, #0
 80023da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 f8c2 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00d      	beq.n	8002406 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023f8:	d103      	bne.n	8002402 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002400:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e0aa      	b.n	800255c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002406:	897b      	ldrh	r3, [r7, #10]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	461a      	mov	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002414:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	6a3a      	ldr	r2, [r7, #32]
 800241a:	4952      	ldr	r1, [pc, #328]	; (8002564 <I2C_RequestMemoryRead+0x1cc>)
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f8fa 	bl	8002616 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e097      	b.n	800255c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002444:	6a39      	ldr	r1, [r7, #32]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f964 	bl	8002714 <I2C_WaitOnTXEFlagUntilTimeout>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00d      	beq.n	800246e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	2b04      	cmp	r3, #4
 8002458:	d107      	bne.n	800246a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002468:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e076      	b.n	800255c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d105      	bne.n	8002480 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002474:	893b      	ldrh	r3, [r7, #8]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	611a      	str	r2, [r3, #16]
 800247e:	e021      	b.n	80024c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002480:	893b      	ldrh	r3, [r7, #8]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	b29b      	uxth	r3, r3
 8002486:	b2da      	uxtb	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800248e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002490:	6a39      	ldr	r1, [r7, #32]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f93e 	bl	8002714 <I2C_WaitOnTXEFlagUntilTimeout>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00d      	beq.n	80024ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d107      	bne.n	80024b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e050      	b.n	800255c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024ba:	893b      	ldrh	r3, [r7, #8]
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c6:	6a39      	ldr	r1, [r7, #32]
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f923 	bl	8002714 <I2C_WaitOnTXEFlagUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00d      	beq.n	80024f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d107      	bne.n	80024ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e035      	b.n	800255c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	2200      	movs	r2, #0
 8002508:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 f82b 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00d      	beq.n	8002534 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002526:	d103      	bne.n	8002530 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800252e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e013      	b.n	800255c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002534:	897b      	ldrh	r3, [r7, #10]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	b2da      	uxtb	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	6a3a      	ldr	r2, [r7, #32]
 8002548:	4906      	ldr	r1, [pc, #24]	; (8002564 <I2C_RequestMemoryRead+0x1cc>)
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f863 	bl	8002616 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	00010002 	.word	0x00010002

08002568 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	4613      	mov	r3, r2
 8002576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002578:	e025      	b.n	80025c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002580:	d021      	beq.n	80025c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002582:	f7fe fe6b 	bl	800125c <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d302      	bcc.n	8002598 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d116      	bne.n	80025c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2220      	movs	r2, #32
 80025a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f043 0220 	orr.w	r2, r3, #32
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e023      	b.n	800260e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	0c1b      	lsrs	r3, r3, #16
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d10d      	bne.n	80025ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	43da      	mvns	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	4013      	ands	r3, r2
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	bf0c      	ite	eq
 80025e2:	2301      	moveq	r3, #1
 80025e4:	2300      	movne	r3, #0
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	e00c      	b.n	8002606 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	43da      	mvns	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4013      	ands	r3, r2
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	bf0c      	ite	eq
 80025fe:	2301      	moveq	r3, #1
 8002600:	2300      	movne	r3, #0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	429a      	cmp	r2, r3
 800260a:	d0b6      	beq.n	800257a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b084      	sub	sp, #16
 800261a:	af00      	add	r7, sp, #0
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002624:	e051      	b.n	80026ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002634:	d123      	bne.n	800267e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002644:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800264e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2220      	movs	r2, #32
 800265a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f043 0204 	orr.w	r2, r3, #4
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e046      	b.n	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002684:	d021      	beq.n	80026ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002686:	f7fe fde9 	bl	800125c <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	429a      	cmp	r2, r3
 8002694:	d302      	bcc.n	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d116      	bne.n	80026ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f043 0220 	orr.w	r2, r3, #32
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e020      	b.n	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d10c      	bne.n	80026ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	43da      	mvns	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	4013      	ands	r3, r2
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bf14      	ite	ne
 80026e6:	2301      	movne	r3, #1
 80026e8:	2300      	moveq	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	e00b      	b.n	8002706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	43da      	mvns	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	4013      	ands	r3, r2
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf14      	ite	ne
 8002700:	2301      	movne	r3, #1
 8002702:	2300      	moveq	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d18d      	bne.n	8002626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002720:	e02d      	b.n	800277e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f8ce 	bl	80028c4 <I2C_IsAcknowledgeFailed>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e02d      	b.n	800278e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002738:	d021      	beq.n	800277e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273a:	f7fe fd8f 	bl	800125c <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	429a      	cmp	r2, r3
 8002748:	d302      	bcc.n	8002750 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d116      	bne.n	800277e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f043 0220 	orr.w	r2, r3, #32
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e007      	b.n	800278e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002788:	2b80      	cmp	r3, #128	; 0x80
 800278a:	d1ca      	bne.n	8002722 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b084      	sub	sp, #16
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027a2:	e02d      	b.n	8002800 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 f88d 	bl	80028c4 <I2C_IsAcknowledgeFailed>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e02d      	b.n	8002810 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027ba:	d021      	beq.n	8002800 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027bc:	f7fe fd4e 	bl	800125c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d302      	bcc.n	80027d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d116      	bne.n	8002800 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e007      	b.n	8002810 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b04      	cmp	r3, #4
 800280c:	d1ca      	bne.n	80027a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002824:	e042      	b.n	80028ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	2b10      	cmp	r3, #16
 8002832:	d119      	bne.n	8002868 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0210 	mvn.w	r2, #16
 800283c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e029      	b.n	80028bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002868:	f7fe fcf8 	bl	800125c <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	429a      	cmp	r2, r3
 8002876:	d302      	bcc.n	800287e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d116      	bne.n	80028ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	f043 0220 	orr.w	r2, r3, #32
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e007      	b.n	80028bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b6:	2b40      	cmp	r3, #64	; 0x40
 80028b8:	d1b5      	bne.n	8002826 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028da:	d11b      	bne.n	8002914 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f043 0204 	orr.w	r2, r3, #4
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002924:	b08f      	sub	sp, #60	; 0x3c
 8002926:	af0a      	add	r7, sp, #40	; 0x28
 8002928:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e10f      	b.n	8002b54 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f007 fa98 	bl	8009e84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2203      	movs	r2, #3
 8002958:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d102      	bne.n	800296e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f003 fd67 	bl	8006446 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	603b      	str	r3, [r7, #0]
 800297e:	687e      	ldr	r6, [r7, #4]
 8002980:	466d      	mov	r5, sp
 8002982:	f106 0410 	add.w	r4, r6, #16
 8002986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800298a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800298c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800298e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002992:	e885 0003 	stmia.w	r5, {r0, r1}
 8002996:	1d33      	adds	r3, r6, #4
 8002998:	cb0e      	ldmia	r3, {r1, r2, r3}
 800299a:	6838      	ldr	r0, [r7, #0]
 800299c:	f003 fc3e 	bl	800621c <USB_CoreInit>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2202      	movs	r2, #2
 80029aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e0d0      	b.n	8002b54 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f003 fd55 	bl	8006468 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029be:	2300      	movs	r3, #0
 80029c0:	73fb      	strb	r3, [r7, #15]
 80029c2:	e04a      	b.n	8002a5a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	333d      	adds	r3, #61	; 0x3d
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	333c      	adds	r3, #60	; 0x3c
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	b298      	uxth	r0, r3
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	3344      	adds	r3, #68	; 0x44
 8002a00:	4602      	mov	r2, r0
 8002a02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a04:	7bfa      	ldrb	r2, [r7, #15]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	3340      	adds	r3, #64	; 0x40
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a18:	7bfa      	ldrb	r2, [r7, #15]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	3348      	adds	r3, #72	; 0x48
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a2c:	7bfa      	ldrb	r2, [r7, #15]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	334c      	adds	r3, #76	; 0x4c
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a40:	7bfa      	ldrb	r2, [r7, #15]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	3354      	adds	r3, #84	; 0x54
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	3301      	adds	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
 8002a5a:	7bfa      	ldrb	r2, [r7, #15]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d3af      	bcc.n	80029c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a64:	2300      	movs	r3, #0
 8002a66:	73fb      	strb	r3, [r7, #15]
 8002a68:	e044      	b.n	8002af4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a80:	7bfa      	ldrb	r2, [r7, #15]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a96:	7bfa      	ldrb	r2, [r7, #15]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002aac:	7bfa      	ldrb	r2, [r7, #15]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ac2:	7bfa      	ldrb	r2, [r7, #15]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ad8:	7bfa      	ldrb	r2, [r7, #15]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	3301      	adds	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
 8002af4:	7bfa      	ldrb	r2, [r7, #15]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d3b5      	bcc.n	8002a6a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	687e      	ldr	r6, [r7, #4]
 8002b06:	466d      	mov	r5, sp
 8002b08:	f106 0410 	add.w	r4, r6, #16
 8002b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b18:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b1c:	1d33      	adds	r3, r6, #4
 8002b1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b20:	6838      	ldr	r0, [r7, #0]
 8002b22:	f003 fced 	bl	8006500 <USB_DevInit>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e00d      	b.n	8002b54 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f004 fe3c 	bl	80077ca <USB_DevDisconnect>

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b5c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_PCD_Start+0x1c>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e020      	b.n	8002bba <HAL_PCD_Start+0x5e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d109      	bne.n	8002b9c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d005      	beq.n	8002b9c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f003 fc3f 	bl	8006424 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f004 fdec 	bl	8007788 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002bc2:	b590      	push	{r4, r7, lr}
 8002bc4:	b08d      	sub	sp, #52	; 0x34
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f004 feaa 	bl	8007932 <USB_GetMode>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f040 848a 	bne.w	80034fa <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f004 fe0e 	bl	800780c <USB_ReadInterrupts>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 8480 	beq.w	80034f8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f004 fdfb 	bl	800780c <USB_ReadInterrupts>
 8002c16:	4603      	mov	r3, r0
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d107      	bne.n	8002c30 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f002 0202 	and.w	r2, r2, #2
 8002c2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f004 fde9 	bl	800780c <USB_ReadInterrupts>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	2b10      	cmp	r3, #16
 8002c42:	d161      	bne.n	8002d08 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0210 	bic.w	r2, r2, #16
 8002c52:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	f003 020f 	and.w	r2, r3, #15
 8002c60:	4613      	mov	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	4413      	add	r3, r2
 8002c70:	3304      	adds	r3, #4
 8002c72:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	0c5b      	lsrs	r3, r3, #17
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d124      	bne.n	8002cca <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d035      	beq.n	8002cf8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	091b      	lsrs	r3, r3, #4
 8002c94:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	6a38      	ldr	r0, [r7, #32]
 8002ca0:	f004 fc20 	bl	80074e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	091b      	lsrs	r3, r3, #4
 8002cac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cb0:	441a      	add	r2, r3
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	6a1a      	ldr	r2, [r3, #32]
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cc2:	441a      	add	r2, r3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	621a      	str	r2, [r3, #32]
 8002cc8:	e016      	b.n	8002cf8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	0c5b      	lsrs	r3, r3, #17
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	2b06      	cmp	r3, #6
 8002cd4:	d110      	bne.n	8002cf8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cdc:	2208      	movs	r2, #8
 8002cde:	4619      	mov	r1, r3
 8002ce0:	6a38      	ldr	r0, [r7, #32]
 8002ce2:	f004 fbff 	bl	80074e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	6a1a      	ldr	r2, [r3, #32]
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cf2:	441a      	add	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0210 	orr.w	r2, r2, #16
 8002d06:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f004 fd7d 	bl	800780c <USB_ReadInterrupts>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d1c:	f040 80a7 	bne.w	8002e6e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f004 fd82 	bl	8007832 <USB_ReadDevAllOutEpInterrupt>
 8002d2e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002d30:	e099      	b.n	8002e66 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 808e 	beq.w	8002e5a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	4611      	mov	r1, r2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f004 fda6 	bl	800789a <USB_ReadDevOutEPInterrupt>
 8002d4e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00c      	beq.n	8002d74 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d66:	461a      	mov	r2, r3
 8002d68:	2301      	movs	r3, #1
 8002d6a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fec2 	bl	8003af8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00c      	beq.n	8002d98 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2308      	movs	r3, #8
 8002d8e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 ff98 	bl	8003cc8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d008      	beq.n	8002db4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dae:	461a      	mov	r2, r3
 8002db0:	2310      	movs	r3, #16
 8002db2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d030      	beq.n	8002e20 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc6:	2b80      	cmp	r3, #128	; 0x80
 8002dc8:	d109      	bne.n	8002dde <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	69fa      	ldr	r2, [r7, #28]
 8002dd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ddc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	4413      	add	r3, r2
 8002df0:	3304      	adds	r3, #4
 8002df2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	78db      	ldrb	r3, [r3, #3]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d108      	bne.n	8002e0e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	4619      	mov	r1, r3
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f007 f937 	bl	800a07c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d008      	beq.n	8002e3c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e36:	461a      	mov	r2, r3
 8002e38:	2320      	movs	r3, #32
 8002e3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e52:	461a      	mov	r2, r3
 8002e54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e58:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e62:	085b      	lsrs	r3, r3, #1
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f47f af62 	bne.w	8002d32 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f004 fcca 	bl	800780c <USB_ReadInterrupts>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e82:	f040 80db 	bne.w	800303c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f004 fceb 	bl	8007866 <USB_ReadDevAllInEpInterrupt>
 8002e90:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002e96:	e0cd      	b.n	8003034 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 80c2 	beq.w	8003028 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f004 fd11 	bl	80078d6 <USB_ReadDevInEPInterrupt>
 8002eb4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d057      	beq.n	8002f70 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69f9      	ldr	r1, [r7, #28]
 8002edc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d132      	bne.n	8002f64 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f02:	4613      	mov	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	334c      	adds	r3, #76	; 0x4c
 8002f0e:	6819      	ldr	r1, [r3, #0]
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4403      	add	r3, r0
 8002f1e:	3348      	adds	r3, #72	; 0x48
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4419      	add	r1, r3
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4403      	add	r3, r0
 8002f32:	334c      	adds	r3, #76	; 0x4c
 8002f34:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d113      	bne.n	8002f64 <HAL_PCD_IRQHandler+0x3a2>
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	3354      	adds	r3, #84	; 0x54
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d108      	bne.n	8002f64 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	2101      	movs	r1, #1
 8002f60:	f004 fd18 	bl	8007994 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	4619      	mov	r1, r3
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f007 f80b 	bl	8009f86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d008      	beq.n	8002f8c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f86:	461a      	mov	r2, r3
 8002f88:	2308      	movs	r3, #8
 8002f8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d008      	beq.n	8002fa8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2310      	movs	r3, #16
 8002fa6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	2340      	movs	r3, #64	; 0x40
 8002fc2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d023      	beq.n	8003016 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002fce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fd0:	6a38      	ldr	r0, [r7, #32]
 8002fd2:	f003 fbf9 	bl	80067c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	3338      	adds	r3, #56	; 0x38
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	78db      	ldrb	r3, [r3, #3]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d108      	bne.n	8003004 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f007 f84e 	bl	800a0a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	4413      	add	r3, r2
 800300c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003010:	461a      	mov	r2, r3
 8003012:	2302      	movs	r3, #2
 8003014:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fcdb 	bl	80039de <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	3301      	adds	r3, #1
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	085b      	lsrs	r3, r3, #1
 8003032:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003036:	2b00      	cmp	r3, #0
 8003038:	f47f af2e 	bne.w	8002e98 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f004 fbe3 	bl	800780c <USB_ReadInterrupts>
 8003046:	4603      	mov	r3, r0
 8003048:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800304c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003050:	d122      	bne.n	8003098 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800306c:	2b01      	cmp	r3, #1
 800306e:	d108      	bne.n	8003082 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003078:	2100      	movs	r1, #0
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fec2 	bl	8003e04 <HAL_PCDEx_LPM_Callback>
 8003080:	e002      	b.n	8003088 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f006 ffec 	bl	800a060 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003096:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f004 fbb5 	bl	800780c <USB_ReadInterrupts>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ac:	d112      	bne.n	80030d4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d102      	bne.n	80030c4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f006 ffa8 	bl	800a014 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695a      	ldr	r2, [r3, #20]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80030d2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f004 fb97 	bl	800780c <USB_ReadInterrupts>
 80030de:	4603      	mov	r3, r0
 80030e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e8:	f040 80b7 	bne.w	800325a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030fa:	f023 0301 	bic.w	r3, r3, #1
 80030fe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2110      	movs	r1, #16
 8003106:	4618      	mov	r0, r3
 8003108:	f003 fb5e 	bl	80067c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800310c:	2300      	movs	r3, #0
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003110:	e046      	b.n	80031a0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	4413      	add	r3, r2
 800311a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800311e:	461a      	mov	r2, r3
 8003120:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003124:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	4413      	add	r3, r2
 800312e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003136:	0151      	lsls	r1, r2, #5
 8003138:	69fa      	ldr	r2, [r7, #28]
 800313a:	440a      	add	r2, r1
 800313c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003140:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003144:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	4413      	add	r3, r2
 800314e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003152:	461a      	mov	r2, r3
 8003154:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003158:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800315a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	4413      	add	r3, r2
 8003162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800316a:	0151      	lsls	r1, r2, #5
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	440a      	add	r2, r1
 8003170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003174:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003178:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800317a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800318a:	0151      	lsls	r1, r2, #5
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	440a      	add	r2, r1
 8003190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003194:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003198:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800319a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319c:	3301      	adds	r3, #1
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d3b3      	bcc.n	8003112 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031b8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80031bc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d016      	beq.n	80031f4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031d6:	f043 030b 	orr.w	r3, r3, #11
 80031da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031ec:	f043 030b 	orr.w	r3, r3, #11
 80031f0:	6453      	str	r3, [r2, #68]	; 0x44
 80031f2:	e015      	b.n	8003220 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003202:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003206:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800320a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800321a:	f043 030b 	orr.w	r3, r3, #11
 800321e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800322e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003232:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003244:	461a      	mov	r2, r3
 8003246:	f004 fba5 	bl	8007994 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003258:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f004 fad4 	bl	800780c <USB_ReadInterrupts>
 8003264:	4603      	mov	r3, r0
 8003266:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800326a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800326e:	d124      	bne.n	80032ba <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f004 fb6a 	bl	800794e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f003 fb1f 	bl	80068c2 <USB_GetDevSpeed>
 8003284:	4603      	mov	r3, r0
 8003286:	461a      	mov	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681c      	ldr	r4, [r3, #0]
 8003290:	f001 f9e8 	bl	8004664 <HAL_RCC_GetHCLKFreq>
 8003294:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800329a:	b2db      	uxtb	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	4620      	mov	r0, r4
 80032a0:	f003 f81e 	bl	80062e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f006 fe96 	bl	8009fd6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80032b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f004 faa4 	bl	800780c <USB_ReadInterrupts>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d10a      	bne.n	80032e4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f006 fe73 	bl	8009fba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f002 0208 	and.w	r2, r2, #8
 80032e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f004 fa8f 	bl	800780c <USB_ReadInterrupts>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f4:	2b80      	cmp	r3, #128	; 0x80
 80032f6:	d122      	bne.n	800333e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003304:	2301      	movs	r3, #1
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
 8003308:	e014      	b.n	8003334 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330e:	4613      	mov	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d105      	bne.n	800332e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	b2db      	uxtb	r3, r3
 8003326:	4619      	mov	r1, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 fb27 	bl	800397c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	3301      	adds	r3, #1
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333a:	429a      	cmp	r2, r3
 800333c:	d3e5      	bcc.n	800330a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f004 fa62 	bl	800780c <USB_ReadInterrupts>
 8003348:	4603      	mov	r3, r0
 800334a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800334e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003352:	d13b      	bne.n	80033cc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003354:	2301      	movs	r3, #1
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
 8003358:	e02b      	b.n	80033b2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	3340      	adds	r3, #64	; 0x40
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d115      	bne.n	80033ac <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003380:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003382:	2b00      	cmp	r3, #0
 8003384:	da12      	bge.n	80033ac <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	333f      	adds	r3, #63	; 0x3f
 8003396:	2201      	movs	r2, #1
 8003398:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	4619      	mov	r1, r3
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fae8 	bl	800397c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	3301      	adds	r3, #1
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d3ce      	bcc.n	800335a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80033ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f004 fa1b 	bl	800780c <USB_ReadInterrupts>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033e0:	d155      	bne.n	800348e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033e2:	2301      	movs	r3, #1
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
 80033e6:	e045      	b.n	8003474 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fc:	4613      	mov	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4413      	add	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d12e      	bne.n	800346e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003410:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003412:	2b00      	cmp	r3, #0
 8003414:	da2b      	bge.n	800346e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003422:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003426:	429a      	cmp	r2, r3
 8003428:	d121      	bne.n	800346e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342e:	4613      	mov	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800343c:	2201      	movs	r2, #1
 800343e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10a      	bne.n	800346e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	69fa      	ldr	r2, [r7, #28]
 8003462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800346a:	6053      	str	r3, [r2, #4]
            break;
 800346c:	e007      	b.n	800347e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	3301      	adds	r3, #1
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347a:	429a      	cmp	r2, r3
 800347c:	d3b4      	bcc.n	80033e8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800348c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f004 f9ba 	bl	800780c <USB_ReadInterrupts>
 8003498:	4603      	mov	r3, r0
 800349a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800349e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a2:	d10a      	bne.n	80034ba <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f006 fe0d 	bl	800a0c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80034b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f004 f9a4 	bl	800780c <USB_ReadInterrupts>
 80034c4:	4603      	mov	r3, r0
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d115      	bne.n	80034fa <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f006 fdfd 	bl	800a0e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]
 80034f6:	e000      	b.n	80034fa <HAL_PCD_IRQHandler+0x938>
      return;
 80034f8:	bf00      	nop
    }
  }
}
 80034fa:	3734      	adds	r7, #52	; 0x34
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd90      	pop	{r4, r7, pc}

08003500 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003512:	2b01      	cmp	r3, #1
 8003514:	d101      	bne.n	800351a <HAL_PCD_SetAddress+0x1a>
 8003516:	2302      	movs	r3, #2
 8003518:	e013      	b.n	8003542 <HAL_PCD_SetAddress+0x42>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f004 f902 	bl	800773c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	4608      	mov	r0, r1
 8003554:	4611      	mov	r1, r2
 8003556:	461a      	mov	r2, r3
 8003558:	4603      	mov	r3, r0
 800355a:	70fb      	strb	r3, [r7, #3]
 800355c:	460b      	mov	r3, r1
 800355e:	803b      	strh	r3, [r7, #0]
 8003560:	4613      	mov	r3, r2
 8003562:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800356c:	2b00      	cmp	r3, #0
 800356e:	da0f      	bge.n	8003590 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	f003 020f 	and.w	r2, r3, #15
 8003576:	4613      	mov	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	3338      	adds	r3, #56	; 0x38
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	4413      	add	r3, r2
 8003584:	3304      	adds	r3, #4
 8003586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2201      	movs	r2, #1
 800358c:	705a      	strb	r2, [r3, #1]
 800358e:	e00f      	b.n	80035b0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	f003 020f 	and.w	r2, r3, #15
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	4413      	add	r3, r2
 80035a6:	3304      	adds	r3, #4
 80035a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80035bc:	883a      	ldrh	r2, [r7, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	78ba      	ldrb	r2, [r7, #2]
 80035c6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	785b      	ldrb	r3, [r3, #1]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d004      	beq.n	80035da <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035da:	78bb      	ldrb	r3, [r7, #2]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d102      	bne.n	80035e6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_PCD_EP_Open+0xaa>
 80035f0:	2302      	movs	r3, #2
 80035f2:	e00e      	b.n	8003612 <HAL_PCD_EP_Open+0xc8>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68f9      	ldr	r1, [r7, #12]
 8003602:	4618      	mov	r0, r3
 8003604:	f003 f982 	bl	800690c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003610:	7afb      	ldrb	r3, [r7, #11]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	460b      	mov	r3, r1
 8003624:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003626:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800362a:	2b00      	cmp	r3, #0
 800362c:	da0f      	bge.n	800364e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	f003 020f 	and.w	r2, r3, #15
 8003634:	4613      	mov	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	3338      	adds	r3, #56	; 0x38
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	4413      	add	r3, r2
 8003642:	3304      	adds	r3, #4
 8003644:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2201      	movs	r2, #1
 800364a:	705a      	strb	r2, [r3, #1]
 800364c:	e00f      	b.n	800366e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800364e:	78fb      	ldrb	r3, [r7, #3]
 8003650:	f003 020f 	and.w	r2, r3, #15
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	4413      	add	r3, r2
 8003664:	3304      	adds	r3, #4
 8003666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800366e:	78fb      	ldrb	r3, [r7, #3]
 8003670:	f003 030f 	and.w	r3, r3, #15
 8003674:	b2da      	uxtb	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_PCD_EP_Close+0x6e>
 8003684:	2302      	movs	r3, #2
 8003686:	e00e      	b.n	80036a6 <HAL_PCD_EP_Close+0x8c>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68f9      	ldr	r1, [r7, #12]
 8003696:	4618      	mov	r0, r3
 8003698:	f003 f9c0 	bl	8006a1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b086      	sub	sp, #24
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	603b      	str	r3, [r7, #0]
 80036ba:	460b      	mov	r3, r1
 80036bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036be:	7afb      	ldrb	r3, [r7, #11]
 80036c0:	f003 020f 	and.w	r2, r3, #15
 80036c4:	4613      	mov	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4413      	add	r3, r2
 80036d4:	3304      	adds	r3, #4
 80036d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	2200      	movs	r2, #0
 80036e8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2200      	movs	r2, #0
 80036ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036f0:	7afb      	ldrb	r3, [r7, #11]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d102      	bne.n	800370a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800370a:	7afb      	ldrb	r3, [r7, #11]
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	2b00      	cmp	r3, #0
 8003712:	d109      	bne.n	8003728 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	6979      	ldr	r1, [r7, #20]
 8003722:	f003 fc9f 	bl	8007064 <USB_EP0StartXfer>
 8003726:	e008      	b.n	800373a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	6979      	ldr	r1, [r7, #20]
 8003736:	f003 fa4d 	bl	8006bd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	f003 020f 	and.w	r2, r3, #15
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4413      	add	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003766:	681b      	ldr	r3, [r3, #0]
}
 8003768:	4618      	mov	r0, r3
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	460b      	mov	r3, r1
 8003782:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003784:	7afb      	ldrb	r3, [r7, #11]
 8003786:	f003 020f 	and.w	r2, r3, #15
 800378a:	4613      	mov	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	3338      	adds	r3, #56	; 0x38
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	3304      	adds	r3, #4
 800379a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2200      	movs	r2, #0
 80037ac:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2201      	movs	r2, #1
 80037b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037b4:	7afb      	ldrb	r3, [r7, #11]
 80037b6:	f003 030f 	and.w	r3, r3, #15
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d102      	bne.n	80037ce <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037ce:	7afb      	ldrb	r3, [r7, #11]
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d109      	bne.n	80037ec <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	461a      	mov	r2, r3
 80037e4:	6979      	ldr	r1, [r7, #20]
 80037e6:	f003 fc3d 	bl	8007064 <USB_EP0StartXfer>
 80037ea:	e008      	b.n	80037fe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6818      	ldr	r0, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	6979      	ldr	r1, [r7, #20]
 80037fa:	f003 f9eb 	bl	8006bd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	f003 020f 	and.w	r2, r3, #15
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	429a      	cmp	r2, r3
 8003820:	d901      	bls.n	8003826 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e050      	b.n	80038c8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003826:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800382a:	2b00      	cmp	r3, #0
 800382c:	da0f      	bge.n	800384e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	f003 020f 	and.w	r2, r3, #15
 8003834:	4613      	mov	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	3338      	adds	r3, #56	; 0x38
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	4413      	add	r3, r2
 8003842:	3304      	adds	r3, #4
 8003844:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	705a      	strb	r2, [r3, #1]
 800384c:	e00d      	b.n	800386a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	4413      	add	r3, r2
 8003860:	3304      	adds	r3, #4
 8003862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	b2da      	uxtb	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_PCD_EP_SetStall+0x82>
 8003886:	2302      	movs	r3, #2
 8003888:	e01e      	b.n	80038c8 <HAL_PCD_EP_SetStall+0xc0>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68f9      	ldr	r1, [r7, #12]
 8003898:	4618      	mov	r0, r3
 800389a:	f003 fe7b 	bl	8007594 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10a      	bne.n	80038be <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	b2d9      	uxtb	r1, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038b8:	461a      	mov	r2, r3
 80038ba:	f004 f86b 	bl	8007994 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	f003 020f 	and.w	r2, r3, #15
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d901      	bls.n	80038ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e042      	b.n	8003974 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	da0f      	bge.n	8003916 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	f003 020f 	and.w	r2, r3, #15
 80038fc:	4613      	mov	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	4413      	add	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	3338      	adds	r3, #56	; 0x38
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	4413      	add	r3, r2
 800390a:	3304      	adds	r3, #4
 800390c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	705a      	strb	r2, [r3, #1]
 8003914:	e00f      	b.n	8003936 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	f003 020f 	and.w	r2, r3, #15
 800391c:	4613      	mov	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	4413      	add	r3, r2
 800392c:	3304      	adds	r3, #4
 800392e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800393c:	78fb      	ldrb	r3, [r7, #3]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	b2da      	uxtb	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_PCD_EP_ClrStall+0x86>
 8003952:	2302      	movs	r3, #2
 8003954:	e00e      	b.n	8003974 <HAL_PCD_EP_ClrStall+0xa4>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68f9      	ldr	r1, [r7, #12]
 8003964:	4618      	mov	r0, r3
 8003966:	f003 fe83 	bl	8007670 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003988:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800398c:	2b00      	cmp	r3, #0
 800398e:	da0c      	bge.n	80039aa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	f003 020f 	and.w	r2, r3, #15
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	3338      	adds	r3, #56	; 0x38
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	4413      	add	r3, r2
 80039a4:	3304      	adds	r3, #4
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	e00c      	b.n	80039c4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	f003 020f 	and.w	r2, r3, #15
 80039b0:	4613      	mov	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	4413      	add	r3, r2
 80039c0:	3304      	adds	r3, #4
 80039c2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68f9      	ldr	r1, [r7, #12]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f003 fca2 	bl	8007314 <USB_EPStopXfer>
 80039d0:	4603      	mov	r3, r0
 80039d2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80039d4:	7afb      	ldrb	r3, [r7, #11]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b08a      	sub	sp, #40	; 0x28
 80039e2:	af02      	add	r7, sp, #8
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	4613      	mov	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	4413      	add	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	3338      	adds	r3, #56	; 0x38
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	4413      	add	r3, r2
 8003a02:	3304      	adds	r3, #4
 8003a04:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a1a      	ldr	r2, [r3, #32]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d901      	bls.n	8003a16 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e06c      	b.n	8003af0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d902      	bls.n	8003a32 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	3303      	adds	r3, #3
 8003a36:	089b      	lsrs	r3, r3, #2
 8003a38:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a3a:	e02b      	b.n	8003a94 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	699a      	ldr	r2, [r3, #24]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	69fa      	ldr	r2, [r7, #28]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d902      	bls.n	8003a58 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	3303      	adds	r3, #3
 8003a5c:	089b      	lsrs	r3, r3, #2
 8003a5e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6919      	ldr	r1, [r3, #16]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	4603      	mov	r3, r0
 8003a76:	6978      	ldr	r0, [r7, #20]
 8003a78:	f003 fcf6 	bl	8007468 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	441a      	add	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a1a      	ldr	r2, [r3, #32]
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	441a      	add	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d809      	bhi.n	8003abe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a1a      	ldr	r2, [r3, #32]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d203      	bcs.n	8003abe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1be      	bne.n	8003a3c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d811      	bhi.n	8003aee <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	6939      	ldr	r1, [r7, #16]
 8003ae6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003aea:	4013      	ands	r3, r2
 8003aec:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3720      	adds	r7, #32
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	333c      	adds	r3, #60	; 0x3c
 8003b10:	3304      	adds	r3, #4
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d17b      	bne.n	8003c26 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d015      	beq.n	8003b64 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	4a61      	ldr	r2, [pc, #388]	; (8003cc0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	f240 80b9 	bls.w	8003cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80b3 	beq.w	8003cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b60:	6093      	str	r3, [r2, #8]
 8003b62:	e0a7      	b.n	8003cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2320      	movs	r3, #32
 8003b7e:	6093      	str	r3, [r2, #8]
 8003b80:	e098      	b.n	8003cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f040 8093 	bne.w	8003cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	4a4b      	ldr	r2, [pc, #300]	; (8003cc0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d90f      	bls.n	8003bb6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bac:	461a      	mov	r2, r3
 8003bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bb2:	6093      	str	r3, [r2, #8]
 8003bb4:	e07e      	b.n	8003cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3304      	adds	r3, #4
 8003bca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	69da      	ldr	r2, [r3, #28]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	0159      	lsls	r1, r3, #5
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	440b      	add	r3, r1
 8003bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be2:	1ad2      	subs	r2, r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d114      	bne.n	8003c18 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d109      	bne.n	8003c0a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c00:	461a      	mov	r2, r3
 8003c02:	2101      	movs	r1, #1
 8003c04:	f003 fec6 	bl	8007994 <USB_EP0_OutStart>
 8003c08:	e006      	b.n	8003c18 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	691a      	ldr	r2, [r3, #16]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	441a      	add	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f006 f996 	bl	8009f50 <HAL_PCD_DataOutStageCallback>
 8003c24:	e046      	b.n	8003cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	4a26      	ldr	r2, [pc, #152]	; (8003cc4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d124      	bne.n	8003c78 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c44:	461a      	mov	r2, r3
 8003c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c4a:	6093      	str	r3, [r2, #8]
 8003c4c:	e032      	b.n	8003cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c64:	461a      	mov	r2, r3
 8003c66:	2320      	movs	r3, #32
 8003c68:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	4619      	mov	r1, r3
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f006 f96d 	bl	8009f50 <HAL_PCD_DataOutStageCallback>
 8003c76:	e01d      	b.n	8003cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d114      	bne.n	8003ca8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	4613      	mov	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d108      	bne.n	8003ca8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6818      	ldr	r0, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	f003 fe76 	bl	8007994 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	4619      	mov	r1, r3
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f006 f94e 	bl	8009f50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3720      	adds	r7, #32
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	4f54300a 	.word	0x4f54300a
 8003cc4:	4f54310a 	.word	0x4f54310a

08003cc8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	333c      	adds	r3, #60	; 0x3c
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4a15      	ldr	r2, [pc, #84]	; (8003d50 <PCD_EP_OutSetupPacket_int+0x88>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d90e      	bls.n	8003d1c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d009      	beq.n	8003d1c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d14:	461a      	mov	r2, r3
 8003d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d1a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f006 f905 	bl	8009f2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4a0a      	ldr	r2, [pc, #40]	; (8003d50 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d90c      	bls.n	8003d44 <PCD_EP_OutSetupPacket_int+0x7c>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d108      	bne.n	8003d44 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	2101      	movs	r1, #1
 8003d40:	f003 fe28 	bl	8007994 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	4f54300a 	.word	0x4f54300a

08003d54 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	70fb      	strb	r3, [r7, #3]
 8003d60:	4613      	mov	r3, r2
 8003d62:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d107      	bne.n	8003d82 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d72:	883b      	ldrh	r3, [r7, #0]
 8003d74:	0419      	lsls	r1, r3, #16
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	629a      	str	r2, [r3, #40]	; 0x28
 8003d80:	e028      	b.n	8003dd4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	0c1b      	lsrs	r3, r3, #16
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d90:	2300      	movs	r3, #0
 8003d92:	73fb      	strb	r3, [r7, #15]
 8003d94:	e00d      	b.n	8003db2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
 8003d9c:	3340      	adds	r3, #64	; 0x40
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	0c1b      	lsrs	r3, r3, #16
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	4413      	add	r3, r2
 8003daa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	3301      	adds	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
 8003db2:	7bfa      	ldrb	r2, [r7, #15]
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d3ec      	bcc.n	8003d96 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003dbc:	883b      	ldrh	r3, [r7, #0]
 8003dbe:	0418      	lsls	r0, r3, #16
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6819      	ldr	r1, [r3, #0]
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	4302      	orrs	r2, r0
 8003dcc:	3340      	adds	r3, #64	; 0x40
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	460b      	mov	r3, r1
 8003dec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	887a      	ldrh	r2, [r7, #2]
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e267      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d075      	beq.n	8003f26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e3a:	4b88      	ldr	r3, [pc, #544]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d00c      	beq.n	8003e60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e46:	4b85      	ldr	r3, [pc, #532]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d112      	bne.n	8003e78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e52:	4b82      	ldr	r3, [pc, #520]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e5e:	d10b      	bne.n	8003e78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e60:	4b7e      	ldr	r3, [pc, #504]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d05b      	beq.n	8003f24 <HAL_RCC_OscConfig+0x108>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d157      	bne.n	8003f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e242      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e80:	d106      	bne.n	8003e90 <HAL_RCC_OscConfig+0x74>
 8003e82:	4b76      	ldr	r3, [pc, #472]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a75      	ldr	r2, [pc, #468]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	e01d      	b.n	8003ecc <HAL_RCC_OscConfig+0xb0>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e98:	d10c      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x98>
 8003e9a:	4b70      	ldr	r3, [pc, #448]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a6f      	ldr	r2, [pc, #444]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	4b6d      	ldr	r3, [pc, #436]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a6c      	ldr	r2, [pc, #432]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	e00b      	b.n	8003ecc <HAL_RCC_OscConfig+0xb0>
 8003eb4:	4b69      	ldr	r3, [pc, #420]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a68      	ldr	r2, [pc, #416]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	4b66      	ldr	r3, [pc, #408]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a65      	ldr	r2, [pc, #404]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d013      	beq.n	8003efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed4:	f7fd f9c2 	bl	800125c <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003edc:	f7fd f9be 	bl	800125c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b64      	cmp	r3, #100	; 0x64
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e207      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eee:	4b5b      	ldr	r3, [pc, #364]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0xc0>
 8003efa:	e014      	b.n	8003f26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efc:	f7fd f9ae 	bl	800125c <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f04:	f7fd f9aa 	bl	800125c <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	; 0x64
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e1f3      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f16:	4b51      	ldr	r3, [pc, #324]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0xe8>
 8003f22:	e000      	b.n	8003f26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d063      	beq.n	8003ffa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f32:	4b4a      	ldr	r3, [pc, #296]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 030c 	and.w	r3, r3, #12
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00b      	beq.n	8003f56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f3e:	4b47      	ldr	r3, [pc, #284]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d11c      	bne.n	8003f84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f4a:	4b44      	ldr	r3, [pc, #272]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d116      	bne.n	8003f84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f56:	4b41      	ldr	r3, [pc, #260]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d005      	beq.n	8003f6e <HAL_RCC_OscConfig+0x152>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d001      	beq.n	8003f6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e1c7      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6e:	4b3b      	ldr	r3, [pc, #236]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	4937      	ldr	r1, [pc, #220]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f82:	e03a      	b.n	8003ffa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d020      	beq.n	8003fce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f8c:	4b34      	ldr	r3, [pc, #208]	; (8004060 <HAL_RCC_OscConfig+0x244>)
 8003f8e:	2201      	movs	r2, #1
 8003f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f92:	f7fd f963 	bl	800125c <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f9a:	f7fd f95f 	bl	800125c <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e1a8      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fac:	4b2b      	ldr	r3, [pc, #172]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0f0      	beq.n	8003f9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb8:	4b28      	ldr	r3, [pc, #160]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	4925      	ldr	r1, [pc, #148]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	600b      	str	r3, [r1, #0]
 8003fcc:	e015      	b.n	8003ffa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fce:	4b24      	ldr	r3, [pc, #144]	; (8004060 <HAL_RCC_OscConfig+0x244>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fd f942 	bl	800125c <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fdc:	f7fd f93e 	bl	800125c <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e187      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fee:	4b1b      	ldr	r3, [pc, #108]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d036      	beq.n	8004074 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d016      	beq.n	800403c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800400e:	4b15      	ldr	r3, [pc, #84]	; (8004064 <HAL_RCC_OscConfig+0x248>)
 8004010:	2201      	movs	r2, #1
 8004012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004014:	f7fd f922 	bl	800125c <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800401c:	f7fd f91e 	bl	800125c <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e167      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800402e:	4b0b      	ldr	r3, [pc, #44]	; (800405c <HAL_RCC_OscConfig+0x240>)
 8004030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0f0      	beq.n	800401c <HAL_RCC_OscConfig+0x200>
 800403a:	e01b      	b.n	8004074 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800403c:	4b09      	ldr	r3, [pc, #36]	; (8004064 <HAL_RCC_OscConfig+0x248>)
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004042:	f7fd f90b 	bl	800125c <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004048:	e00e      	b.n	8004068 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800404a:	f7fd f907 	bl	800125c <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d907      	bls.n	8004068 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e150      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
 800405c:	40023800 	.word	0x40023800
 8004060:	42470000 	.word	0x42470000
 8004064:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004068:	4b88      	ldr	r3, [pc, #544]	; (800428c <HAL_RCC_OscConfig+0x470>)
 800406a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1ea      	bne.n	800404a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 8097 	beq.w	80041b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004082:	2300      	movs	r3, #0
 8004084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004086:	4b81      	ldr	r3, [pc, #516]	; (800428c <HAL_RCC_OscConfig+0x470>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10f      	bne.n	80040b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004092:	2300      	movs	r3, #0
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	4b7d      	ldr	r3, [pc, #500]	; (800428c <HAL_RCC_OscConfig+0x470>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	4a7c      	ldr	r2, [pc, #496]	; (800428c <HAL_RCC_OscConfig+0x470>)
 800409c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a0:	6413      	str	r3, [r2, #64]	; 0x40
 80040a2:	4b7a      	ldr	r3, [pc, #488]	; (800428c <HAL_RCC_OscConfig+0x470>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ae:	2301      	movs	r3, #1
 80040b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b2:	4b77      	ldr	r3, [pc, #476]	; (8004290 <HAL_RCC_OscConfig+0x474>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d118      	bne.n	80040f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040be:	4b74      	ldr	r3, [pc, #464]	; (8004290 <HAL_RCC_OscConfig+0x474>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a73      	ldr	r2, [pc, #460]	; (8004290 <HAL_RCC_OscConfig+0x474>)
 80040c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ca:	f7fd f8c7 	bl	800125c <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d2:	f7fd f8c3 	bl	800125c <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e10c      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e4:	4b6a      	ldr	r3, [pc, #424]	; (8004290 <HAL_RCC_OscConfig+0x474>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0f0      	beq.n	80040d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d106      	bne.n	8004106 <HAL_RCC_OscConfig+0x2ea>
 80040f8:	4b64      	ldr	r3, [pc, #400]	; (800428c <HAL_RCC_OscConfig+0x470>)
 80040fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fc:	4a63      	ldr	r2, [pc, #396]	; (800428c <HAL_RCC_OscConfig+0x470>)
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	6713      	str	r3, [r2, #112]	; 0x70
 8004104:	e01c      	b.n	8004140 <HAL_RCC_OscConfig+0x324>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	2b05      	cmp	r3, #5
 800410c:	d10c      	bne.n	8004128 <HAL_RCC_OscConfig+0x30c>
 800410e:	4b5f      	ldr	r3, [pc, #380]	; (800428c <HAL_RCC_OscConfig+0x470>)
 8004110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004112:	4a5e      	ldr	r2, [pc, #376]	; (800428c <HAL_RCC_OscConfig+0x470>)
 8004114:	f043 0304 	orr.w	r3, r3, #4
 8004118:	6713      	str	r3, [r2, #112]	; 0x70
 800411a:	4b5c      	ldr	r3, [pc, #368]	; (800428c <HAL_RCC_OscConfig+0x470>)
 800411c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411e:	4a5b      	ldr	r2, [pc, #364]	; (800428c <HAL_RCC_OscConfig+0x470>)
 8004120:	f043 0301 	orr.w	r3, r3, #1
 8004124:	6713      	str	r3, [r2, #112]	; 0x70
 8004126:	e00b      	b.n	8004140 <HAL_RCC_OscConfig+0x324>
 8004128:	4b58      	ldr	r3, [pc, #352]	; (800428c <HAL_RCC_OscConfig+0x470>)
 800412a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412c:	4a57      	ldr	r2, [pc, #348]	; (800428c <HAL_RCC_OscConfig+0x470>)
 800412e:	f023 0301 	bic.w	r3, r3, #1
 8004132:	6713      	str	r3, [r2, #112]	; 0x70
 8004134:	4b55      	ldr	r3, [pc, #340]	; (800428c <HAL_RCC_OscConfig+0x470>)
 8004136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004138:	4a54      	ldr	r2, [pc, #336]	; (800428c <HAL_RCC_OscConfig+0x470>)
 800413a:	f023 0304 	bic.w	r3, r3, #4
 800413e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d015      	beq.n	8004174 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004148:	f7fd f888 	bl	800125c <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800414e:	e00a      	b.n	8004166 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004150:	f7fd f884 	bl	800125c <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	f241 3288 	movw	r2, #5000	; 0x1388
 800415e:	4293      	cmp	r3, r2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e0cb      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004166:	4b49      	ldr	r3, [pc, #292]	; (800428c <HAL_RCC_OscConfig+0x470>)
 8004168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0ee      	beq.n	8004150 <HAL_RCC_OscConfig+0x334>
 8004172:	e014      	b.n	800419e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004174:	f7fd f872 	bl	800125c <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800417a:	e00a      	b.n	8004192 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800417c:	f7fd f86e 	bl	800125c <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	f241 3288 	movw	r2, #5000	; 0x1388
 800418a:	4293      	cmp	r3, r2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e0b5      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004192:	4b3e      	ldr	r3, [pc, #248]	; (800428c <HAL_RCC_OscConfig+0x470>)
 8004194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1ee      	bne.n	800417c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800419e:	7dfb      	ldrb	r3, [r7, #23]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d105      	bne.n	80041b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041a4:	4b39      	ldr	r3, [pc, #228]	; (800428c <HAL_RCC_OscConfig+0x470>)
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	4a38      	ldr	r2, [pc, #224]	; (800428c <HAL_RCC_OscConfig+0x470>)
 80041aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 80a1 	beq.w	80042fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041ba:	4b34      	ldr	r3, [pc, #208]	; (800428c <HAL_RCC_OscConfig+0x470>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d05c      	beq.n	8004280 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d141      	bne.n	8004252 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ce:	4b31      	ldr	r3, [pc, #196]	; (8004294 <HAL_RCC_OscConfig+0x478>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fd f842 	bl	800125c <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041dc:	f7fd f83e 	bl	800125c <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e087      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ee:	4b27      	ldr	r3, [pc, #156]	; (800428c <HAL_RCC_OscConfig+0x470>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f0      	bne.n	80041dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69da      	ldr	r2, [r3, #28]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	019b      	lsls	r3, r3, #6
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004210:	085b      	lsrs	r3, r3, #1
 8004212:	3b01      	subs	r3, #1
 8004214:	041b      	lsls	r3, r3, #16
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	061b      	lsls	r3, r3, #24
 800421e:	491b      	ldr	r1, [pc, #108]	; (800428c <HAL_RCC_OscConfig+0x470>)
 8004220:	4313      	orrs	r3, r2
 8004222:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004224:	4b1b      	ldr	r3, [pc, #108]	; (8004294 <HAL_RCC_OscConfig+0x478>)
 8004226:	2201      	movs	r2, #1
 8004228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422a:	f7fd f817 	bl	800125c <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004232:	f7fd f813 	bl	800125c <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e05c      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004244:	4b11      	ldr	r3, [pc, #68]	; (800428c <HAL_RCC_OscConfig+0x470>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0f0      	beq.n	8004232 <HAL_RCC_OscConfig+0x416>
 8004250:	e054      	b.n	80042fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004252:	4b10      	ldr	r3, [pc, #64]	; (8004294 <HAL_RCC_OscConfig+0x478>)
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004258:	f7fd f800 	bl	800125c <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004260:	f7fc fffc 	bl	800125c <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e045      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004272:	4b06      	ldr	r3, [pc, #24]	; (800428c <HAL_RCC_OscConfig+0x470>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x444>
 800427e:	e03d      	b.n	80042fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d107      	bne.n	8004298 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e038      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
 800428c:	40023800 	.word	0x40023800
 8004290:	40007000 	.word	0x40007000
 8004294:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004298:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <HAL_RCC_OscConfig+0x4ec>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d028      	beq.n	80042f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d121      	bne.n	80042f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042be:	429a      	cmp	r2, r3
 80042c0:	d11a      	bne.n	80042f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042c8:	4013      	ands	r3, r2
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d111      	bne.n	80042f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	085b      	lsrs	r3, r3, #1
 80042e0:	3b01      	subs	r3, #1
 80042e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d107      	bne.n	80042f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40023800 	.word	0x40023800

0800430c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0cc      	b.n	80044ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004320:	4b68      	ldr	r3, [pc, #416]	; (80044c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d90c      	bls.n	8004348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432e:	4b65      	ldr	r3, [pc, #404]	; (80044c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004336:	4b63      	ldr	r3, [pc, #396]	; (80044c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d001      	beq.n	8004348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e0b8      	b.n	80044ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d020      	beq.n	8004396 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004360:	4b59      	ldr	r3, [pc, #356]	; (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	4a58      	ldr	r2, [pc, #352]	; (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800436a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004378:	4b53      	ldr	r3, [pc, #332]	; (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	4a52      	ldr	r2, [pc, #328]	; (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 800437e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004382:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004384:	4b50      	ldr	r3, [pc, #320]	; (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	494d      	ldr	r1, [pc, #308]	; (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	4313      	orrs	r3, r2
 8004394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d044      	beq.n	800442c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d107      	bne.n	80043ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043aa:	4b47      	ldr	r3, [pc, #284]	; (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d119      	bne.n	80043ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e07f      	b.n	80044ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d003      	beq.n	80043ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043c6:	2b03      	cmp	r3, #3
 80043c8:	d107      	bne.n	80043da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ca:	4b3f      	ldr	r3, [pc, #252]	; (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d109      	bne.n	80043ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e06f      	b.n	80044ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043da:	4b3b      	ldr	r3, [pc, #236]	; (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e067      	b.n	80044ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ea:	4b37      	ldr	r3, [pc, #220]	; (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f023 0203 	bic.w	r2, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	4934      	ldr	r1, [pc, #208]	; (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043fc:	f7fc ff2e 	bl	800125c <HAL_GetTick>
 8004400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004402:	e00a      	b.n	800441a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004404:	f7fc ff2a 	bl	800125c <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e04f      	b.n	80044ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441a:	4b2b      	ldr	r3, [pc, #172]	; (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 020c 	and.w	r2, r3, #12
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	429a      	cmp	r2, r3
 800442a:	d1eb      	bne.n	8004404 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800442c:	4b25      	ldr	r3, [pc, #148]	; (80044c4 <HAL_RCC_ClockConfig+0x1b8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d20c      	bcs.n	8004454 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443a:	4b22      	ldr	r3, [pc, #136]	; (80044c4 <HAL_RCC_ClockConfig+0x1b8>)
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004442:	4b20      	ldr	r3, [pc, #128]	; (80044c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d001      	beq.n	8004454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e032      	b.n	80044ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004460:	4b19      	ldr	r3, [pc, #100]	; (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	4916      	ldr	r1, [pc, #88]	; (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	4313      	orrs	r3, r2
 8004470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800447e:	4b12      	ldr	r3, [pc, #72]	; (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	490e      	ldr	r1, [pc, #56]	; (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	4313      	orrs	r3, r2
 8004490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004492:	f000 f821 	bl	80044d8 <HAL_RCC_GetSysClockFreq>
 8004496:	4602      	mov	r2, r0
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	091b      	lsrs	r3, r3, #4
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	490a      	ldr	r1, [pc, #40]	; (80044cc <HAL_RCC_ClockConfig+0x1c0>)
 80044a4:	5ccb      	ldrb	r3, [r1, r3]
 80044a6:	fa22 f303 	lsr.w	r3, r2, r3
 80044aa:	4a09      	ldr	r2, [pc, #36]	; (80044d0 <HAL_RCC_ClockConfig+0x1c4>)
 80044ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044ae:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <HAL_RCC_ClockConfig+0x1c8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fc fe8e 	bl	80011d4 <HAL_InitTick>

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40023c00 	.word	0x40023c00
 80044c8:	40023800 	.word	0x40023800
 80044cc:	0800aeec 	.word	0x0800aeec
 80044d0:	20000004 	.word	0x20000004
 80044d4:	20000008 	.word	0x20000008

080044d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044dc:	b090      	sub	sp, #64	; 0x40
 80044de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	637b      	str	r3, [r7, #52]	; 0x34
 80044e4:	2300      	movs	r3, #0
 80044e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044e8:	2300      	movs	r3, #0
 80044ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044f0:	4b59      	ldr	r3, [pc, #356]	; (8004658 <HAL_RCC_GetSysClockFreq+0x180>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 030c 	and.w	r3, r3, #12
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d00d      	beq.n	8004518 <HAL_RCC_GetSysClockFreq+0x40>
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	f200 80a1 	bhi.w	8004644 <HAL_RCC_GetSysClockFreq+0x16c>
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <HAL_RCC_GetSysClockFreq+0x34>
 8004506:	2b04      	cmp	r3, #4
 8004508:	d003      	beq.n	8004512 <HAL_RCC_GetSysClockFreq+0x3a>
 800450a:	e09b      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800450c:	4b53      	ldr	r3, [pc, #332]	; (800465c <HAL_RCC_GetSysClockFreq+0x184>)
 800450e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004510:	e09b      	b.n	800464a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004512:	4b53      	ldr	r3, [pc, #332]	; (8004660 <HAL_RCC_GetSysClockFreq+0x188>)
 8004514:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004516:	e098      	b.n	800464a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004518:	4b4f      	ldr	r3, [pc, #316]	; (8004658 <HAL_RCC_GetSysClockFreq+0x180>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004520:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004522:	4b4d      	ldr	r3, [pc, #308]	; (8004658 <HAL_RCC_GetSysClockFreq+0x180>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d028      	beq.n	8004580 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800452e:	4b4a      	ldr	r3, [pc, #296]	; (8004658 <HAL_RCC_GetSysClockFreq+0x180>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	099b      	lsrs	r3, r3, #6
 8004534:	2200      	movs	r2, #0
 8004536:	623b      	str	r3, [r7, #32]
 8004538:	627a      	str	r2, [r7, #36]	; 0x24
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004540:	2100      	movs	r1, #0
 8004542:	4b47      	ldr	r3, [pc, #284]	; (8004660 <HAL_RCC_GetSysClockFreq+0x188>)
 8004544:	fb03 f201 	mul.w	r2, r3, r1
 8004548:	2300      	movs	r3, #0
 800454a:	fb00 f303 	mul.w	r3, r0, r3
 800454e:	4413      	add	r3, r2
 8004550:	4a43      	ldr	r2, [pc, #268]	; (8004660 <HAL_RCC_GetSysClockFreq+0x188>)
 8004552:	fba0 1202 	umull	r1, r2, r0, r2
 8004556:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004558:	460a      	mov	r2, r1
 800455a:	62ba      	str	r2, [r7, #40]	; 0x28
 800455c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800455e:	4413      	add	r3, r2
 8004560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004564:	2200      	movs	r2, #0
 8004566:	61bb      	str	r3, [r7, #24]
 8004568:	61fa      	str	r2, [r7, #28]
 800456a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800456e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004572:	f7fb fe8d 	bl	8000290 <__aeabi_uldivmod>
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	4613      	mov	r3, r2
 800457c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800457e:	e053      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004580:	4b35      	ldr	r3, [pc, #212]	; (8004658 <HAL_RCC_GetSysClockFreq+0x180>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	099b      	lsrs	r3, r3, #6
 8004586:	2200      	movs	r2, #0
 8004588:	613b      	str	r3, [r7, #16]
 800458a:	617a      	str	r2, [r7, #20]
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004592:	f04f 0b00 	mov.w	fp, #0
 8004596:	4652      	mov	r2, sl
 8004598:	465b      	mov	r3, fp
 800459a:	f04f 0000 	mov.w	r0, #0
 800459e:	f04f 0100 	mov.w	r1, #0
 80045a2:	0159      	lsls	r1, r3, #5
 80045a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045a8:	0150      	lsls	r0, r2, #5
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	ebb2 080a 	subs.w	r8, r2, sl
 80045b2:	eb63 090b 	sbc.w	r9, r3, fp
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80045c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80045c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80045ca:	ebb2 0408 	subs.w	r4, r2, r8
 80045ce:	eb63 0509 	sbc.w	r5, r3, r9
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	00eb      	lsls	r3, r5, #3
 80045dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045e0:	00e2      	lsls	r2, r4, #3
 80045e2:	4614      	mov	r4, r2
 80045e4:	461d      	mov	r5, r3
 80045e6:	eb14 030a 	adds.w	r3, r4, sl
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	eb45 030b 	adc.w	r3, r5, fp
 80045f0:	607b      	str	r3, [r7, #4]
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045fe:	4629      	mov	r1, r5
 8004600:	028b      	lsls	r3, r1, #10
 8004602:	4621      	mov	r1, r4
 8004604:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004608:	4621      	mov	r1, r4
 800460a:	028a      	lsls	r2, r1, #10
 800460c:	4610      	mov	r0, r2
 800460e:	4619      	mov	r1, r3
 8004610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004612:	2200      	movs	r2, #0
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	60fa      	str	r2, [r7, #12]
 8004618:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800461c:	f7fb fe38 	bl	8000290 <__aeabi_uldivmod>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4613      	mov	r3, r2
 8004626:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004628:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <HAL_RCC_GetSysClockFreq+0x180>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	0c1b      	lsrs	r3, r3, #16
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	3301      	adds	r3, #1
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004638:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800463a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004640:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004642:	e002      	b.n	800464a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <HAL_RCC_GetSysClockFreq+0x184>)
 8004646:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800464a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800464c:	4618      	mov	r0, r3
 800464e:	3740      	adds	r7, #64	; 0x40
 8004650:	46bd      	mov	sp, r7
 8004652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004656:	bf00      	nop
 8004658:	40023800 	.word	0x40023800
 800465c:	00f42400 	.word	0x00f42400
 8004660:	017d7840 	.word	0x017d7840

08004664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004668:	4b03      	ldr	r3, [pc, #12]	; (8004678 <HAL_RCC_GetHCLKFreq+0x14>)
 800466a:	681b      	ldr	r3, [r3, #0]
}
 800466c:	4618      	mov	r0, r3
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	20000004 	.word	0x20000004

0800467c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004680:	f7ff fff0 	bl	8004664 <HAL_RCC_GetHCLKFreq>
 8004684:	4602      	mov	r2, r0
 8004686:	4b05      	ldr	r3, [pc, #20]	; (800469c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	0a9b      	lsrs	r3, r3, #10
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	4903      	ldr	r1, [pc, #12]	; (80046a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004692:	5ccb      	ldrb	r3, [r1, r3]
 8004694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004698:	4618      	mov	r0, r3
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40023800 	.word	0x40023800
 80046a0:	0800aefc 	.word	0x0800aefc

080046a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046a8:	f7ff ffdc 	bl	8004664 <HAL_RCC_GetHCLKFreq>
 80046ac:	4602      	mov	r2, r0
 80046ae:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	0b5b      	lsrs	r3, r3, #13
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	4903      	ldr	r1, [pc, #12]	; (80046c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ba:	5ccb      	ldrb	r3, [r1, r3]
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40023800 	.word	0x40023800
 80046c8:	0800aefc 	.word	0x0800aefc

080046cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d105      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d038      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046f4:	4b68      	ldr	r3, [pc, #416]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046fa:	f7fc fdaf 	bl	800125c <HAL_GetTick>
 80046fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004700:	e008      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004702:	f7fc fdab 	bl	800125c <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e0bd      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004714:	4b61      	ldr	r3, [pc, #388]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1f0      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	019b      	lsls	r3, r3, #6
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	071b      	lsls	r3, r3, #28
 8004732:	495a      	ldr	r1, [pc, #360]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800473a:	4b57      	ldr	r3, [pc, #348]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800473c:	2201      	movs	r2, #1
 800473e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004740:	f7fc fd8c 	bl	800125c <HAL_GetTick>
 8004744:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004746:	e008      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004748:	f7fc fd88 	bl	800125c <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e09a      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800475a:	4b50      	ldr	r3, [pc, #320]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0f0      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 8083 	beq.w	800487a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	4b48      	ldr	r3, [pc, #288]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	4a47      	ldr	r2, [pc, #284]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004782:	6413      	str	r3, [r2, #64]	; 0x40
 8004784:	4b45      	ldr	r3, [pc, #276]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004790:	4b43      	ldr	r3, [pc, #268]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a42      	ldr	r2, [pc, #264]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800479a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800479c:	f7fc fd5e 	bl	800125c <HAL_GetTick>
 80047a0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047a4:	f7fc fd5a 	bl	800125c <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e06c      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047b6:	4b3a      	ldr	r3, [pc, #232]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f0      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047c2:	4b36      	ldr	r3, [pc, #216]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ca:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d02f      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d028      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047e0:	4b2e      	ldr	r3, [pc, #184]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047ea:	4b2e      	ldr	r3, [pc, #184]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047f0:	4b2c      	ldr	r3, [pc, #176]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80047f6:	4a29      	ldr	r2, [pc, #164]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047fc:	4b27      	ldr	r3, [pc, #156]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b01      	cmp	r3, #1
 8004806:	d114      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004808:	f7fc fd28 	bl	800125c <HAL_GetTick>
 800480c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480e:	e00a      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004810:	f7fc fd24 	bl	800125c <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f241 3288 	movw	r2, #5000	; 0x1388
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e034      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004826:	4b1d      	ldr	r3, [pc, #116]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0ee      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800483e:	d10d      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004840:	4b16      	ldr	r3, [pc, #88]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004854:	4911      	ldr	r1, [pc, #68]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004856:	4313      	orrs	r3, r2
 8004858:	608b      	str	r3, [r1, #8]
 800485a:	e005      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800485c:	4b0f      	ldr	r3, [pc, #60]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	4a0e      	ldr	r2, [pc, #56]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004862:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004866:	6093      	str	r3, [r2, #8]
 8004868:	4b0c      	ldr	r3, [pc, #48]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800486a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004874:	4909      	ldr	r1, [pc, #36]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004876:	4313      	orrs	r3, r2
 8004878:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	7d1a      	ldrb	r2, [r3, #20]
 800488a:	4b07      	ldr	r3, [pc, #28]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800488c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	42470068 	.word	0x42470068
 800489c:	40023800 	.word	0x40023800
 80048a0:	40007000 	.word	0x40007000
 80048a4:	42470e40 	.word	0x42470e40
 80048a8:	424711e0 	.word	0x424711e0

080048ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e066      	b.n	8004990 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	7f5b      	ldrb	r3, [r3, #29]
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d105      	bne.n	80048d8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fc faf6 	bl	8000ec4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	22ca      	movs	r2, #202	; 0xca
 80048e4:	625a      	str	r2, [r3, #36]	; 0x24
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2253      	movs	r2, #83	; 0x53
 80048ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f87a 	bl	80049e8 <RTC_EnterInitMode>
 80048f4:	4603      	mov	r3, r0
 80048f6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d12c      	bne.n	8004958 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6812      	ldr	r2, [r2, #0]
 8004908:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800490c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004910:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6899      	ldr	r1, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	68d2      	ldr	r2, [r2, #12]
 8004938:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6919      	ldr	r1, [r3, #16]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	041a      	lsls	r2, r3, #16
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f881 	bl	8004a56 <RTC_ExitInitMode>
 8004954:	4603      	mov	r3, r0
 8004956:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d113      	bne.n	8004986 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800496c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699a      	ldr	r2, [r3, #24]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	22ff      	movs	r2, #255	; 0xff
 800498c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800498e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049b2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049b4:	f7fc fc52 	bl	800125c <HAL_GetTick>
 80049b8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80049ba:	e009      	b.n	80049d0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049bc:	f7fc fc4e 	bl	800125c <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ca:	d901      	bls.n	80049d0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e007      	b.n	80049e0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f003 0320 	and.w	r3, r3, #32
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0ee      	beq.n	80049bc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d122      	bne.n	8004a4c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a14:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a16:	f7fc fc21 	bl	800125c <HAL_GetTick>
 8004a1a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004a1c:	e00c      	b.n	8004a38 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a1e:	f7fc fc1d 	bl	800125c <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a2c:	d904      	bls.n	8004a38 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2204      	movs	r2, #4
 8004a32:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d102      	bne.n	8004a4c <RTC_EnterInitMode+0x64>
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d1e8      	bne.n	8004a1e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b084      	sub	sp, #16
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a70:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 0320 	and.w	r3, r3, #32
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10a      	bne.n	8004a96 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff ff89 	bl	8004998 <HAL_RTC_WaitForSynchro>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d004      	beq.n	8004a96 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2204      	movs	r2, #4
 8004a90:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e041      	b.n	8004b36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fc fa28 	bl	8000f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3304      	adds	r3, #4
 8004adc:	4619      	mov	r1, r3
 8004ade:	4610      	mov	r0, r2
 8004ae0:	f000 fa88 	bl	8004ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d001      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e044      	b.n	8004be2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0201 	orr.w	r2, r2, #1
 8004b6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1e      	ldr	r2, [pc, #120]	; (8004bf0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d018      	beq.n	8004bac <HAL_TIM_Base_Start_IT+0x6c>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b82:	d013      	beq.n	8004bac <HAL_TIM_Base_Start_IT+0x6c>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1a      	ldr	r2, [pc, #104]	; (8004bf4 <HAL_TIM_Base_Start_IT+0xb4>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00e      	beq.n	8004bac <HAL_TIM_Base_Start_IT+0x6c>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a19      	ldr	r2, [pc, #100]	; (8004bf8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d009      	beq.n	8004bac <HAL_TIM_Base_Start_IT+0x6c>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <HAL_TIM_Base_Start_IT+0xbc>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d004      	beq.n	8004bac <HAL_TIM_Base_Start_IT+0x6c>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a16      	ldr	r2, [pc, #88]	; (8004c00 <HAL_TIM_Base_Start_IT+0xc0>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d111      	bne.n	8004bd0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b06      	cmp	r3, #6
 8004bbc:	d010      	beq.n	8004be0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0201 	orr.w	r2, r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bce:	e007      	b.n	8004be0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40010000 	.word	0x40010000
 8004bf4:	40000400 	.word	0x40000400
 8004bf8:	40000800 	.word	0x40000800
 8004bfc:	40000c00 	.word	0x40000c00
 8004c00:	40014000 	.word	0x40014000

08004c04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d122      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d11b      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0202 	mvn.w	r2, #2
 8004c30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f9b5 	bl	8004fb6 <HAL_TIM_IC_CaptureCallback>
 8004c4c:	e005      	b.n	8004c5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f9a7 	bl	8004fa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f9b8 	bl	8004fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d122      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d11b      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0204 	mvn.w	r2, #4
 8004c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f98b 	bl	8004fb6 <HAL_TIM_IC_CaptureCallback>
 8004ca0:	e005      	b.n	8004cae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f97d 	bl	8004fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f98e 	bl	8004fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d122      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f003 0308 	and.w	r3, r3, #8
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d11b      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0208 	mvn.w	r2, #8
 8004cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2204      	movs	r2, #4
 8004cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f961 	bl	8004fb6 <HAL_TIM_IC_CaptureCallback>
 8004cf4:	e005      	b.n	8004d02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f953 	bl	8004fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f964 	bl	8004fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	2b10      	cmp	r3, #16
 8004d14:	d122      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	2b10      	cmp	r3, #16
 8004d22:	d11b      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f06f 0210 	mvn.w	r2, #16
 8004d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2208      	movs	r2, #8
 8004d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f937 	bl	8004fb6 <HAL_TIM_IC_CaptureCallback>
 8004d48:	e005      	b.n	8004d56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f929 	bl	8004fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f93a 	bl	8004fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d10e      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d107      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f06f 0201 	mvn.w	r2, #1
 8004d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fb ff4e 	bl	8000c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d92:	2b80      	cmp	r3, #128	; 0x80
 8004d94:	d10e      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da0:	2b80      	cmp	r3, #128	; 0x80
 8004da2:	d107      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fab2 	bl	8005318 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dbe:	2b40      	cmp	r3, #64	; 0x40
 8004dc0:	d10e      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dcc:	2b40      	cmp	r3, #64	; 0x40
 8004dce:	d107      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f8ff 	bl	8004fde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d10e      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f003 0320 	and.w	r3, r3, #32
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d107      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0220 	mvn.w	r2, #32
 8004e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fa7c 	bl	8005304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e0c:	bf00      	nop
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_TIM_ConfigClockSource+0x1c>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e0b4      	b.n	8004f9a <HAL_TIM_ConfigClockSource+0x186>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e68:	d03e      	beq.n	8004ee8 <HAL_TIM_ConfigClockSource+0xd4>
 8004e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e6e:	f200 8087 	bhi.w	8004f80 <HAL_TIM_ConfigClockSource+0x16c>
 8004e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e76:	f000 8086 	beq.w	8004f86 <HAL_TIM_ConfigClockSource+0x172>
 8004e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e7e:	d87f      	bhi.n	8004f80 <HAL_TIM_ConfigClockSource+0x16c>
 8004e80:	2b70      	cmp	r3, #112	; 0x70
 8004e82:	d01a      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0xa6>
 8004e84:	2b70      	cmp	r3, #112	; 0x70
 8004e86:	d87b      	bhi.n	8004f80 <HAL_TIM_ConfigClockSource+0x16c>
 8004e88:	2b60      	cmp	r3, #96	; 0x60
 8004e8a:	d050      	beq.n	8004f2e <HAL_TIM_ConfigClockSource+0x11a>
 8004e8c:	2b60      	cmp	r3, #96	; 0x60
 8004e8e:	d877      	bhi.n	8004f80 <HAL_TIM_ConfigClockSource+0x16c>
 8004e90:	2b50      	cmp	r3, #80	; 0x50
 8004e92:	d03c      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0xfa>
 8004e94:	2b50      	cmp	r3, #80	; 0x50
 8004e96:	d873      	bhi.n	8004f80 <HAL_TIM_ConfigClockSource+0x16c>
 8004e98:	2b40      	cmp	r3, #64	; 0x40
 8004e9a:	d058      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0x13a>
 8004e9c:	2b40      	cmp	r3, #64	; 0x40
 8004e9e:	d86f      	bhi.n	8004f80 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea0:	2b30      	cmp	r3, #48	; 0x30
 8004ea2:	d064      	beq.n	8004f6e <HAL_TIM_ConfigClockSource+0x15a>
 8004ea4:	2b30      	cmp	r3, #48	; 0x30
 8004ea6:	d86b      	bhi.n	8004f80 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	d060      	beq.n	8004f6e <HAL_TIM_ConfigClockSource+0x15a>
 8004eac:	2b20      	cmp	r3, #32
 8004eae:	d867      	bhi.n	8004f80 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d05c      	beq.n	8004f6e <HAL_TIM_ConfigClockSource+0x15a>
 8004eb4:	2b10      	cmp	r3, #16
 8004eb6:	d05a      	beq.n	8004f6e <HAL_TIM_ConfigClockSource+0x15a>
 8004eb8:	e062      	b.n	8004f80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6899      	ldr	r1, [r3, #8]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f000 f98d 	bl	80051e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004edc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	609a      	str	r2, [r3, #8]
      break;
 8004ee6:	e04f      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	6899      	ldr	r1, [r3, #8]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f000 f976 	bl	80051e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f0a:	609a      	str	r2, [r3, #8]
      break;
 8004f0c:	e03c      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	6859      	ldr	r1, [r3, #4]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	f000 f8ea 	bl	80050f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2150      	movs	r1, #80	; 0x50
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 f943 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004f2c:	e02c      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	6859      	ldr	r1, [r3, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f000 f909 	bl	8005152 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2160      	movs	r1, #96	; 0x60
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 f933 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004f4c:	e01c      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6818      	ldr	r0, [r3, #0]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	6859      	ldr	r1, [r3, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f000 f8ca 	bl	80050f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2140      	movs	r1, #64	; 0x40
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 f923 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004f6c:	e00c      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4619      	mov	r1, r3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	f000 f91a 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004f7e:	e003      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	73fb      	strb	r3, [r7, #15]
      break;
 8004f84:	e000      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
	...

08004ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a34      	ldr	r2, [pc, #208]	; (80050d8 <TIM_Base_SetConfig+0xe4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00f      	beq.n	800502c <TIM_Base_SetConfig+0x38>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005012:	d00b      	beq.n	800502c <TIM_Base_SetConfig+0x38>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a31      	ldr	r2, [pc, #196]	; (80050dc <TIM_Base_SetConfig+0xe8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d007      	beq.n	800502c <TIM_Base_SetConfig+0x38>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a30      	ldr	r2, [pc, #192]	; (80050e0 <TIM_Base_SetConfig+0xec>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d003      	beq.n	800502c <TIM_Base_SetConfig+0x38>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a2f      	ldr	r2, [pc, #188]	; (80050e4 <TIM_Base_SetConfig+0xf0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d108      	bne.n	800503e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a25      	ldr	r2, [pc, #148]	; (80050d8 <TIM_Base_SetConfig+0xe4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d01b      	beq.n	800507e <TIM_Base_SetConfig+0x8a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504c:	d017      	beq.n	800507e <TIM_Base_SetConfig+0x8a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a22      	ldr	r2, [pc, #136]	; (80050dc <TIM_Base_SetConfig+0xe8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d013      	beq.n	800507e <TIM_Base_SetConfig+0x8a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a21      	ldr	r2, [pc, #132]	; (80050e0 <TIM_Base_SetConfig+0xec>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00f      	beq.n	800507e <TIM_Base_SetConfig+0x8a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a20      	ldr	r2, [pc, #128]	; (80050e4 <TIM_Base_SetConfig+0xf0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00b      	beq.n	800507e <TIM_Base_SetConfig+0x8a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a1f      	ldr	r2, [pc, #124]	; (80050e8 <TIM_Base_SetConfig+0xf4>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d007      	beq.n	800507e <TIM_Base_SetConfig+0x8a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a1e      	ldr	r2, [pc, #120]	; (80050ec <TIM_Base_SetConfig+0xf8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d003      	beq.n	800507e <TIM_Base_SetConfig+0x8a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a1d      	ldr	r2, [pc, #116]	; (80050f0 <TIM_Base_SetConfig+0xfc>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d108      	bne.n	8005090 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4313      	orrs	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a08      	ldr	r2, [pc, #32]	; (80050d8 <TIM_Base_SetConfig+0xe4>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d103      	bne.n	80050c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	691a      	ldr	r2, [r3, #16]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	615a      	str	r2, [r3, #20]
}
 80050ca:	bf00      	nop
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40010000 	.word	0x40010000
 80050dc:	40000400 	.word	0x40000400
 80050e0:	40000800 	.word	0x40000800
 80050e4:	40000c00 	.word	0x40000c00
 80050e8:	40014000 	.word	0x40014000
 80050ec:	40014400 	.word	0x40014400
 80050f0:	40014800 	.word	0x40014800

080050f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f023 0201 	bic.w	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800511e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f023 030a 	bic.w	r3, r3, #10
 8005130:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	621a      	str	r2, [r3, #32]
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005152:	b480      	push	{r7}
 8005154:	b087      	sub	sp, #28
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	f023 0210 	bic.w	r2, r3, #16
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800517c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	031b      	lsls	r3, r3, #12
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800518e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	621a      	str	r2, [r3, #32]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b085      	sub	sp, #20
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f043 0307 	orr.w	r3, r3, #7
 80051d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	609a      	str	r2, [r3, #8]
}
 80051dc:	bf00      	nop
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	021a      	lsls	r2, r3, #8
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	431a      	orrs	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4313      	orrs	r3, r2
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	609a      	str	r2, [r3, #8]
}
 800521c:	bf00      	nop
 800521e:	371c      	adds	r7, #28
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005238:	2b01      	cmp	r3, #1
 800523a:	d101      	bne.n	8005240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800523c:	2302      	movs	r3, #2
 800523e:	e050      	b.n	80052e2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005266:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1c      	ldr	r2, [pc, #112]	; (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d018      	beq.n	80052b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528c:	d013      	beq.n	80052b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a18      	ldr	r2, [pc, #96]	; (80052f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00e      	beq.n	80052b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a16      	ldr	r2, [pc, #88]	; (80052f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d009      	beq.n	80052b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a15      	ldr	r2, [pc, #84]	; (80052fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d004      	beq.n	80052b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a13      	ldr	r2, [pc, #76]	; (8005300 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d10c      	bne.n	80052d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	40010000 	.word	0x40010000
 80052f4:	40000400 	.word	0x40000400
 80052f8:	40000800 	.word	0x40000800
 80052fc:	40000c00 	.word	0x40000c00
 8005300:	40014000 	.word	0x40014000

08005304 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e03f      	b.n	80053be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d106      	bne.n	8005358 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7fb fe0a 	bl	8000f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2224      	movs	r2, #36	; 0x24
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800536e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fcdf 	bl	8005d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005384:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695a      	ldr	r2, [r3, #20]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005394:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2220      	movs	r2, #32
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b084      	sub	sp, #16
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	60f8      	str	r0, [r7, #12]
 80053ce:	60b9      	str	r1, [r7, #8]
 80053d0:	4613      	mov	r3, r2
 80053d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b20      	cmp	r3, #32
 80053de:	d11d      	bne.n	800541c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <HAL_UART_Receive_IT+0x26>
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e016      	b.n	800541e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d101      	bne.n	80053fe <HAL_UART_Receive_IT+0x38>
 80053fa:	2302      	movs	r3, #2
 80053fc:	e00f      	b.n	800541e <HAL_UART_Receive_IT+0x58>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	461a      	mov	r2, r3
 8005410:	68b9      	ldr	r1, [r7, #8]
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 fab6 	bl	8005984 <UART_Start_Receive_IT>
 8005418:	4603      	mov	r3, r0
 800541a:	e000      	b.n	800541e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800541c:	2302      	movs	r3, #2
  }
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b0ba      	sub	sp, #232	; 0xe8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800544e:	2300      	movs	r3, #0
 8005450:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005454:	2300      	movs	r3, #0
 8005456:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800545a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10f      	bne.n	800548e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800546e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005472:	f003 0320 	and.w	r3, r3, #32
 8005476:	2b00      	cmp	r3, #0
 8005478:	d009      	beq.n	800548e <HAL_UART_IRQHandler+0x66>
 800547a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fb99 	bl	8005bbe <UART_Receive_IT>
      return;
 800548c:	e256      	b.n	800593c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800548e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 80de 	beq.w	8005654 <HAL_UART_IRQHandler+0x22c>
 8005498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d106      	bne.n	80054b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 80d1 	beq.w	8005654 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00b      	beq.n	80054d6 <HAL_UART_IRQHandler+0xae>
 80054be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	f043 0201 	orr.w	r2, r3, #1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00b      	beq.n	80054fa <HAL_UART_IRQHandler+0xd2>
 80054e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d005      	beq.n	80054fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	f043 0202 	orr.w	r2, r3, #2
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00b      	beq.n	800551e <HAL_UART_IRQHandler+0xf6>
 8005506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f043 0204 	orr.w	r2, r3, #4
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800551e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d011      	beq.n	800554e <HAL_UART_IRQHandler+0x126>
 800552a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d105      	bne.n	8005542 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d005      	beq.n	800554e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	f043 0208 	orr.w	r2, r3, #8
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 81ed 	beq.w	8005932 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b00      	cmp	r3, #0
 8005562:	d008      	beq.n	8005576 <HAL_UART_IRQHandler+0x14e>
 8005564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005568:	f003 0320 	and.w	r3, r3, #32
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fb24 	bl	8005bbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005580:	2b40      	cmp	r3, #64	; 0x40
 8005582:	bf0c      	ite	eq
 8005584:	2301      	moveq	r3, #1
 8005586:	2300      	movne	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	2b00      	cmp	r3, #0
 8005598:	d103      	bne.n	80055a2 <HAL_UART_IRQHandler+0x17a>
 800559a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d04f      	beq.n	8005642 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fa2c 	bl	8005a00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b2:	2b40      	cmp	r3, #64	; 0x40
 80055b4:	d141      	bne.n	800563a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3314      	adds	r3, #20
 80055bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3314      	adds	r3, #20
 80055de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80055fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1d9      	bne.n	80055b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005606:	2b00      	cmp	r3, #0
 8005608:	d013      	beq.n	8005632 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	4a7d      	ldr	r2, [pc, #500]	; (8005804 <HAL_UART_IRQHandler+0x3dc>)
 8005610:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005616:	4618      	mov	r0, r3
 8005618:	f7fb ffd1 	bl	80015be <HAL_DMA_Abort_IT>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d016      	beq.n	8005650 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800562c:	4610      	mov	r0, r2
 800562e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005630:	e00e      	b.n	8005650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f990 	bl	8005958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005638:	e00a      	b.n	8005650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f98c 	bl	8005958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005640:	e006      	b.n	8005650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f988 	bl	8005958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800564e:	e170      	b.n	8005932 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005650:	bf00      	nop
    return;
 8005652:	e16e      	b.n	8005932 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	2b01      	cmp	r3, #1
 800565a:	f040 814a 	bne.w	80058f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005662:	f003 0310 	and.w	r3, r3, #16
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 8143 	beq.w	80058f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800566c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005670:	f003 0310 	and.w	r3, r3, #16
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 813c 	beq.w	80058f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800567a:	2300      	movs	r3, #0
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60bb      	str	r3, [r7, #8]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	60bb      	str	r3, [r7, #8]
 800568e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569a:	2b40      	cmp	r3, #64	; 0x40
 800569c:	f040 80b4 	bne.w	8005808 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 8140 	beq.w	8005936 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056be:	429a      	cmp	r2, r3
 80056c0:	f080 8139 	bcs.w	8005936 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d6:	f000 8088 	beq.w	80057ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	330c      	adds	r3, #12
 80056e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	330c      	adds	r3, #12
 8005702:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005706:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800570a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005712:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800571e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1d9      	bne.n	80056da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3314      	adds	r3, #20
 800572c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005736:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005738:	f023 0301 	bic.w	r3, r3, #1
 800573c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3314      	adds	r3, #20
 8005746:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800574a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800574e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005750:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005752:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800575c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1e1      	bne.n	8005726 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3314      	adds	r3, #20
 8005768:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3314      	adds	r3, #20
 8005782:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005786:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005788:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800578c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e3      	bne.n	8005762 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	330c      	adds	r3, #12
 80057ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ba:	f023 0310 	bic.w	r3, r3, #16
 80057be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	330c      	adds	r3, #12
 80057c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80057cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80057ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e3      	bne.n	80057a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fb fe7a 	bl	80014de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	4619      	mov	r1, r3
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f8b6 	bl	800596c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005800:	e099      	b.n	8005936 <HAL_UART_IRQHandler+0x50e>
 8005802:	bf00      	nop
 8005804:	08005ac7 	.word	0x08005ac7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005810:	b29b      	uxth	r3, r3
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 808b 	beq.w	800593a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8086 	beq.w	800593a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	330c      	adds	r3, #12
 8005834:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800583e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005840:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005844:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	330c      	adds	r3, #12
 800584e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005852:	647a      	str	r2, [r7, #68]	; 0x44
 8005854:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800585a:	e841 2300 	strex	r3, r2, [r1]
 800585e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1e3      	bne.n	800582e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3314      	adds	r3, #20
 800586c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	623b      	str	r3, [r7, #32]
   return(result);
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	f023 0301 	bic.w	r3, r3, #1
 800587c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3314      	adds	r3, #20
 8005886:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800588a:	633a      	str	r2, [r7, #48]	; 0x30
 800588c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005892:	e841 2300 	strex	r3, r2, [r1]
 8005896:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1e3      	bne.n	8005866 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2220      	movs	r2, #32
 80058a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	330c      	adds	r3, #12
 80058b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	e853 3f00 	ldrex	r3, [r3]
 80058ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0310 	bic.w	r3, r3, #16
 80058c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	330c      	adds	r3, #12
 80058cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80058d0:	61fa      	str	r2, [r7, #28]
 80058d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d4:	69b9      	ldr	r1, [r7, #24]
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	e841 2300 	strex	r3, r2, [r1]
 80058dc:	617b      	str	r3, [r7, #20]
   return(result);
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e3      	bne.n	80058ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058e8:	4619      	mov	r1, r3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f83e 	bl	800596c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058f0:	e023      	b.n	800593a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d009      	beq.n	8005912 <HAL_UART_IRQHandler+0x4ea>
 80058fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f8ef 	bl	8005aee <UART_Transmit_IT>
    return;
 8005910:	e014      	b.n	800593c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00e      	beq.n	800593c <HAL_UART_IRQHandler+0x514>
 800591e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d008      	beq.n	800593c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f92f 	bl	8005b8e <UART_EndTransmit_IT>
    return;
 8005930:	e004      	b.n	800593c <HAL_UART_IRQHandler+0x514>
    return;
 8005932:	bf00      	nop
 8005934:	e002      	b.n	800593c <HAL_UART_IRQHandler+0x514>
      return;
 8005936:	bf00      	nop
 8005938:	e000      	b.n	800593c <HAL_UART_IRQHandler+0x514>
      return;
 800593a:	bf00      	nop
  }
}
 800593c:	37e8      	adds	r7, #232	; 0xe8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop

08005944 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	460b      	mov	r3, r1
 8005976:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	4613      	mov	r3, r2
 8005990:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	88fa      	ldrh	r2, [r7, #6]
 800599c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	88fa      	ldrh	r2, [r7, #6]
 80059a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2222      	movs	r2, #34	; 0x22
 80059ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d007      	beq.n	80059d2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059d0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	695a      	ldr	r2, [r3, #20]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0201 	orr.w	r2, r2, #1
 80059e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0220 	orr.w	r2, r2, #32
 80059f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b095      	sub	sp, #84	; 0x54
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	330c      	adds	r3, #12
 8005a0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a12:	e853 3f00 	ldrex	r3, [r3]
 8005a16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	330c      	adds	r3, #12
 8005a26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a28:	643a      	str	r2, [r7, #64]	; 0x40
 8005a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a30:	e841 2300 	strex	r3, r2, [r1]
 8005a34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1e5      	bne.n	8005a08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3314      	adds	r3, #20
 8005a42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	e853 3f00 	ldrex	r3, [r3]
 8005a4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	f023 0301 	bic.w	r3, r3, #1
 8005a52:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3314      	adds	r3, #20
 8005a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a64:	e841 2300 	strex	r3, r2, [r1]
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e5      	bne.n	8005a3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d119      	bne.n	8005aac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	330c      	adds	r3, #12
 8005a7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	e853 3f00 	ldrex	r3, [r3]
 8005a86:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f023 0310 	bic.w	r3, r3, #16
 8005a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	330c      	adds	r3, #12
 8005a96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a98:	61ba      	str	r2, [r7, #24]
 8005a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9c:	6979      	ldr	r1, [r7, #20]
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	e841 2300 	strex	r3, r2, [r1]
 8005aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1e5      	bne.n	8005a78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005aba:	bf00      	nop
 8005abc:	3754      	adds	r7, #84	; 0x54
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f7ff ff39 	bl	8005958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ae6:	bf00      	nop
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b085      	sub	sp, #20
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b21      	cmp	r3, #33	; 0x21
 8005b00:	d13e      	bne.n	8005b80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0a:	d114      	bne.n	8005b36 <UART_Transmit_IT+0x48>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d110      	bne.n	8005b36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	1c9a      	adds	r2, r3, #2
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	621a      	str	r2, [r3, #32]
 8005b34:	e008      	b.n	8005b48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	1c59      	adds	r1, r3, #1
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6211      	str	r1, [r2, #32]
 8005b40:	781a      	ldrb	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	4619      	mov	r1, r3
 8005b56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10f      	bne.n	8005b7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68da      	ldr	r2, [r3, #12]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e000      	b.n	8005b82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b80:	2302      	movs	r3, #2
  }
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b082      	sub	sp, #8
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ba4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff fec8 	bl	8005944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b08c      	sub	sp, #48	; 0x30
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b22      	cmp	r3, #34	; 0x22
 8005bd0:	f040 80ab 	bne.w	8005d2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bdc:	d117      	bne.n	8005c0e <UART_Receive_IT+0x50>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d113      	bne.n	8005c0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c06:	1c9a      	adds	r2, r3, #2
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	629a      	str	r2, [r3, #40]	; 0x28
 8005c0c:	e026      	b.n	8005c5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005c14:	2300      	movs	r3, #0
 8005c16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c20:	d007      	beq.n	8005c32 <UART_Receive_IT+0x74>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10a      	bne.n	8005c40 <UART_Receive_IT+0x82>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d106      	bne.n	8005c40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3c:	701a      	strb	r2, [r3, #0]
 8005c3e:	e008      	b.n	8005c52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d15a      	bne.n	8005d26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0220 	bic.w	r2, r2, #32
 8005c7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695a      	ldr	r2, [r3, #20]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0201 	bic.w	r2, r2, #1
 8005c9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d135      	bne.n	8005d1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	330c      	adds	r3, #12
 8005cbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	e853 3f00 	ldrex	r3, [r3]
 8005cc4:	613b      	str	r3, [r7, #16]
   return(result);
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f023 0310 	bic.w	r3, r3, #16
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	330c      	adds	r3, #12
 8005cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd6:	623a      	str	r2, [r7, #32]
 8005cd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cda:	69f9      	ldr	r1, [r7, #28]
 8005cdc:	6a3a      	ldr	r2, [r7, #32]
 8005cde:	e841 2300 	strex	r3, r2, [r1]
 8005ce2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1e5      	bne.n	8005cb6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0310 	and.w	r3, r3, #16
 8005cf4:	2b10      	cmp	r3, #16
 8005cf6:	d10a      	bne.n	8005d0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d12:	4619      	mov	r1, r3
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff fe29 	bl	800596c <HAL_UARTEx_RxEventCallback>
 8005d1a:	e002      	b.n	8005d22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7fa ff91 	bl	8000c44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	e002      	b.n	8005d2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	e000      	b.n	8005d2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005d2a:	2302      	movs	r3, #2
  }
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3730      	adds	r7, #48	; 0x30
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d38:	b0c0      	sub	sp, #256	; 0x100
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d50:	68d9      	ldr	r1, [r3, #12]
 8005d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	ea40 0301 	orr.w	r3, r0, r1
 8005d5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d8c:	f021 010c 	bic.w	r1, r1, #12
 8005d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d9a:	430b      	orrs	r3, r1
 8005d9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dae:	6999      	ldr	r1, [r3, #24]
 8005db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	ea40 0301 	orr.w	r3, r0, r1
 8005dba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b8f      	ldr	r3, [pc, #572]	; (8006000 <UART_SetConfig+0x2cc>)
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d005      	beq.n	8005dd4 <UART_SetConfig+0xa0>
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	4b8d      	ldr	r3, [pc, #564]	; (8006004 <UART_SetConfig+0x2d0>)
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d104      	bne.n	8005dde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dd4:	f7fe fc66 	bl	80046a4 <HAL_RCC_GetPCLK2Freq>
 8005dd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ddc:	e003      	b.n	8005de6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dde:	f7fe fc4d 	bl	800467c <HAL_RCC_GetPCLK1Freq>
 8005de2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df0:	f040 810c 	bne.w	800600c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e06:	4622      	mov	r2, r4
 8005e08:	462b      	mov	r3, r5
 8005e0a:	1891      	adds	r1, r2, r2
 8005e0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e0e:	415b      	adcs	r3, r3
 8005e10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e16:	4621      	mov	r1, r4
 8005e18:	eb12 0801 	adds.w	r8, r2, r1
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	eb43 0901 	adc.w	r9, r3, r1
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	f04f 0300 	mov.w	r3, #0
 8005e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e36:	4690      	mov	r8, r2
 8005e38:	4699      	mov	r9, r3
 8005e3a:	4623      	mov	r3, r4
 8005e3c:	eb18 0303 	adds.w	r3, r8, r3
 8005e40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e44:	462b      	mov	r3, r5
 8005e46:	eb49 0303 	adc.w	r3, r9, r3
 8005e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e62:	460b      	mov	r3, r1
 8005e64:	18db      	adds	r3, r3, r3
 8005e66:	653b      	str	r3, [r7, #80]	; 0x50
 8005e68:	4613      	mov	r3, r2
 8005e6a:	eb42 0303 	adc.w	r3, r2, r3
 8005e6e:	657b      	str	r3, [r7, #84]	; 0x54
 8005e70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e78:	f7fa fa0a 	bl	8000290 <__aeabi_uldivmod>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4b61      	ldr	r3, [pc, #388]	; (8006008 <UART_SetConfig+0x2d4>)
 8005e82:	fba3 2302 	umull	r2, r3, r3, r2
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	011c      	lsls	r4, r3, #4
 8005e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e9c:	4642      	mov	r2, r8
 8005e9e:	464b      	mov	r3, r9
 8005ea0:	1891      	adds	r1, r2, r2
 8005ea2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ea4:	415b      	adcs	r3, r3
 8005ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ea8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005eac:	4641      	mov	r1, r8
 8005eae:	eb12 0a01 	adds.w	sl, r2, r1
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	eb43 0b01 	adc.w	fp, r3, r1
 8005eb8:	f04f 0200 	mov.w	r2, #0
 8005ebc:	f04f 0300 	mov.w	r3, #0
 8005ec0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ec4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ec8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ecc:	4692      	mov	sl, r2
 8005ece:	469b      	mov	fp, r3
 8005ed0:	4643      	mov	r3, r8
 8005ed2:	eb1a 0303 	adds.w	r3, sl, r3
 8005ed6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005eda:	464b      	mov	r3, r9
 8005edc:	eb4b 0303 	adc.w	r3, fp, r3
 8005ee0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ef0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ef4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	18db      	adds	r3, r3, r3
 8005efc:	643b      	str	r3, [r7, #64]	; 0x40
 8005efe:	4613      	mov	r3, r2
 8005f00:	eb42 0303 	adc.w	r3, r2, r3
 8005f04:	647b      	str	r3, [r7, #68]	; 0x44
 8005f06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f0e:	f7fa f9bf 	bl	8000290 <__aeabi_uldivmod>
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	4611      	mov	r1, r2
 8005f18:	4b3b      	ldr	r3, [pc, #236]	; (8006008 <UART_SetConfig+0x2d4>)
 8005f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8005f1e:	095b      	lsrs	r3, r3, #5
 8005f20:	2264      	movs	r2, #100	; 0x64
 8005f22:	fb02 f303 	mul.w	r3, r2, r3
 8005f26:	1acb      	subs	r3, r1, r3
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f2e:	4b36      	ldr	r3, [pc, #216]	; (8006008 <UART_SetConfig+0x2d4>)
 8005f30:	fba3 2302 	umull	r2, r3, r3, r2
 8005f34:	095b      	lsrs	r3, r3, #5
 8005f36:	005b      	lsls	r3, r3, #1
 8005f38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f3c:	441c      	add	r4, r3
 8005f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f50:	4642      	mov	r2, r8
 8005f52:	464b      	mov	r3, r9
 8005f54:	1891      	adds	r1, r2, r2
 8005f56:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f58:	415b      	adcs	r3, r3
 8005f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f60:	4641      	mov	r1, r8
 8005f62:	1851      	adds	r1, r2, r1
 8005f64:	6339      	str	r1, [r7, #48]	; 0x30
 8005f66:	4649      	mov	r1, r9
 8005f68:	414b      	adcs	r3, r1
 8005f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f78:	4659      	mov	r1, fp
 8005f7a:	00cb      	lsls	r3, r1, #3
 8005f7c:	4651      	mov	r1, sl
 8005f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f82:	4651      	mov	r1, sl
 8005f84:	00ca      	lsls	r2, r1, #3
 8005f86:	4610      	mov	r0, r2
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	4642      	mov	r2, r8
 8005f8e:	189b      	adds	r3, r3, r2
 8005f90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f94:	464b      	mov	r3, r9
 8005f96:	460a      	mov	r2, r1
 8005f98:	eb42 0303 	adc.w	r3, r2, r3
 8005f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005fac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005fb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	18db      	adds	r3, r3, r3
 8005fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fba:	4613      	mov	r3, r2
 8005fbc:	eb42 0303 	adc.w	r3, r2, r3
 8005fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005fca:	f7fa f961 	bl	8000290 <__aeabi_uldivmod>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4b0d      	ldr	r3, [pc, #52]	; (8006008 <UART_SetConfig+0x2d4>)
 8005fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fd8:	095b      	lsrs	r3, r3, #5
 8005fda:	2164      	movs	r1, #100	; 0x64
 8005fdc:	fb01 f303 	mul.w	r3, r1, r3
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	3332      	adds	r3, #50	; 0x32
 8005fe6:	4a08      	ldr	r2, [pc, #32]	; (8006008 <UART_SetConfig+0x2d4>)
 8005fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fec:	095b      	lsrs	r3, r3, #5
 8005fee:	f003 0207 	and.w	r2, r3, #7
 8005ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4422      	add	r2, r4
 8005ffa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ffc:	e105      	b.n	800620a <UART_SetConfig+0x4d6>
 8005ffe:	bf00      	nop
 8006000:	40011000 	.word	0x40011000
 8006004:	40011400 	.word	0x40011400
 8006008:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800600c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006010:	2200      	movs	r2, #0
 8006012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006016:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800601a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800601e:	4642      	mov	r2, r8
 8006020:	464b      	mov	r3, r9
 8006022:	1891      	adds	r1, r2, r2
 8006024:	6239      	str	r1, [r7, #32]
 8006026:	415b      	adcs	r3, r3
 8006028:	627b      	str	r3, [r7, #36]	; 0x24
 800602a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800602e:	4641      	mov	r1, r8
 8006030:	1854      	adds	r4, r2, r1
 8006032:	4649      	mov	r1, r9
 8006034:	eb43 0501 	adc.w	r5, r3, r1
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	00eb      	lsls	r3, r5, #3
 8006042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006046:	00e2      	lsls	r2, r4, #3
 8006048:	4614      	mov	r4, r2
 800604a:	461d      	mov	r5, r3
 800604c:	4643      	mov	r3, r8
 800604e:	18e3      	adds	r3, r4, r3
 8006050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006054:	464b      	mov	r3, r9
 8006056:	eb45 0303 	adc.w	r3, r5, r3
 800605a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800605e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800606a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	f04f 0300 	mov.w	r3, #0
 8006076:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800607a:	4629      	mov	r1, r5
 800607c:	008b      	lsls	r3, r1, #2
 800607e:	4621      	mov	r1, r4
 8006080:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006084:	4621      	mov	r1, r4
 8006086:	008a      	lsls	r2, r1, #2
 8006088:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800608c:	f7fa f900 	bl	8000290 <__aeabi_uldivmod>
 8006090:	4602      	mov	r2, r0
 8006092:	460b      	mov	r3, r1
 8006094:	4b60      	ldr	r3, [pc, #384]	; (8006218 <UART_SetConfig+0x4e4>)
 8006096:	fba3 2302 	umull	r2, r3, r3, r2
 800609a:	095b      	lsrs	r3, r3, #5
 800609c:	011c      	lsls	r4, r3, #4
 800609e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80060ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80060b0:	4642      	mov	r2, r8
 80060b2:	464b      	mov	r3, r9
 80060b4:	1891      	adds	r1, r2, r2
 80060b6:	61b9      	str	r1, [r7, #24]
 80060b8:	415b      	adcs	r3, r3
 80060ba:	61fb      	str	r3, [r7, #28]
 80060bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060c0:	4641      	mov	r1, r8
 80060c2:	1851      	adds	r1, r2, r1
 80060c4:	6139      	str	r1, [r7, #16]
 80060c6:	4649      	mov	r1, r9
 80060c8:	414b      	adcs	r3, r1
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	f04f 0200 	mov.w	r2, #0
 80060d0:	f04f 0300 	mov.w	r3, #0
 80060d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060d8:	4659      	mov	r1, fp
 80060da:	00cb      	lsls	r3, r1, #3
 80060dc:	4651      	mov	r1, sl
 80060de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060e2:	4651      	mov	r1, sl
 80060e4:	00ca      	lsls	r2, r1, #3
 80060e6:	4610      	mov	r0, r2
 80060e8:	4619      	mov	r1, r3
 80060ea:	4603      	mov	r3, r0
 80060ec:	4642      	mov	r2, r8
 80060ee:	189b      	adds	r3, r3, r2
 80060f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060f4:	464b      	mov	r3, r9
 80060f6:	460a      	mov	r2, r1
 80060f8:	eb42 0303 	adc.w	r3, r2, r3
 80060fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	67bb      	str	r3, [r7, #120]	; 0x78
 800610a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800610c:	f04f 0200 	mov.w	r2, #0
 8006110:	f04f 0300 	mov.w	r3, #0
 8006114:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006118:	4649      	mov	r1, r9
 800611a:	008b      	lsls	r3, r1, #2
 800611c:	4641      	mov	r1, r8
 800611e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006122:	4641      	mov	r1, r8
 8006124:	008a      	lsls	r2, r1, #2
 8006126:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800612a:	f7fa f8b1 	bl	8000290 <__aeabi_uldivmod>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4b39      	ldr	r3, [pc, #228]	; (8006218 <UART_SetConfig+0x4e4>)
 8006134:	fba3 1302 	umull	r1, r3, r3, r2
 8006138:	095b      	lsrs	r3, r3, #5
 800613a:	2164      	movs	r1, #100	; 0x64
 800613c:	fb01 f303 	mul.w	r3, r1, r3
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	011b      	lsls	r3, r3, #4
 8006144:	3332      	adds	r3, #50	; 0x32
 8006146:	4a34      	ldr	r2, [pc, #208]	; (8006218 <UART_SetConfig+0x4e4>)
 8006148:	fba2 2303 	umull	r2, r3, r2, r3
 800614c:	095b      	lsrs	r3, r3, #5
 800614e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006152:	441c      	add	r4, r3
 8006154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006158:	2200      	movs	r2, #0
 800615a:	673b      	str	r3, [r7, #112]	; 0x70
 800615c:	677a      	str	r2, [r7, #116]	; 0x74
 800615e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006162:	4642      	mov	r2, r8
 8006164:	464b      	mov	r3, r9
 8006166:	1891      	adds	r1, r2, r2
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	415b      	adcs	r3, r3
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006172:	4641      	mov	r1, r8
 8006174:	1851      	adds	r1, r2, r1
 8006176:	6039      	str	r1, [r7, #0]
 8006178:	4649      	mov	r1, r9
 800617a:	414b      	adcs	r3, r1
 800617c:	607b      	str	r3, [r7, #4]
 800617e:	f04f 0200 	mov.w	r2, #0
 8006182:	f04f 0300 	mov.w	r3, #0
 8006186:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800618a:	4659      	mov	r1, fp
 800618c:	00cb      	lsls	r3, r1, #3
 800618e:	4651      	mov	r1, sl
 8006190:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006194:	4651      	mov	r1, sl
 8006196:	00ca      	lsls	r2, r1, #3
 8006198:	4610      	mov	r0, r2
 800619a:	4619      	mov	r1, r3
 800619c:	4603      	mov	r3, r0
 800619e:	4642      	mov	r2, r8
 80061a0:	189b      	adds	r3, r3, r2
 80061a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80061a4:	464b      	mov	r3, r9
 80061a6:	460a      	mov	r2, r1
 80061a8:	eb42 0303 	adc.w	r3, r2, r3
 80061ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	663b      	str	r3, [r7, #96]	; 0x60
 80061b8:	667a      	str	r2, [r7, #100]	; 0x64
 80061ba:	f04f 0200 	mov.w	r2, #0
 80061be:	f04f 0300 	mov.w	r3, #0
 80061c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80061c6:	4649      	mov	r1, r9
 80061c8:	008b      	lsls	r3, r1, #2
 80061ca:	4641      	mov	r1, r8
 80061cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061d0:	4641      	mov	r1, r8
 80061d2:	008a      	lsls	r2, r1, #2
 80061d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80061d8:	f7fa f85a 	bl	8000290 <__aeabi_uldivmod>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4b0d      	ldr	r3, [pc, #52]	; (8006218 <UART_SetConfig+0x4e4>)
 80061e2:	fba3 1302 	umull	r1, r3, r3, r2
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	2164      	movs	r1, #100	; 0x64
 80061ea:	fb01 f303 	mul.w	r3, r1, r3
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	3332      	adds	r3, #50	; 0x32
 80061f4:	4a08      	ldr	r2, [pc, #32]	; (8006218 <UART_SetConfig+0x4e4>)
 80061f6:	fba2 2303 	umull	r2, r3, r2, r3
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	f003 020f 	and.w	r2, r3, #15
 8006200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4422      	add	r2, r4
 8006208:	609a      	str	r2, [r3, #8]
}
 800620a:	bf00      	nop
 800620c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006210:	46bd      	mov	sp, r7
 8006212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006216:	bf00      	nop
 8006218:	51eb851f 	.word	0x51eb851f

0800621c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800621c:	b084      	sub	sp, #16
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	f107 001c 	add.w	r0, r7, #28
 800622a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	2b01      	cmp	r3, #1
 8006232:	d122      	bne.n	800627a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800625c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800625e:	2b01      	cmp	r3, #1
 8006260:	d105      	bne.n	800626e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f001 fbee 	bl	8007a50 <USB_CoreReset>
 8006274:	4603      	mov	r3, r0
 8006276:	73fb      	strb	r3, [r7, #15]
 8006278:	e01a      	b.n	80062b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f001 fbe2 	bl	8007a50 <USB_CoreReset>
 800628c:	4603      	mov	r3, r0
 800628e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006292:	2b00      	cmp	r3, #0
 8006294:	d106      	bne.n	80062a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	639a      	str	r2, [r3, #56]	; 0x38
 80062a2:	e005      	b.n	80062b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d10b      	bne.n	80062ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f043 0206 	orr.w	r2, r3, #6
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f043 0220 	orr.w	r2, r3, #32
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062da:	b004      	add	sp, #16
 80062dc:	4770      	bx	lr
	...

080062e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	4613      	mov	r3, r2
 80062ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80062ee:	79fb      	ldrb	r3, [r7, #7]
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d165      	bne.n	80063c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	4a41      	ldr	r2, [pc, #260]	; (80063fc <USB_SetTurnaroundTime+0x11c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d906      	bls.n	800630a <USB_SetTurnaroundTime+0x2a>
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	4a40      	ldr	r2, [pc, #256]	; (8006400 <USB_SetTurnaroundTime+0x120>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d202      	bcs.n	800630a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006304:	230f      	movs	r3, #15
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	e062      	b.n	80063d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	4a3c      	ldr	r2, [pc, #240]	; (8006400 <USB_SetTurnaroundTime+0x120>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d306      	bcc.n	8006320 <USB_SetTurnaroundTime+0x40>
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	4a3b      	ldr	r2, [pc, #236]	; (8006404 <USB_SetTurnaroundTime+0x124>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d202      	bcs.n	8006320 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800631a:	230e      	movs	r3, #14
 800631c:	617b      	str	r3, [r7, #20]
 800631e:	e057      	b.n	80063d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4a38      	ldr	r2, [pc, #224]	; (8006404 <USB_SetTurnaroundTime+0x124>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d306      	bcc.n	8006336 <USB_SetTurnaroundTime+0x56>
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4a37      	ldr	r2, [pc, #220]	; (8006408 <USB_SetTurnaroundTime+0x128>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d202      	bcs.n	8006336 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006330:	230d      	movs	r3, #13
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	e04c      	b.n	80063d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	4a33      	ldr	r2, [pc, #204]	; (8006408 <USB_SetTurnaroundTime+0x128>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d306      	bcc.n	800634c <USB_SetTurnaroundTime+0x6c>
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	4a32      	ldr	r2, [pc, #200]	; (800640c <USB_SetTurnaroundTime+0x12c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d802      	bhi.n	800634c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006346:	230c      	movs	r3, #12
 8006348:	617b      	str	r3, [r7, #20]
 800634a:	e041      	b.n	80063d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	4a2f      	ldr	r2, [pc, #188]	; (800640c <USB_SetTurnaroundTime+0x12c>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d906      	bls.n	8006362 <USB_SetTurnaroundTime+0x82>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	4a2e      	ldr	r2, [pc, #184]	; (8006410 <USB_SetTurnaroundTime+0x130>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d802      	bhi.n	8006362 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800635c:	230b      	movs	r3, #11
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	e036      	b.n	80063d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	4a2a      	ldr	r2, [pc, #168]	; (8006410 <USB_SetTurnaroundTime+0x130>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d906      	bls.n	8006378 <USB_SetTurnaroundTime+0x98>
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	4a29      	ldr	r2, [pc, #164]	; (8006414 <USB_SetTurnaroundTime+0x134>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d802      	bhi.n	8006378 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006372:	230a      	movs	r3, #10
 8006374:	617b      	str	r3, [r7, #20]
 8006376:	e02b      	b.n	80063d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	4a26      	ldr	r2, [pc, #152]	; (8006414 <USB_SetTurnaroundTime+0x134>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d906      	bls.n	800638e <USB_SetTurnaroundTime+0xae>
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	4a25      	ldr	r2, [pc, #148]	; (8006418 <USB_SetTurnaroundTime+0x138>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d202      	bcs.n	800638e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006388:	2309      	movs	r3, #9
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	e020      	b.n	80063d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	4a21      	ldr	r2, [pc, #132]	; (8006418 <USB_SetTurnaroundTime+0x138>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d306      	bcc.n	80063a4 <USB_SetTurnaroundTime+0xc4>
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	4a20      	ldr	r2, [pc, #128]	; (800641c <USB_SetTurnaroundTime+0x13c>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d802      	bhi.n	80063a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800639e:	2308      	movs	r3, #8
 80063a0:	617b      	str	r3, [r7, #20]
 80063a2:	e015      	b.n	80063d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	4a1d      	ldr	r2, [pc, #116]	; (800641c <USB_SetTurnaroundTime+0x13c>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d906      	bls.n	80063ba <USB_SetTurnaroundTime+0xda>
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	4a1c      	ldr	r2, [pc, #112]	; (8006420 <USB_SetTurnaroundTime+0x140>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d202      	bcs.n	80063ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80063b4:	2307      	movs	r3, #7
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	e00a      	b.n	80063d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80063ba:	2306      	movs	r3, #6
 80063bc:	617b      	str	r3, [r7, #20]
 80063be:	e007      	b.n	80063d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80063c0:	79fb      	ldrb	r3, [r7, #7]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d102      	bne.n	80063cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80063c6:	2309      	movs	r3, #9
 80063c8:	617b      	str	r3, [r7, #20]
 80063ca:	e001      	b.n	80063d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80063cc:	2309      	movs	r3, #9
 80063ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	029b      	lsls	r3, r3, #10
 80063e4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80063e8:	431a      	orrs	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	371c      	adds	r7, #28
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	00d8acbf 	.word	0x00d8acbf
 8006400:	00e4e1c0 	.word	0x00e4e1c0
 8006404:	00f42400 	.word	0x00f42400
 8006408:	01067380 	.word	0x01067380
 800640c:	011a499f 	.word	0x011a499f
 8006410:	01312cff 	.word	0x01312cff
 8006414:	014ca43f 	.word	0x014ca43f
 8006418:	016e3600 	.word	0x016e3600
 800641c:	01a6ab1f 	.word	0x01a6ab1f
 8006420:	01e84800 	.word	0x01e84800

08006424 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f043 0201 	orr.w	r2, r3, #1
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f023 0201 	bic.w	r2, r3, #1
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	460b      	mov	r3, r1
 8006472:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d115      	bne.n	80064b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006496:	2001      	movs	r0, #1
 8006498:	f7fa feec 	bl	8001274 <HAL_Delay>
      ms++;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	3301      	adds	r3, #1
 80064a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f001 fa45 	bl	8007932 <USB_GetMode>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d01e      	beq.n	80064ec <USB_SetCurrentMode+0x84>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b31      	cmp	r3, #49	; 0x31
 80064b2:	d9f0      	bls.n	8006496 <USB_SetCurrentMode+0x2e>
 80064b4:	e01a      	b.n	80064ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064b6:	78fb      	ldrb	r3, [r7, #3]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d115      	bne.n	80064e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064c8:	2001      	movs	r0, #1
 80064ca:	f7fa fed3 	bl	8001274 <HAL_Delay>
      ms++;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3301      	adds	r3, #1
 80064d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f001 fa2c 	bl	8007932 <USB_GetMode>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d005      	beq.n	80064ec <USB_SetCurrentMode+0x84>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2b31      	cmp	r3, #49	; 0x31
 80064e4:	d9f0      	bls.n	80064c8 <USB_SetCurrentMode+0x60>
 80064e6:	e001      	b.n	80064ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e005      	b.n	80064f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b32      	cmp	r3, #50	; 0x32
 80064f0:	d101      	bne.n	80064f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e000      	b.n	80064f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006500:	b084      	sub	sp, #16
 8006502:	b580      	push	{r7, lr}
 8006504:	b086      	sub	sp, #24
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800650e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800651a:	2300      	movs	r3, #0
 800651c:	613b      	str	r3, [r7, #16]
 800651e:	e009      	b.n	8006534 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	3340      	adds	r3, #64	; 0x40
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	2200      	movs	r2, #0
 800652c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	3301      	adds	r3, #1
 8006532:	613b      	str	r3, [r7, #16]
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	2b0e      	cmp	r3, #14
 8006538:	d9f2      	bls.n	8006520 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800653a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800653c:	2b00      	cmp	r3, #0
 800653e:	d11c      	bne.n	800657a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800654e:	f043 0302 	orr.w	r3, r3, #2
 8006552:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006558:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006564:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006570:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	639a      	str	r2, [r3, #56]	; 0x38
 8006578:	e00b      	b.n	8006592 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006598:	461a      	mov	r2, r3
 800659a:	2300      	movs	r3, #0
 800659c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a4:	4619      	mov	r1, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ac:	461a      	mov	r2, r3
 80065ae:	680b      	ldr	r3, [r1, #0]
 80065b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d10c      	bne.n	80065d2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d104      	bne.n	80065c8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065be:	2100      	movs	r1, #0
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f965 	bl	8006890 <USB_SetDevSpeed>
 80065c6:	e008      	b.n	80065da <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065c8:	2101      	movs	r1, #1
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f960 	bl	8006890 <USB_SetDevSpeed>
 80065d0:	e003      	b.n	80065da <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065d2:	2103      	movs	r1, #3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f95b 	bl	8006890 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065da:	2110      	movs	r1, #16
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f8f3 	bl	80067c8 <USB_FlushTxFifo>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f91f 	bl	8006830 <USB_FlushRxFifo>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006602:	461a      	mov	r2, r3
 8006604:	2300      	movs	r3, #0
 8006606:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660e:	461a      	mov	r2, r3
 8006610:	2300      	movs	r3, #0
 8006612:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661a:	461a      	mov	r2, r3
 800661c:	2300      	movs	r3, #0
 800661e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006620:	2300      	movs	r3, #0
 8006622:	613b      	str	r3, [r7, #16]
 8006624:	e043      	b.n	80066ae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800663c:	d118      	bne.n	8006670 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10a      	bne.n	800665a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006650:	461a      	mov	r2, r3
 8006652:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	e013      	b.n	8006682 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006666:	461a      	mov	r2, r3
 8006668:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	e008      	b.n	8006682 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800667c:	461a      	mov	r2, r3
 800667e:	2300      	movs	r3, #0
 8006680:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668e:	461a      	mov	r2, r3
 8006690:	2300      	movs	r3, #0
 8006692:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a0:	461a      	mov	r2, r3
 80066a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	3301      	adds	r3, #1
 80066ac:	613b      	str	r3, [r7, #16]
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d3b7      	bcc.n	8006626 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066b6:	2300      	movs	r3, #0
 80066b8:	613b      	str	r3, [r7, #16]
 80066ba:	e043      	b.n	8006744 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066d2:	d118      	bne.n	8006706 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10a      	bne.n	80066f0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e6:	461a      	mov	r2, r3
 80066e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	e013      	b.n	8006718 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fc:	461a      	mov	r2, r3
 80066fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	e008      	b.n	8006718 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006712:	461a      	mov	r2, r3
 8006714:	2300      	movs	r3, #0
 8006716:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006724:	461a      	mov	r2, r3
 8006726:	2300      	movs	r3, #0
 8006728:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006736:	461a      	mov	r2, r3
 8006738:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800673c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	3301      	adds	r3, #1
 8006742:	613b      	str	r3, [r7, #16]
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	429a      	cmp	r2, r3
 800674a:	d3b7      	bcc.n	80066bc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800675a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800675e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800676c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	2b00      	cmp	r3, #0
 8006772:	d105      	bne.n	8006780 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	f043 0210 	orr.w	r2, r3, #16
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	699a      	ldr	r2, [r3, #24]
 8006784:	4b0f      	ldr	r3, [pc, #60]	; (80067c4 <USB_DevInit+0x2c4>)
 8006786:	4313      	orrs	r3, r2
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800678c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800678e:	2b00      	cmp	r3, #0
 8006790:	d005      	beq.n	800679e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	f043 0208 	orr.w	r2, r3, #8
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800679e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d107      	bne.n	80067b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067ac:	f043 0304 	orr.w	r3, r3, #4
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067c0:	b004      	add	sp, #16
 80067c2:	4770      	bx	lr
 80067c4:	803c3800 	.word	0x803c3800

080067c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	3301      	adds	r3, #1
 80067da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4a13      	ldr	r2, [pc, #76]	; (800682c <USB_FlushTxFifo+0x64>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d901      	bls.n	80067e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e01b      	b.n	8006820 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	daf2      	bge.n	80067d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	019b      	lsls	r3, r3, #6
 80067f8:	f043 0220 	orr.w	r2, r3, #32
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	3301      	adds	r3, #1
 8006804:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	4a08      	ldr	r2, [pc, #32]	; (800682c <USB_FlushTxFifo+0x64>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d901      	bls.n	8006812 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e006      	b.n	8006820 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b20      	cmp	r3, #32
 800681c:	d0f0      	beq.n	8006800 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	00030d40 	.word	0x00030d40

08006830 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	3301      	adds	r3, #1
 8006840:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	4a11      	ldr	r2, [pc, #68]	; (800688c <USB_FlushRxFifo+0x5c>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d901      	bls.n	800684e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e018      	b.n	8006880 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	daf2      	bge.n	800683c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2210      	movs	r2, #16
 800685e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3301      	adds	r3, #1
 8006864:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4a08      	ldr	r2, [pc, #32]	; (800688c <USB_FlushRxFifo+0x5c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d901      	bls.n	8006872 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e006      	b.n	8006880 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0310 	and.w	r3, r3, #16
 800687a:	2b10      	cmp	r3, #16
 800687c:	d0f0      	beq.n	8006860 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	00030d40 	.word	0x00030d40

08006890 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	78fb      	ldrb	r3, [r7, #3]
 80068aa:	68f9      	ldr	r1, [r7, #12]
 80068ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068b0:	4313      	orrs	r3, r2
 80068b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b087      	sub	sp, #28
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f003 0306 	and.w	r3, r3, #6
 80068da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d102      	bne.n	80068e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80068e2:	2300      	movs	r3, #0
 80068e4:	75fb      	strb	r3, [r7, #23]
 80068e6:	e00a      	b.n	80068fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d002      	beq.n	80068f4 <USB_GetDevSpeed+0x32>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b06      	cmp	r3, #6
 80068f2:	d102      	bne.n	80068fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80068f4:	2302      	movs	r3, #2
 80068f6:	75fb      	strb	r3, [r7, #23]
 80068f8:	e001      	b.n	80068fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80068fa:	230f      	movs	r3, #15
 80068fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80068fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006900:	4618      	mov	r0, r3
 8006902:	371c      	adds	r7, #28
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	785b      	ldrb	r3, [r3, #1]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d13a      	bne.n	800699e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692e:	69da      	ldr	r2, [r3, #28]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	f003 030f 	and.w	r3, r3, #15
 8006938:	2101      	movs	r1, #1
 800693a:	fa01 f303 	lsl.w	r3, r1, r3
 800693e:	b29b      	uxth	r3, r3
 8006940:	68f9      	ldr	r1, [r7, #12]
 8006942:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006946:	4313      	orrs	r3, r2
 8006948:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4413      	add	r3, r2
 8006952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d155      	bne.n	8006a0c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	791b      	ldrb	r3, [r3, #4]
 800697a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800697c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	059b      	lsls	r3, r3, #22
 8006982:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006984:	4313      	orrs	r3, r2
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	0151      	lsls	r1, r2, #5
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	440a      	add	r2, r1
 800698e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	e036      	b.n	8006a0c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a4:	69da      	ldr	r2, [r3, #28]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	f003 030f 	and.w	r3, r3, #15
 80069ae:	2101      	movs	r1, #1
 80069b0:	fa01 f303 	lsl.w	r3, r1, r3
 80069b4:	041b      	lsls	r3, r3, #16
 80069b6:	68f9      	ldr	r1, [r7, #12]
 80069b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069bc:	4313      	orrs	r3, r2
 80069be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d11a      	bne.n	8006a0c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	791b      	ldrb	r3, [r3, #4]
 80069f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069f2:	430b      	orrs	r3, r1
 80069f4:	4313      	orrs	r3, r2
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	0151      	lsls	r1, r2, #5
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	440a      	add	r2, r1
 80069fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a0a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
	...

08006a1c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	785b      	ldrb	r3, [r3, #1]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d161      	bne.n	8006afc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a4e:	d11f      	bne.n	8006a90 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	0151      	lsls	r1, r2, #5
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	440a      	add	r2, r1
 8006a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a6e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	0151      	lsls	r1, r2, #5
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	440a      	add	r2, r1
 8006a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	f003 030f 	and.w	r3, r3, #15
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	43db      	mvns	r3, r3
 8006aaa:	68f9      	ldr	r1, [r7, #12]
 8006aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aba:	69da      	ldr	r2, [r3, #28]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	f003 030f 	and.w	r3, r3, #15
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	43db      	mvns	r3, r3
 8006ace:	68f9      	ldr	r1, [r7, #12]
 8006ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	0159      	lsls	r1, r3, #5
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	440b      	add	r3, r1
 8006aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af2:	4619      	mov	r1, r3
 8006af4:	4b35      	ldr	r3, [pc, #212]	; (8006bcc <USB_DeactivateEndpoint+0x1b0>)
 8006af6:	4013      	ands	r3, r2
 8006af8:	600b      	str	r3, [r1, #0]
 8006afa:	e060      	b.n	8006bbe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b12:	d11f      	bne.n	8006b54 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	0151      	lsls	r1, r2, #5
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	440a      	add	r2, r1
 8006b2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b32:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	0151      	lsls	r1, r2, #5
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	440a      	add	r2, r1
 8006b4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	2101      	movs	r1, #1
 8006b66:	fa01 f303 	lsl.w	r3, r1, r3
 8006b6a:	041b      	lsls	r3, r3, #16
 8006b6c:	43db      	mvns	r3, r3
 8006b6e:	68f9      	ldr	r1, [r7, #12]
 8006b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b74:	4013      	ands	r3, r2
 8006b76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7e:	69da      	ldr	r2, [r3, #28]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	f003 030f 	and.w	r3, r3, #15
 8006b88:	2101      	movs	r1, #1
 8006b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b8e:	041b      	lsls	r3, r3, #16
 8006b90:	43db      	mvns	r3, r3
 8006b92:	68f9      	ldr	r1, [r7, #12]
 8006b94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b98:	4013      	ands	r3, r2
 8006b9a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	0159      	lsls	r1, r3, #5
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	440b      	add	r3, r1
 8006bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <USB_DeactivateEndpoint+0x1b4>)
 8006bba:	4013      	ands	r3, r2
 8006bbc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	ec337800 	.word	0xec337800
 8006bd0:	eff37800 	.word	0xeff37800

08006bd4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b08a      	sub	sp, #40	; 0x28
 8006bd8:	af02      	add	r7, sp, #8
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	4613      	mov	r3, r2
 8006be0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	785b      	ldrb	r3, [r3, #1]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	f040 815c 	bne.w	8006eae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d132      	bne.n	8006c64 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	0151      	lsls	r1, r2, #5
 8006c10:	69fa      	ldr	r2, [r7, #28]
 8006c12:	440a      	add	r2, r1
 8006c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	0151      	lsls	r1, r2, #5
 8006c34:	69fa      	ldr	r2, [r7, #28]
 8006c36:	440a      	add	r2, r1
 8006c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	0151      	lsls	r1, r2, #5
 8006c54:	69fa      	ldr	r2, [r7, #28]
 8006c56:	440a      	add	r2, r1
 8006c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c5c:	0cdb      	lsrs	r3, r3, #19
 8006c5e:	04db      	lsls	r3, r3, #19
 8006c60:	6113      	str	r3, [r2, #16]
 8006c62:	e074      	b.n	8006d4e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	0151      	lsls	r1, r2, #5
 8006c76:	69fa      	ldr	r2, [r7, #28]
 8006c78:	440a      	add	r2, r1
 8006c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c7e:	0cdb      	lsrs	r3, r3, #19
 8006c80:	04db      	lsls	r3, r3, #19
 8006c82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	0151      	lsls	r1, r2, #5
 8006c96:	69fa      	ldr	r2, [r7, #28]
 8006c98:	440a      	add	r2, r1
 8006c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ca2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ca6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	6999      	ldr	r1, [r3, #24]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	440b      	add	r3, r1
 8006cc0:	1e59      	subs	r1, r3, #1
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006cca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006ccc:	4b9d      	ldr	r3, [pc, #628]	; (8006f44 <USB_EPStartXfer+0x370>)
 8006cce:	400b      	ands	r3, r1
 8006cd0:	69b9      	ldr	r1, [r7, #24]
 8006cd2:	0148      	lsls	r0, r1, #5
 8006cd4:	69f9      	ldr	r1, [r7, #28]
 8006cd6:	4401      	add	r1, r0
 8006cd8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cec:	691a      	ldr	r2, [r3, #16]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cf6:	69b9      	ldr	r1, [r7, #24]
 8006cf8:	0148      	lsls	r0, r1, #5
 8006cfa:	69f9      	ldr	r1, [r7, #28]
 8006cfc:	4401      	add	r1, r0
 8006cfe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d02:	4313      	orrs	r3, r2
 8006d04:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	791b      	ldrb	r3, [r3, #4]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d11f      	bne.n	8006d4e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	0151      	lsls	r1, r2, #5
 8006d20:	69fa      	ldr	r2, [r7, #28]
 8006d22:	440a      	add	r2, r1
 8006d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d28:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006d2c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	0151      	lsls	r1, r2, #5
 8006d40:	69fa      	ldr	r2, [r7, #28]
 8006d42:	440a      	add	r2, r1
 8006d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d4c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006d4e:	79fb      	ldrb	r3, [r7, #7]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d14b      	bne.n	8006dec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d009      	beq.n	8006d70 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d68:	461a      	mov	r2, r3
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	791b      	ldrb	r3, [r3, #4]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d128      	bne.n	8006dca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d110      	bne.n	8006daa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	0151      	lsls	r1, r2, #5
 8006d9a:	69fa      	ldr	r2, [r7, #28]
 8006d9c:	440a      	add	r2, r1
 8006d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006da2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006da6:	6013      	str	r3, [r2, #0]
 8006da8:	e00f      	b.n	8006dca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	0151      	lsls	r1, r2, #5
 8006dbc:	69fa      	ldr	r2, [r7, #28]
 8006dbe:	440a      	add	r2, r1
 8006dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dc8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	015a      	lsls	r2, r3, #5
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	0151      	lsls	r1, r2, #5
 8006ddc:	69fa      	ldr	r2, [r7, #28]
 8006dde:	440a      	add	r2, r1
 8006de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006de8:	6013      	str	r3, [r2, #0]
 8006dea:	e133      	b.n	8007054 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	69ba      	ldr	r2, [r7, #24]
 8006dfc:	0151      	lsls	r1, r2, #5
 8006dfe:	69fa      	ldr	r2, [r7, #28]
 8006e00:	440a      	add	r2, r1
 8006e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e0a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	791b      	ldrb	r3, [r3, #4]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d015      	beq.n	8006e40 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 811b 	beq.w	8007054 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	f003 030f 	and.w	r3, r3, #15
 8006e2e:	2101      	movs	r1, #1
 8006e30:	fa01 f303 	lsl.w	r3, r1, r3
 8006e34:	69f9      	ldr	r1, [r7, #28]
 8006e36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	634b      	str	r3, [r1, #52]	; 0x34
 8006e3e:	e109      	b.n	8007054 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d110      	bne.n	8006e72 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	0151      	lsls	r1, r2, #5
 8006e62:	69fa      	ldr	r2, [r7, #28]
 8006e64:	440a      	add	r2, r1
 8006e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e6e:	6013      	str	r3, [r2, #0]
 8006e70:	e00f      	b.n	8006e92 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	0151      	lsls	r1, r2, #5
 8006e84:	69fa      	ldr	r2, [r7, #28]
 8006e86:	440a      	add	r2, r1
 8006e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e90:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	6919      	ldr	r1, [r3, #16]
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	781a      	ldrb	r2, [r3, #0]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	b298      	uxth	r0, r3
 8006ea0:	79fb      	ldrb	r3, [r7, #7]
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 fade 	bl	8007468 <USB_WritePacket>
 8006eac:	e0d2      	b.n	8007054 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	0151      	lsls	r1, r2, #5
 8006ec0:	69fa      	ldr	r2, [r7, #28]
 8006ec2:	440a      	add	r2, r1
 8006ec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ec8:	0cdb      	lsrs	r3, r3, #19
 8006eca:	04db      	lsls	r3, r3, #19
 8006ecc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	69ba      	ldr	r2, [r7, #24]
 8006ede:	0151      	lsls	r1, r2, #5
 8006ee0:	69fa      	ldr	r2, [r7, #28]
 8006ee2:	440a      	add	r2, r1
 8006ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ee8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006eec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ef0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d126      	bne.n	8006f48 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f06:	691a      	ldr	r2, [r3, #16]
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f10:	69b9      	ldr	r1, [r7, #24]
 8006f12:	0148      	lsls	r0, r1, #5
 8006f14:	69f9      	ldr	r1, [r7, #28]
 8006f16:	4401      	add	r1, r0
 8006f18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	69ba      	ldr	r2, [r7, #24]
 8006f30:	0151      	lsls	r1, r2, #5
 8006f32:	69fa      	ldr	r2, [r7, #28]
 8006f34:	440a      	add	r2, r1
 8006f36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f3e:	6113      	str	r3, [r2, #16]
 8006f40:	e03a      	b.n	8006fb8 <USB_EPStartXfer+0x3e4>
 8006f42:	bf00      	nop
 8006f44:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	699a      	ldr	r2, [r3, #24]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	4413      	add	r3, r2
 8006f52:	1e5a      	subs	r2, r3, #1
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f5c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	8afa      	ldrh	r2, [r7, #22]
 8006f64:	fb03 f202 	mul.w	r2, r3, r2
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f78:	691a      	ldr	r2, [r3, #16]
 8006f7a:	8afb      	ldrh	r3, [r7, #22]
 8006f7c:	04d9      	lsls	r1, r3, #19
 8006f7e:	4b38      	ldr	r3, [pc, #224]	; (8007060 <USB_EPStartXfer+0x48c>)
 8006f80:	400b      	ands	r3, r1
 8006f82:	69b9      	ldr	r1, [r7, #24]
 8006f84:	0148      	lsls	r0, r1, #5
 8006f86:	69f9      	ldr	r1, [r7, #28]
 8006f88:	4401      	add	r1, r0
 8006f8a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9e:	691a      	ldr	r2, [r3, #16]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	69db      	ldr	r3, [r3, #28]
 8006fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fa8:	69b9      	ldr	r1, [r7, #24]
 8006faa:	0148      	lsls	r0, r1, #5
 8006fac:	69f9      	ldr	r1, [r7, #28]
 8006fae:	4401      	add	r1, r0
 8006fb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006fb8:	79fb      	ldrb	r3, [r7, #7]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d10d      	bne.n	8006fda <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d009      	beq.n	8006fda <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	6919      	ldr	r1, [r3, #16]
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	015a      	lsls	r2, r3, #5
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd6:	460a      	mov	r2, r1
 8006fd8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	791b      	ldrb	r3, [r3, #4]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d128      	bne.n	8007034 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d110      	bne.n	8007014 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	0151      	lsls	r1, r2, #5
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	440a      	add	r2, r1
 8007008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800700c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	e00f      	b.n	8007034 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	0151      	lsls	r1, r2, #5
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	440a      	add	r2, r1
 800702a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800702e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007032:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	0151      	lsls	r1, r2, #5
 8007046:	69fa      	ldr	r2, [r7, #28]
 8007048:	440a      	add	r2, r1
 800704a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800704e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007052:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3720      	adds	r7, #32
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	1ff80000 	.word	0x1ff80000

08007064 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	4613      	mov	r3, r2
 8007070:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	785b      	ldrb	r3, [r3, #1]
 8007080:	2b01      	cmp	r3, #1
 8007082:	f040 80ce 	bne.w	8007222 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d132      	bne.n	80070f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	0151      	lsls	r1, r2, #5
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	440a      	add	r2, r1
 80070a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	015a      	lsls	r2, r3, #5
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	4413      	add	r3, r2
 80070ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	0151      	lsls	r1, r2, #5
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	440a      	add	r2, r1
 80070c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	0151      	lsls	r1, r2, #5
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	440a      	add	r2, r1
 80070e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ec:	0cdb      	lsrs	r3, r3, #19
 80070ee:	04db      	lsls	r3, r3, #19
 80070f0:	6113      	str	r3, [r2, #16]
 80070f2:	e04e      	b.n	8007192 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	0151      	lsls	r1, r2, #5
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	440a      	add	r2, r1
 800710a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800710e:	0cdb      	lsrs	r3, r3, #19
 8007110:	04db      	lsls	r3, r3, #19
 8007112:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	4413      	add	r3, r2
 800711c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	0151      	lsls	r1, r2, #5
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	440a      	add	r2, r1
 800712a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800712e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007132:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007136:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	699a      	ldr	r2, [r3, #24]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	429a      	cmp	r2, r3
 8007142:	d903      	bls.n	800714c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	68da      	ldr	r2, [r3, #12]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	0151      	lsls	r1, r2, #5
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	440a      	add	r2, r1
 8007162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007166:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800716a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007178:	691a      	ldr	r2, [r3, #16]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007182:	6939      	ldr	r1, [r7, #16]
 8007184:	0148      	lsls	r0, r1, #5
 8007186:	6979      	ldr	r1, [r7, #20]
 8007188:	4401      	add	r1, r0
 800718a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800718e:	4313      	orrs	r3, r2
 8007190:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d11e      	bne.n	80071d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d009      	beq.n	80071b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ac:	461a      	mov	r2, r3
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	0151      	lsls	r1, r2, #5
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	440a      	add	r2, r1
 80071ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071d2:	6013      	str	r3, [r2, #0]
 80071d4:	e097      	b.n	8007306 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	0151      	lsls	r1, r2, #5
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	440a      	add	r2, r1
 80071ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 8083 	beq.w	8007306 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	f003 030f 	and.w	r3, r3, #15
 8007210:	2101      	movs	r1, #1
 8007212:	fa01 f303 	lsl.w	r3, r1, r3
 8007216:	6979      	ldr	r1, [r7, #20]
 8007218:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800721c:	4313      	orrs	r3, r2
 800721e:	634b      	str	r3, [r1, #52]	; 0x34
 8007220:	e071      	b.n	8007306 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	4413      	add	r3, r2
 800722a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	0151      	lsls	r1, r2, #5
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	440a      	add	r2, r1
 8007238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800723c:	0cdb      	lsrs	r3, r3, #19
 800723e:	04db      	lsls	r3, r3, #19
 8007240:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	015a      	lsls	r2, r3, #5
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	4413      	add	r3, r2
 800724a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	0151      	lsls	r1, r2, #5
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	440a      	add	r2, r1
 8007258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800725c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007260:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007264:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	68da      	ldr	r2, [r3, #12]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	68da      	ldr	r2, [r3, #12]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	0151      	lsls	r1, r2, #5
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	440a      	add	r2, r1
 8007294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007298:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800729c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072aa:	691a      	ldr	r2, [r3, #16]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072b4:	6939      	ldr	r1, [r7, #16]
 80072b6:	0148      	lsls	r0, r1, #5
 80072b8:	6979      	ldr	r1, [r7, #20]
 80072ba:	4401      	add	r1, r0
 80072bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072c0:	4313      	orrs	r3, r2
 80072c2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80072c4:	79fb      	ldrb	r3, [r7, #7]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d10d      	bne.n	80072e6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d009      	beq.n	80072e6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	6919      	ldr	r1, [r3, #16]
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e2:	460a      	mov	r2, r1
 80072e4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	0151      	lsls	r1, r2, #5
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	440a      	add	r2, r1
 80072fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007300:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007304:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	371c      	adds	r7, #28
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	785b      	ldrb	r3, [r3, #1]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d14a      	bne.n	80073c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007346:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800734a:	f040 8086 	bne.w	800745a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	7812      	ldrb	r2, [r2, #0]
 8007362:	0151      	lsls	r1, r2, #5
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	440a      	add	r2, r1
 8007368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800736c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007370:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	7812      	ldrb	r2, [r2, #0]
 8007386:	0151      	lsls	r1, r2, #5
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	440a      	add	r2, r1
 800738c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007390:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007394:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	3301      	adds	r3, #1
 800739a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f242 7210 	movw	r2, #10000	; 0x2710
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d902      	bls.n	80073ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	75fb      	strb	r3, [r7, #23]
          break;
 80073aa:	e056      	b.n	800745a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073c4:	d0e7      	beq.n	8007396 <USB_EPStopXfer+0x82>
 80073c6:	e048      	b.n	800745a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073e0:	d13b      	bne.n	800745a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	7812      	ldrb	r2, [r2, #0]
 80073f6:	0151      	lsls	r1, r2, #5
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	440a      	add	r2, r1
 80073fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007400:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007404:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	7812      	ldrb	r2, [r2, #0]
 800741a:	0151      	lsls	r1, r2, #5
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	440a      	add	r2, r1
 8007420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007424:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007428:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	3301      	adds	r3, #1
 800742e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f242 7210 	movw	r2, #10000	; 0x2710
 8007436:	4293      	cmp	r3, r2
 8007438:	d902      	bls.n	8007440 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	75fb      	strb	r3, [r7, #23]
          break;
 800743e:	e00c      	b.n	800745a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	4413      	add	r3, r2
 800744a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007454:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007458:	d0e7      	beq.n	800742a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800745a:	7dfb      	ldrb	r3, [r7, #23]
}
 800745c:	4618      	mov	r0, r3
 800745e:	371c      	adds	r7, #28
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007468:	b480      	push	{r7}
 800746a:	b089      	sub	sp, #36	; 0x24
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	4611      	mov	r1, r2
 8007474:	461a      	mov	r2, r3
 8007476:	460b      	mov	r3, r1
 8007478:	71fb      	strb	r3, [r7, #7]
 800747a:	4613      	mov	r3, r2
 800747c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007486:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800748a:	2b00      	cmp	r3, #0
 800748c:	d123      	bne.n	80074d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800748e:	88bb      	ldrh	r3, [r7, #4]
 8007490:	3303      	adds	r3, #3
 8007492:	089b      	lsrs	r3, r3, #2
 8007494:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007496:	2300      	movs	r3, #0
 8007498:	61bb      	str	r3, [r7, #24]
 800749a:	e018      	b.n	80074ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800749c:	79fb      	ldrb	r3, [r7, #7]
 800749e:	031a      	lsls	r2, r3, #12
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074a8:	461a      	mov	r2, r3
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	3301      	adds	r3, #1
 80074b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	3301      	adds	r3, #1
 80074ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	3301      	adds	r3, #1
 80074c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	3301      	adds	r3, #1
 80074c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	3301      	adds	r3, #1
 80074cc:	61bb      	str	r3, [r7, #24]
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d3e2      	bcc.n	800749c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3724      	adds	r7, #36	; 0x24
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b08b      	sub	sp, #44	; 0x2c
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	4613      	mov	r3, r2
 80074f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80074fa:	88fb      	ldrh	r3, [r7, #6]
 80074fc:	089b      	lsrs	r3, r3, #2
 80074fe:	b29b      	uxth	r3, r3
 8007500:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007502:	88fb      	ldrh	r3, [r7, #6]
 8007504:	f003 0303 	and.w	r3, r3, #3
 8007508:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800750a:	2300      	movs	r3, #0
 800750c:	623b      	str	r3, [r7, #32]
 800750e:	e014      	b.n	800753a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	601a      	str	r2, [r3, #0]
    pDest++;
 800751c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751e:	3301      	adds	r3, #1
 8007520:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007524:	3301      	adds	r3, #1
 8007526:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	3301      	adds	r3, #1
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	3301      	adds	r3, #1
 8007532:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	3301      	adds	r3, #1
 8007538:	623b      	str	r3, [r7, #32]
 800753a:	6a3a      	ldr	r2, [r7, #32]
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	429a      	cmp	r2, r3
 8007540:	d3e6      	bcc.n	8007510 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007542:	8bfb      	ldrh	r3, [r7, #30]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d01e      	beq.n	8007586 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007548:	2300      	movs	r3, #0
 800754a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007552:	461a      	mov	r2, r3
 8007554:	f107 0310 	add.w	r3, r7, #16
 8007558:	6812      	ldr	r2, [r2, #0]
 800755a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	6a3b      	ldr	r3, [r7, #32]
 8007560:	b2db      	uxtb	r3, r3
 8007562:	00db      	lsls	r3, r3, #3
 8007564:	fa22 f303 	lsr.w	r3, r2, r3
 8007568:	b2da      	uxtb	r2, r3
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	701a      	strb	r2, [r3, #0]
      i++;
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	3301      	adds	r3, #1
 8007572:	623b      	str	r3, [r7, #32]
      pDest++;
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	3301      	adds	r3, #1
 8007578:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800757a:	8bfb      	ldrh	r3, [r7, #30]
 800757c:	3b01      	subs	r3, #1
 800757e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007580:	8bfb      	ldrh	r3, [r7, #30]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1ea      	bne.n	800755c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007588:	4618      	mov	r0, r3
 800758a:	372c      	adds	r7, #44	; 0x2c
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	785b      	ldrb	r3, [r3, #1]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d12c      	bne.n	800760a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	db12      	blt.n	80075e8 <USB_EPSetStall+0x54>
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00f      	beq.n	80075e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	0151      	lsls	r1, r2, #5
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	440a      	add	r2, r1
 80075de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	0151      	lsls	r1, r2, #5
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	440a      	add	r2, r1
 80075fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007602:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007606:	6013      	str	r3, [r2, #0]
 8007608:	e02b      	b.n	8007662 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	015a      	lsls	r2, r3, #5
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	4413      	add	r3, r2
 8007612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	db12      	blt.n	8007642 <USB_EPSetStall+0xae>
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00f      	beq.n	8007642 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	0151      	lsls	r1, r2, #5
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	440a      	add	r2, r1
 8007638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800763c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007640:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	015a      	lsls	r2, r3, #5
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	4413      	add	r3, r2
 800764a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	0151      	lsls	r1, r2, #5
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	440a      	add	r2, r1
 8007658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800765c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007660:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	785b      	ldrb	r3, [r3, #1]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d128      	bne.n	80076de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	015a      	lsls	r2, r3, #5
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	4413      	add	r3, r2
 8007694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	0151      	lsls	r1, r2, #5
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	440a      	add	r2, r1
 80076a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	791b      	ldrb	r3, [r3, #4]
 80076b0:	2b03      	cmp	r3, #3
 80076b2:	d003      	beq.n	80076bc <USB_EPClearStall+0x4c>
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	791b      	ldrb	r3, [r3, #4]
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d138      	bne.n	800772e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	0151      	lsls	r1, r2, #5
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	440a      	add	r2, r1
 80076d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076da:	6013      	str	r3, [r2, #0]
 80076dc:	e027      	b.n	800772e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	0151      	lsls	r1, r2, #5
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	440a      	add	r2, r1
 80076f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	791b      	ldrb	r3, [r3, #4]
 8007702:	2b03      	cmp	r3, #3
 8007704:	d003      	beq.n	800770e <USB_EPClearStall+0x9e>
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	791b      	ldrb	r3, [r3, #4]
 800770a:	2b02      	cmp	r3, #2
 800770c:	d10f      	bne.n	800772e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4413      	add	r3, r2
 8007716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	0151      	lsls	r1, r2, #5
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	440a      	add	r2, r1
 8007724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800772c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	460b      	mov	r3, r1
 8007746:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800775a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800775e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	78fb      	ldrb	r3, [r7, #3]
 800776a:	011b      	lsls	r3, r3, #4
 800776c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007770:	68f9      	ldr	r1, [r7, #12]
 8007772:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007776:	4313      	orrs	r3, r2
 8007778:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077a2:	f023 0303 	bic.w	r3, r3, #3
 80077a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077b6:	f023 0302 	bic.w	r3, r3, #2
 80077ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b085      	sub	sp, #20
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077e4:	f023 0303 	bic.w	r3, r3, #3
 80077e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077f8:	f043 0302 	orr.w	r3, r3, #2
 80077fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	695b      	ldr	r3, [r3, #20]
 8007818:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	4013      	ands	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007824:	68fb      	ldr	r3, [r7, #12]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007832:	b480      	push	{r7}
 8007834:	b085      	sub	sp, #20
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784e:	69db      	ldr	r3, [r3, #28]
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	4013      	ands	r3, r2
 8007854:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	0c1b      	lsrs	r3, r3, #16
}
 800785a:	4618      	mov	r0, r3
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007866:	b480      	push	{r7}
 8007868:	b085      	sub	sp, #20
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007882:	69db      	ldr	r3, [r3, #28]
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	4013      	ands	r3, r2
 8007888:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	b29b      	uxth	r3, r3
}
 800788e:	4618      	mov	r0, r3
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800789a:	b480      	push	{r7}
 800789c:	b085      	sub	sp, #20
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	460b      	mov	r3, r1
 80078a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80078aa:	78fb      	ldrb	r3, [r7, #3]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	4013      	ands	r3, r2
 80078c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078c8:	68bb      	ldr	r3, [r7, #8]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3714      	adds	r7, #20
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b087      	sub	sp, #28
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	460b      	mov	r3, r1
 80078e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80078fa:	78fb      	ldrb	r3, [r7, #3]
 80078fc:	f003 030f 	and.w	r3, r3, #15
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	fa22 f303 	lsr.w	r3, r2, r3
 8007906:	01db      	lsls	r3, r3, #7
 8007908:	b2db      	uxtb	r3, r3
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	4313      	orrs	r3, r2
 800790e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007910:	78fb      	ldrb	r3, [r7, #3]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	4413      	add	r3, r2
 8007918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	4013      	ands	r3, r2
 8007922:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007924:	68bb      	ldr	r3, [r7, #8]
}
 8007926:	4618      	mov	r0, r3
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007932:	b480      	push	{r7}
 8007934:	b083      	sub	sp, #12
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	f003 0301 	and.w	r3, r3, #1
}
 8007942:	4618      	mov	r0, r3
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800794e:	b480      	push	{r7}
 8007950:	b085      	sub	sp, #20
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007968:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800796c:	f023 0307 	bic.w	r3, r3, #7
 8007970:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007984:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3714      	adds	r7, #20
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007994:	b480      	push	{r7}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	460b      	mov	r3, r1
 800799e:	607a      	str	r2, [r7, #4]
 80079a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	333c      	adds	r3, #60	; 0x3c
 80079aa:	3304      	adds	r3, #4
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	4a26      	ldr	r2, [pc, #152]	; (8007a4c <USB_EP0_OutStart+0xb8>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d90a      	bls.n	80079ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079c8:	d101      	bne.n	80079ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	e037      	b.n	8007a3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d4:	461a      	mov	r2, r3
 80079d6:	2300      	movs	r3, #0
 80079d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079fc:	f043 0318 	orr.w	r3, r3, #24
 8007a00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007a14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007a16:	7afb      	ldrb	r3, [r7, #11]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d10f      	bne.n	8007a3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a22:	461a      	mov	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a36:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007a3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	371c      	adds	r7, #28
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	4f54300a 	.word	0x4f54300a

08007a50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	4a13      	ldr	r2, [pc, #76]	; (8007ab4 <USB_CoreReset+0x64>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d901      	bls.n	8007a6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e01b      	b.n	8007aa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	daf2      	bge.n	8007a5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	f043 0201 	orr.w	r2, r3, #1
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4a09      	ldr	r2, [pc, #36]	; (8007ab4 <USB_CoreReset+0x64>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d901      	bls.n	8007a98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e006      	b.n	8007aa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d0f0      	beq.n	8007a86 <USB_CoreReset+0x36>

  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3714      	adds	r7, #20
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	00030d40 	.word	0x00030d40

08007ab8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ac4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007ac8:	f002 fca2 	bl	800a410 <USBD_static_malloc>
 8007acc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d109      	bne.n	8007ae8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	32b0      	adds	r2, #176	; 0xb0
 8007ade:	2100      	movs	r1, #0
 8007ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	e0d4      	b.n	8007c92 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007ae8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007aec:	2100      	movs	r1, #0
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f002 fcfc 	bl	800a4ec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	32b0      	adds	r2, #176	; 0xb0
 8007afe:	68f9      	ldr	r1, [r7, #12]
 8007b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	32b0      	adds	r2, #176	; 0xb0
 8007b0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	7c1b      	ldrb	r3, [r3, #16]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d138      	bne.n	8007b92 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b20:	4b5e      	ldr	r3, [pc, #376]	; (8007c9c <USBD_CDC_Init+0x1e4>)
 8007b22:	7819      	ldrb	r1, [r3, #0]
 8007b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b28:	2202      	movs	r2, #2
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f002 fb4d 	bl	800a1ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b30:	4b5a      	ldr	r3, [pc, #360]	; (8007c9c <USBD_CDC_Init+0x1e4>)
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	f003 020f 	and.w	r2, r3, #15
 8007b38:	6879      	ldr	r1, [r7, #4]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	440b      	add	r3, r1
 8007b44:	3324      	adds	r3, #36	; 0x24
 8007b46:	2201      	movs	r2, #1
 8007b48:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b4a:	4b55      	ldr	r3, [pc, #340]	; (8007ca0 <USBD_CDC_Init+0x1e8>)
 8007b4c:	7819      	ldrb	r1, [r3, #0]
 8007b4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b52:	2202      	movs	r2, #2
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f002 fb38 	bl	800a1ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b5a:	4b51      	ldr	r3, [pc, #324]	; (8007ca0 <USBD_CDC_Init+0x1e8>)
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	f003 020f 	and.w	r2, r3, #15
 8007b62:	6879      	ldr	r1, [r7, #4]
 8007b64:	4613      	mov	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	440b      	add	r3, r1
 8007b6e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b72:	2201      	movs	r2, #1
 8007b74:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b76:	4b4b      	ldr	r3, [pc, #300]	; (8007ca4 <USBD_CDC_Init+0x1ec>)
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	f003 020f 	and.w	r2, r3, #15
 8007b7e:	6879      	ldr	r1, [r7, #4]
 8007b80:	4613      	mov	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	440b      	add	r3, r1
 8007b8a:	3326      	adds	r3, #38	; 0x26
 8007b8c:	2210      	movs	r2, #16
 8007b8e:	801a      	strh	r2, [r3, #0]
 8007b90:	e035      	b.n	8007bfe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b92:	4b42      	ldr	r3, [pc, #264]	; (8007c9c <USBD_CDC_Init+0x1e4>)
 8007b94:	7819      	ldrb	r1, [r3, #0]
 8007b96:	2340      	movs	r3, #64	; 0x40
 8007b98:	2202      	movs	r2, #2
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f002 fb15 	bl	800a1ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007ba0:	4b3e      	ldr	r3, [pc, #248]	; (8007c9c <USBD_CDC_Init+0x1e4>)
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	f003 020f 	and.w	r2, r3, #15
 8007ba8:	6879      	ldr	r1, [r7, #4]
 8007baa:	4613      	mov	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	440b      	add	r3, r1
 8007bb4:	3324      	adds	r3, #36	; 0x24
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007bba:	4b39      	ldr	r3, [pc, #228]	; (8007ca0 <USBD_CDC_Init+0x1e8>)
 8007bbc:	7819      	ldrb	r1, [r3, #0]
 8007bbe:	2340      	movs	r3, #64	; 0x40
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f002 fb01 	bl	800a1ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007bc8:	4b35      	ldr	r3, [pc, #212]	; (8007ca0 <USBD_CDC_Init+0x1e8>)
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	f003 020f 	and.w	r2, r3, #15
 8007bd0:	6879      	ldr	r1, [r7, #4]
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	440b      	add	r3, r1
 8007bdc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007be0:	2201      	movs	r2, #1
 8007be2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007be4:	4b2f      	ldr	r3, [pc, #188]	; (8007ca4 <USBD_CDC_Init+0x1ec>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	f003 020f 	and.w	r2, r3, #15
 8007bec:	6879      	ldr	r1, [r7, #4]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	440b      	add	r3, r1
 8007bf8:	3326      	adds	r3, #38	; 0x26
 8007bfa:	2210      	movs	r2, #16
 8007bfc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007bfe:	4b29      	ldr	r3, [pc, #164]	; (8007ca4 <USBD_CDC_Init+0x1ec>)
 8007c00:	7819      	ldrb	r1, [r3, #0]
 8007c02:	2308      	movs	r3, #8
 8007c04:	2203      	movs	r2, #3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f002 fadf 	bl	800a1ca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007c0c:	4b25      	ldr	r3, [pc, #148]	; (8007ca4 <USBD_CDC_Init+0x1ec>)
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	f003 020f 	and.w	r2, r3, #15
 8007c14:	6879      	ldr	r1, [r7, #4]
 8007c16:	4613      	mov	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4413      	add	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	440b      	add	r3, r1
 8007c20:	3324      	adds	r3, #36	; 0x24
 8007c22:	2201      	movs	r2, #1
 8007c24:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	33b0      	adds	r3, #176	; 0xb0
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d101      	bne.n	8007c60 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	e018      	b.n	8007c92 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	7c1b      	ldrb	r3, [r3, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10a      	bne.n	8007c7e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c68:	4b0d      	ldr	r3, [pc, #52]	; (8007ca0 <USBD_CDC_Init+0x1e8>)
 8007c6a:	7819      	ldrb	r1, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f002 fb96 	bl	800a3a8 <USBD_LL_PrepareReceive>
 8007c7c:	e008      	b.n	8007c90 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c7e:	4b08      	ldr	r3, [pc, #32]	; (8007ca0 <USBD_CDC_Init+0x1e8>)
 8007c80:	7819      	ldrb	r1, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c88:	2340      	movs	r3, #64	; 0x40
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f002 fb8c 	bl	800a3a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	20000097 	.word	0x20000097
 8007ca0:	20000098 	.word	0x20000098
 8007ca4:	20000099 	.word	0x20000099

08007ca8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007cb4:	4b3a      	ldr	r3, [pc, #232]	; (8007da0 <USBD_CDC_DeInit+0xf8>)
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f002 faab 	bl	800a216 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007cc0:	4b37      	ldr	r3, [pc, #220]	; (8007da0 <USBD_CDC_DeInit+0xf8>)
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	f003 020f 	and.w	r2, r3, #15
 8007cc8:	6879      	ldr	r1, [r7, #4]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	440b      	add	r3, r1
 8007cd4:	3324      	adds	r3, #36	; 0x24
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007cda:	4b32      	ldr	r3, [pc, #200]	; (8007da4 <USBD_CDC_DeInit+0xfc>)
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f002 fa98 	bl	800a216 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007ce6:	4b2f      	ldr	r3, [pc, #188]	; (8007da4 <USBD_CDC_DeInit+0xfc>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	f003 020f 	and.w	r2, r3, #15
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	440b      	add	r3, r1
 8007cfa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007cfe:	2200      	movs	r2, #0
 8007d00:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007d02:	4b29      	ldr	r3, [pc, #164]	; (8007da8 <USBD_CDC_DeInit+0x100>)
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f002 fa84 	bl	800a216 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007d0e:	4b26      	ldr	r3, [pc, #152]	; (8007da8 <USBD_CDC_DeInit+0x100>)
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	f003 020f 	and.w	r2, r3, #15
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4413      	add	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	440b      	add	r3, r1
 8007d22:	3324      	adds	r3, #36	; 0x24
 8007d24:	2200      	movs	r2, #0
 8007d26:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007d28:	4b1f      	ldr	r3, [pc, #124]	; (8007da8 <USBD_CDC_DeInit+0x100>)
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	f003 020f 	and.w	r2, r3, #15
 8007d30:	6879      	ldr	r1, [r7, #4]
 8007d32:	4613      	mov	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4413      	add	r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	440b      	add	r3, r1
 8007d3c:	3326      	adds	r3, #38	; 0x26
 8007d3e:	2200      	movs	r2, #0
 8007d40:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	32b0      	adds	r2, #176	; 0xb0
 8007d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d01f      	beq.n	8007d94 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	33b0      	adds	r3, #176	; 0xb0
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	32b0      	adds	r2, #176	; 0xb0
 8007d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f002 fb58 	bl	800a42c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	32b0      	adds	r2, #176	; 0xb0
 8007d86:	2100      	movs	r1, #0
 8007d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	20000097 	.word	0x20000097
 8007da4:	20000098 	.word	0x20000098
 8007da8:	20000099 	.word	0x20000099

08007dac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b086      	sub	sp, #24
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	32b0      	adds	r2, #176	; 0xb0
 8007dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d101      	bne.n	8007ddc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e0bf      	b.n	8007f5c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d050      	beq.n	8007e8a <USBD_CDC_Setup+0xde>
 8007de8:	2b20      	cmp	r3, #32
 8007dea:	f040 80af 	bne.w	8007f4c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	88db      	ldrh	r3, [r3, #6]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d03a      	beq.n	8007e6c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	b25b      	sxtb	r3, r3
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	da1b      	bge.n	8007e38 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	33b0      	adds	r3, #176	; 0xb0
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4413      	add	r3, r2
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007e16:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	88d2      	ldrh	r2, [r2, #6]
 8007e1c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	88db      	ldrh	r3, [r3, #6]
 8007e22:	2b07      	cmp	r3, #7
 8007e24:	bf28      	it	cs
 8007e26:	2307      	movcs	r3, #7
 8007e28:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	89fa      	ldrh	r2, [r7, #14]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 fd89 	bl	8009948 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007e36:	e090      	b.n	8007f5a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	785a      	ldrb	r2, [r3, #1]
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	88db      	ldrh	r3, [r3, #6]
 8007e46:	2b3f      	cmp	r3, #63	; 0x3f
 8007e48:	d803      	bhi.n	8007e52 <USBD_CDC_Setup+0xa6>
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	88db      	ldrh	r3, [r3, #6]
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	e000      	b.n	8007e54 <USBD_CDC_Setup+0xa8>
 8007e52:	2240      	movs	r2, #64	; 0x40
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007e5a:	6939      	ldr	r1, [r7, #16]
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007e62:	461a      	mov	r2, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f001 fd9b 	bl	80099a0 <USBD_CtlPrepareRx>
      break;
 8007e6a:	e076      	b.n	8007f5a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	33b0      	adds	r3, #176	; 0xb0
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	683a      	ldr	r2, [r7, #0]
 8007e80:	7850      	ldrb	r0, [r2, #1]
 8007e82:	2200      	movs	r2, #0
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	4798      	blx	r3
      break;
 8007e88:	e067      	b.n	8007f5a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	785b      	ldrb	r3, [r3, #1]
 8007e8e:	2b0b      	cmp	r3, #11
 8007e90:	d851      	bhi.n	8007f36 <USBD_CDC_Setup+0x18a>
 8007e92:	a201      	add	r2, pc, #4	; (adr r2, 8007e98 <USBD_CDC_Setup+0xec>)
 8007e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e98:	08007ec9 	.word	0x08007ec9
 8007e9c:	08007f45 	.word	0x08007f45
 8007ea0:	08007f37 	.word	0x08007f37
 8007ea4:	08007f37 	.word	0x08007f37
 8007ea8:	08007f37 	.word	0x08007f37
 8007eac:	08007f37 	.word	0x08007f37
 8007eb0:	08007f37 	.word	0x08007f37
 8007eb4:	08007f37 	.word	0x08007f37
 8007eb8:	08007f37 	.word	0x08007f37
 8007ebc:	08007f37 	.word	0x08007f37
 8007ec0:	08007ef3 	.word	0x08007ef3
 8007ec4:	08007f1d 	.word	0x08007f1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b03      	cmp	r3, #3
 8007ed2:	d107      	bne.n	8007ee4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ed4:	f107 030a 	add.w	r3, r7, #10
 8007ed8:	2202      	movs	r2, #2
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f001 fd33 	bl	8009948 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ee2:	e032      	b.n	8007f4a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f001 fcbd 	bl	8009866 <USBD_CtlError>
            ret = USBD_FAIL;
 8007eec:	2303      	movs	r3, #3
 8007eee:	75fb      	strb	r3, [r7, #23]
          break;
 8007ef0:	e02b      	b.n	8007f4a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d107      	bne.n	8007f0e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007efe:	f107 030d 	add.w	r3, r7, #13
 8007f02:	2201      	movs	r2, #1
 8007f04:	4619      	mov	r1, r3
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f001 fd1e 	bl	8009948 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f0c:	e01d      	b.n	8007f4a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f0e:	6839      	ldr	r1, [r7, #0]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f001 fca8 	bl	8009866 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f16:	2303      	movs	r3, #3
 8007f18:	75fb      	strb	r3, [r7, #23]
          break;
 8007f1a:	e016      	b.n	8007f4a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d00f      	beq.n	8007f48 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f001 fc9b 	bl	8009866 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f30:	2303      	movs	r3, #3
 8007f32:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f34:	e008      	b.n	8007f48 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f36:	6839      	ldr	r1, [r7, #0]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f001 fc94 	bl	8009866 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	75fb      	strb	r3, [r7, #23]
          break;
 8007f42:	e002      	b.n	8007f4a <USBD_CDC_Setup+0x19e>
          break;
 8007f44:	bf00      	nop
 8007f46:	e008      	b.n	8007f5a <USBD_CDC_Setup+0x1ae>
          break;
 8007f48:	bf00      	nop
      }
      break;
 8007f4a:	e006      	b.n	8007f5a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f001 fc89 	bl	8009866 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f54:	2303      	movs	r3, #3
 8007f56:	75fb      	strb	r3, [r7, #23]
      break;
 8007f58:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	32b0      	adds	r2, #176	; 0xb0
 8007f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e065      	b.n	800805a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	32b0      	adds	r2, #176	; 0xb0
 8007f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f9e:	78fb      	ldrb	r3, [r7, #3]
 8007fa0:	f003 020f 	and.w	r2, r3, #15
 8007fa4:	6879      	ldr	r1, [r7, #4]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	440b      	add	r3, r1
 8007fb0:	3318      	adds	r3, #24
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d02f      	beq.n	8008018 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007fb8:	78fb      	ldrb	r3, [r7, #3]
 8007fba:	f003 020f 	and.w	r2, r3, #15
 8007fbe:	6879      	ldr	r1, [r7, #4]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4413      	add	r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	440b      	add	r3, r1
 8007fca:	3318      	adds	r3, #24
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	78fb      	ldrb	r3, [r7, #3]
 8007fd0:	f003 010f 	and.w	r1, r3, #15
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	00db      	lsls	r3, r3, #3
 8007fda:	440b      	add	r3, r1
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4403      	add	r3, r0
 8007fe0:	3348      	adds	r3, #72	; 0x48
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	fbb2 f1f3 	udiv	r1, r2, r3
 8007fe8:	fb01 f303 	mul.w	r3, r1, r3
 8007fec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d112      	bne.n	8008018 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007ff2:	78fb      	ldrb	r3, [r7, #3]
 8007ff4:	f003 020f 	and.w	r2, r3, #15
 8007ff8:	6879      	ldr	r1, [r7, #4]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	440b      	add	r3, r1
 8008004:	3318      	adds	r3, #24
 8008006:	2200      	movs	r2, #0
 8008008:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800800a:	78f9      	ldrb	r1, [r7, #3]
 800800c:	2300      	movs	r3, #0
 800800e:	2200      	movs	r2, #0
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f002 f9a8 	bl	800a366 <USBD_LL_Transmit>
 8008016:	e01f      	b.n	8008058 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	2200      	movs	r2, #0
 800801c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	33b0      	adds	r3, #176	; 0xb0
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d010      	beq.n	8008058 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	33b0      	adds	r3, #176	; 0xb0
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008054:	78fa      	ldrb	r2, [r7, #3]
 8008056:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	460b      	mov	r3, r1
 800806c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	32b0      	adds	r2, #176	; 0xb0
 8008078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800807c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	32b0      	adds	r2, #176	; 0xb0
 8008088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008090:	2303      	movs	r3, #3
 8008092:	e01a      	b.n	80080ca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008094:	78fb      	ldrb	r3, [r7, #3]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f002 f9a6 	bl	800a3ea <USBD_LL_GetRxDataSize>
 800809e:	4602      	mov	r2, r0
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	33b0      	adds	r3, #176	; 0xb0
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80080c4:	4611      	mov	r1, r2
 80080c6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b084      	sub	sp, #16
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	32b0      	adds	r2, #176	; 0xb0
 80080e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e025      	b.n	8008140 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	33b0      	adds	r3, #176	; 0xb0
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d01a      	beq.n	800813e <USBD_CDC_EP0_RxReady+0x6c>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800810e:	2bff      	cmp	r3, #255	; 0xff
 8008110:	d015      	beq.n	800813e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	33b0      	adds	r3, #176	; 0xb0
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800812a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008132:	b292      	uxth	r2, r2
 8008134:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	22ff      	movs	r2, #255	; 0xff
 800813a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008150:	2182      	movs	r1, #130	; 0x82
 8008152:	4818      	ldr	r0, [pc, #96]	; (80081b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008154:	f000 fd4f 	bl	8008bf6 <USBD_GetEpDesc>
 8008158:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800815a:	2101      	movs	r1, #1
 800815c:	4815      	ldr	r0, [pc, #84]	; (80081b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800815e:	f000 fd4a 	bl	8008bf6 <USBD_GetEpDesc>
 8008162:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008164:	2181      	movs	r1, #129	; 0x81
 8008166:	4813      	ldr	r0, [pc, #76]	; (80081b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008168:	f000 fd45 	bl	8008bf6 <USBD_GetEpDesc>
 800816c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	2210      	movs	r2, #16
 8008178:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d006      	beq.n	800818e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	2200      	movs	r2, #0
 8008184:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008188:	711a      	strb	r2, [r3, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d006      	beq.n	80081a2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800819c:	711a      	strb	r2, [r3, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2243      	movs	r2, #67	; 0x43
 80081a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081a8:	4b02      	ldr	r3, [pc, #8]	; (80081b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3718      	adds	r7, #24
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	20000054 	.word	0x20000054

080081b8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80081c0:	2182      	movs	r1, #130	; 0x82
 80081c2:	4818      	ldr	r0, [pc, #96]	; (8008224 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081c4:	f000 fd17 	bl	8008bf6 <USBD_GetEpDesc>
 80081c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081ca:	2101      	movs	r1, #1
 80081cc:	4815      	ldr	r0, [pc, #84]	; (8008224 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081ce:	f000 fd12 	bl	8008bf6 <USBD_GetEpDesc>
 80081d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081d4:	2181      	movs	r1, #129	; 0x81
 80081d6:	4813      	ldr	r0, [pc, #76]	; (8008224 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081d8:	f000 fd0d 	bl	8008bf6 <USBD_GetEpDesc>
 80081dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d002      	beq.n	80081ea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	2210      	movs	r2, #16
 80081e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d006      	beq.n	80081fe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	2200      	movs	r2, #0
 80081f4:	711a      	strb	r2, [r3, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f042 0202 	orr.w	r2, r2, #2
 80081fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d006      	beq.n	8008212 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	711a      	strb	r2, [r3, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f042 0202 	orr.w	r2, r2, #2
 8008210:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2243      	movs	r2, #67	; 0x43
 8008216:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008218:	4b02      	ldr	r3, [pc, #8]	; (8008224 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800821a:	4618      	mov	r0, r3
 800821c:	3718      	adds	r7, #24
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	20000054 	.word	0x20000054

08008228 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008230:	2182      	movs	r1, #130	; 0x82
 8008232:	4818      	ldr	r0, [pc, #96]	; (8008294 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008234:	f000 fcdf 	bl	8008bf6 <USBD_GetEpDesc>
 8008238:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800823a:	2101      	movs	r1, #1
 800823c:	4815      	ldr	r0, [pc, #84]	; (8008294 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800823e:	f000 fcda 	bl	8008bf6 <USBD_GetEpDesc>
 8008242:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008244:	2181      	movs	r1, #129	; 0x81
 8008246:	4813      	ldr	r0, [pc, #76]	; (8008294 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008248:	f000 fcd5 	bl	8008bf6 <USBD_GetEpDesc>
 800824c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	2210      	movs	r2, #16
 8008258:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d006      	beq.n	800826e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	2200      	movs	r2, #0
 8008264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008268:	711a      	strb	r2, [r3, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d006      	beq.n	8008282 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800827c:	711a      	strb	r2, [r3, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2243      	movs	r2, #67	; 0x43
 8008286:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008288:	4b02      	ldr	r3, [pc, #8]	; (8008294 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800828a:	4618      	mov	r0, r3
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	20000054 	.word	0x20000054

08008298 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	220a      	movs	r2, #10
 80082a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80082a6:	4b03      	ldr	r3, [pc, #12]	; (80082b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	20000010 	.word	0x20000010

080082b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d101      	bne.n	80082cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e009      	b.n	80082e0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	33b0      	adds	r3, #176	; 0xb0
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4413      	add	r3, r2
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	32b0      	adds	r2, #176	; 0xb0
 8008302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008306:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800830e:	2303      	movs	r3, #3
 8008310:	e008      	b.n	8008324 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	371c      	adds	r7, #28
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	32b0      	adds	r2, #176	; 0xb0
 8008344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008348:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d101      	bne.n	8008354 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008350:	2303      	movs	r3, #3
 8008352:	e004      	b.n	800835e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
	...

0800836c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	32b0      	adds	r2, #176	; 0xb0
 800837e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008382:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008384:	2301      	movs	r3, #1
 8008386:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	32b0      	adds	r2, #176	; 0xb0
 8008392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d101      	bne.n	800839e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800839a:	2303      	movs	r3, #3
 800839c:	e025      	b.n	80083ea <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d11f      	bne.n	80083e8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80083b0:	4b10      	ldr	r3, [pc, #64]	; (80083f4 <USBD_CDC_TransmitPacket+0x88>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	f003 020f 	and.w	r2, r3, #15
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	4613      	mov	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4403      	add	r3, r0
 80083ca:	3318      	adds	r3, #24
 80083cc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80083ce:	4b09      	ldr	r3, [pc, #36]	; (80083f4 <USBD_CDC_TransmitPacket+0x88>)
 80083d0:	7819      	ldrb	r1, [r3, #0]
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f001 ffc1 	bl	800a366 <USBD_LL_Transmit>

    ret = USBD_OK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	20000097 	.word	0x20000097

080083f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	32b0      	adds	r2, #176	; 0xb0
 800840a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800840e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	32b0      	adds	r2, #176	; 0xb0
 800841a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008422:	2303      	movs	r3, #3
 8008424:	e018      	b.n	8008458 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	7c1b      	ldrb	r3, [r3, #16]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10a      	bne.n	8008444 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800842e:	4b0c      	ldr	r3, [pc, #48]	; (8008460 <USBD_CDC_ReceivePacket+0x68>)
 8008430:	7819      	ldrb	r1, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f001 ffb3 	bl	800a3a8 <USBD_LL_PrepareReceive>
 8008442:	e008      	b.n	8008456 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008444:	4b06      	ldr	r3, [pc, #24]	; (8008460 <USBD_CDC_ReceivePacket+0x68>)
 8008446:	7819      	ldrb	r1, [r3, #0]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800844e:	2340      	movs	r3, #64	; 0x40
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 ffa9 	bl	800a3a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	20000098 	.word	0x20000098

08008464 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	4613      	mov	r3, r2
 8008470:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008478:	2303      	movs	r3, #3
 800847a:	e01f      	b.n	80084bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d003      	beq.n	80084a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	79fa      	ldrb	r2, [r7, #7]
 80084ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f001 fe23 	bl	800a0fc <USBD_LL_Init>
 80084b6:	4603      	mov	r3, r0
 80084b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084ce:	2300      	movs	r3, #0
 80084d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d101      	bne.n	80084dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80084d8:	2303      	movs	r3, #3
 80084da:	e025      	b.n	8008528 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	32ae      	adds	r2, #174	; 0xae
 80084ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00f      	beq.n	8008518 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	32ae      	adds	r2, #174	; 0xae
 8008502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008508:	f107 020e 	add.w	r2, r7, #14
 800850c:	4610      	mov	r0, r2
 800850e:	4798      	blx	r3
 8008510:	4602      	mov	r2, r0
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800851e:	1c5a      	adds	r2, r3, #1
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f001 fe2b 	bl	800a194 <USBD_LL_Start>
 800853e:	4603      	mov	r3, r0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008550:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008552:	4618      	mov	r0, r3
 8008554:	370c      	adds	r7, #12
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr

0800855e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b084      	sub	sp, #16
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	460b      	mov	r3, r1
 8008568:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008574:	2b00      	cmp	r3, #0
 8008576:	d009      	beq.n	800858c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	78fa      	ldrb	r2, [r7, #3]
 8008582:	4611      	mov	r1, r2
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	4798      	blx	r3
 8008588:	4603      	mov	r3, r0
 800858a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800858c:	7bfb      	ldrb	r3, [r7, #15]
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b084      	sub	sp, #16
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	460b      	mov	r3, r1
 80085a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	78fa      	ldrb	r2, [r7, #3]
 80085b0:	4611      	mov	r1, r2
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	4798      	blx	r3
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80085bc:	2303      	movs	r3, #3
 80085be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b084      	sub	sp, #16
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	4618      	mov	r0, r3
 80085de:	f001 f908 	bl	80097f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80085f0:	461a      	mov	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80085fe:	f003 031f 	and.w	r3, r3, #31
 8008602:	2b02      	cmp	r3, #2
 8008604:	d01a      	beq.n	800863c <USBD_LL_SetupStage+0x72>
 8008606:	2b02      	cmp	r3, #2
 8008608:	d822      	bhi.n	8008650 <USBD_LL_SetupStage+0x86>
 800860a:	2b00      	cmp	r3, #0
 800860c:	d002      	beq.n	8008614 <USBD_LL_SetupStage+0x4a>
 800860e:	2b01      	cmp	r3, #1
 8008610:	d00a      	beq.n	8008628 <USBD_LL_SetupStage+0x5e>
 8008612:	e01d      	b.n	8008650 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fb5f 	bl	8008ce0 <USBD_StdDevReq>
 8008622:	4603      	mov	r3, r0
 8008624:	73fb      	strb	r3, [r7, #15]
      break;
 8008626:	e020      	b.n	800866a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fbc7 	bl	8008dc4 <USBD_StdItfReq>
 8008636:	4603      	mov	r3, r0
 8008638:	73fb      	strb	r3, [r7, #15]
      break;
 800863a:	e016      	b.n	800866a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fc29 	bl	8008e9c <USBD_StdEPReq>
 800864a:	4603      	mov	r3, r0
 800864c:	73fb      	strb	r3, [r7, #15]
      break;
 800864e:	e00c      	b.n	800866a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008656:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800865a:	b2db      	uxtb	r3, r3
 800865c:	4619      	mov	r1, r3
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f001 fdf8 	bl	800a254 <USBD_LL_StallEP>
 8008664:	4603      	mov	r3, r0
 8008666:	73fb      	strb	r3, [r7, #15]
      break;
 8008668:	bf00      	nop
  }

  return ret;
 800866a:	7bfb      	ldrb	r3, [r7, #15]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	460b      	mov	r3, r1
 800867e:	607a      	str	r2, [r7, #4]
 8008680:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008686:	7afb      	ldrb	r3, [r7, #11]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d16e      	bne.n	800876a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008692:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800869a:	2b03      	cmp	r3, #3
 800869c:	f040 8098 	bne.w	80087d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	689a      	ldr	r2, [r3, #8]
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d913      	bls.n	80086d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	689a      	ldr	r2, [r3, #8]
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	1ad2      	subs	r2, r2, r3
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	68da      	ldr	r2, [r3, #12]
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	4293      	cmp	r3, r2
 80086c4:	bf28      	it	cs
 80086c6:	4613      	movcs	r3, r2
 80086c8:	461a      	mov	r2, r3
 80086ca:	6879      	ldr	r1, [r7, #4]
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f001 f984 	bl	80099da <USBD_CtlContinueRx>
 80086d2:	e07d      	b.n	80087d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086da:	f003 031f 	and.w	r3, r3, #31
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d014      	beq.n	800870c <USBD_LL_DataOutStage+0x98>
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d81d      	bhi.n	8008722 <USBD_LL_DataOutStage+0xae>
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d002      	beq.n	80086f0 <USBD_LL_DataOutStage+0x7c>
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d003      	beq.n	80086f6 <USBD_LL_DataOutStage+0x82>
 80086ee:	e018      	b.n	8008722 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80086f0:	2300      	movs	r3, #0
 80086f2:	75bb      	strb	r3, [r7, #22]
            break;
 80086f4:	e018      	b.n	8008728 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	4619      	mov	r1, r3
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 fa5e 	bl	8008bc2 <USBD_CoreFindIF>
 8008706:	4603      	mov	r3, r0
 8008708:	75bb      	strb	r3, [r7, #22]
            break;
 800870a:	e00d      	b.n	8008728 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008712:	b2db      	uxtb	r3, r3
 8008714:	4619      	mov	r1, r3
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f000 fa60 	bl	8008bdc <USBD_CoreFindEP>
 800871c:	4603      	mov	r3, r0
 800871e:	75bb      	strb	r3, [r7, #22]
            break;
 8008720:	e002      	b.n	8008728 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008722:	2300      	movs	r3, #0
 8008724:	75bb      	strb	r3, [r7, #22]
            break;
 8008726:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008728:	7dbb      	ldrb	r3, [r7, #22]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d119      	bne.n	8008762 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b03      	cmp	r3, #3
 8008738:	d113      	bne.n	8008762 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800873a:	7dba      	ldrb	r2, [r7, #22]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	32ae      	adds	r2, #174	; 0xae
 8008740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00b      	beq.n	8008762 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800874a:	7dba      	ldrb	r2, [r7, #22]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008752:	7dba      	ldrb	r2, [r7, #22]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	32ae      	adds	r2, #174	; 0xae
 8008758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f001 f94a 	bl	80099fc <USBD_CtlSendStatus>
 8008768:	e032      	b.n	80087d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800876a:	7afb      	ldrb	r3, [r7, #11]
 800876c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008770:	b2db      	uxtb	r3, r3
 8008772:	4619      	mov	r1, r3
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 fa31 	bl	8008bdc <USBD_CoreFindEP>
 800877a:	4603      	mov	r3, r0
 800877c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800877e:	7dbb      	ldrb	r3, [r7, #22]
 8008780:	2bff      	cmp	r3, #255	; 0xff
 8008782:	d025      	beq.n	80087d0 <USBD_LL_DataOutStage+0x15c>
 8008784:	7dbb      	ldrb	r3, [r7, #22]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d122      	bne.n	80087d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008790:	b2db      	uxtb	r3, r3
 8008792:	2b03      	cmp	r3, #3
 8008794:	d117      	bne.n	80087c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008796:	7dba      	ldrb	r2, [r7, #22]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	32ae      	adds	r2, #174	; 0xae
 800879c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00f      	beq.n	80087c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80087a6:	7dba      	ldrb	r2, [r7, #22]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80087ae:	7dba      	ldrb	r2, [r7, #22]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	32ae      	adds	r2, #174	; 0xae
 80087b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	7afa      	ldrb	r2, [r7, #11]
 80087bc:	4611      	mov	r1, r2
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	4798      	blx	r3
 80087c2:	4603      	mov	r3, r0
 80087c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80087c6:	7dfb      	ldrb	r3, [r7, #23]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d001      	beq.n	80087d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80087cc:	7dfb      	ldrb	r3, [r7, #23]
 80087ce:	e000      	b.n	80087d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3718      	adds	r7, #24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b086      	sub	sp, #24
 80087de:	af00      	add	r7, sp, #0
 80087e0:	60f8      	str	r0, [r7, #12]
 80087e2:	460b      	mov	r3, r1
 80087e4:	607a      	str	r2, [r7, #4]
 80087e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80087e8:	7afb      	ldrb	r3, [r7, #11]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d16f      	bne.n	80088ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3314      	adds	r3, #20
 80087f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d15a      	bne.n	80088b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	689a      	ldr	r2, [r3, #8]
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	429a      	cmp	r2, r3
 8008808:	d914      	bls.n	8008834 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	689a      	ldr	r2, [r3, #8]
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	1ad2      	subs	r2, r2, r3
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	461a      	mov	r2, r3
 800881e:	6879      	ldr	r1, [r7, #4]
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f001 f8ac 	bl	800997e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008826:	2300      	movs	r3, #0
 8008828:	2200      	movs	r2, #0
 800882a:	2100      	movs	r1, #0
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f001 fdbb 	bl	800a3a8 <USBD_LL_PrepareReceive>
 8008832:	e03f      	b.n	80088b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	68da      	ldr	r2, [r3, #12]
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	429a      	cmp	r2, r3
 800883e:	d11c      	bne.n	800887a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	685a      	ldr	r2, [r3, #4]
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008848:	429a      	cmp	r2, r3
 800884a:	d316      	bcc.n	800887a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008856:	429a      	cmp	r2, r3
 8008858:	d20f      	bcs.n	800887a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800885a:	2200      	movs	r2, #0
 800885c:	2100      	movs	r1, #0
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f001 f88d 	bl	800997e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800886c:	2300      	movs	r3, #0
 800886e:	2200      	movs	r2, #0
 8008870:	2100      	movs	r1, #0
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f001 fd98 	bl	800a3a8 <USBD_LL_PrepareReceive>
 8008878:	e01c      	b.n	80088b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b03      	cmp	r3, #3
 8008884:	d10f      	bne.n	80088a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d009      	beq.n	80088a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088a6:	2180      	movs	r1, #128	; 0x80
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f001 fcd3 	bl	800a254 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	f001 f8b7 	bl	8009a22 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d03a      	beq.n	8008934 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f7ff fe42 	bl	8008548 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80088cc:	e032      	b.n	8008934 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80088ce:	7afb      	ldrb	r3, [r7, #11]
 80088d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	4619      	mov	r1, r3
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 f97f 	bl	8008bdc <USBD_CoreFindEP>
 80088de:	4603      	mov	r3, r0
 80088e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	2bff      	cmp	r3, #255	; 0xff
 80088e6:	d025      	beq.n	8008934 <USBD_LL_DataInStage+0x15a>
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d122      	bne.n	8008934 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b03      	cmp	r3, #3
 80088f8:	d11c      	bne.n	8008934 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80088fa:	7dfa      	ldrb	r2, [r7, #23]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	32ae      	adds	r2, #174	; 0xae
 8008900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008904:	695b      	ldr	r3, [r3, #20]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d014      	beq.n	8008934 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800890a:	7dfa      	ldrb	r2, [r7, #23]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008912:	7dfa      	ldrb	r2, [r7, #23]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	32ae      	adds	r2, #174	; 0xae
 8008918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	7afa      	ldrb	r2, [r7, #11]
 8008920:	4611      	mov	r1, r2
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	4798      	blx	r3
 8008926:	4603      	mov	r3, r0
 8008928:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800892a:	7dbb      	ldrb	r3, [r7, #22]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008930:	7dbb      	ldrb	r3, [r7, #22]
 8008932:	e000      	b.n	8008936 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3718      	adds	r7, #24
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b084      	sub	sp, #16
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008976:	2b00      	cmp	r3, #0
 8008978:	d014      	beq.n	80089a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00e      	beq.n	80089a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	6852      	ldr	r2, [r2, #4]
 8008992:	b2d2      	uxtb	r2, r2
 8008994:	4611      	mov	r1, r2
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	4798      	blx	r3
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80089a0:	2303      	movs	r3, #3
 80089a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089a4:	2340      	movs	r3, #64	; 0x40
 80089a6:	2200      	movs	r2, #0
 80089a8:	2100      	movs	r1, #0
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f001 fc0d 	bl	800a1ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2240      	movs	r2, #64	; 0x40
 80089bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089c0:	2340      	movs	r3, #64	; 0x40
 80089c2:	2200      	movs	r2, #0
 80089c4:	2180      	movs	r1, #128	; 0x80
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f001 fbff 	bl	800a1ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2240      	movs	r2, #64	; 0x40
 80089d6:	621a      	str	r2, [r3, #32]

  return ret;
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b083      	sub	sp, #12
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	460b      	mov	r3, r1
 80089ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	78fa      	ldrb	r2, [r7, #3]
 80089f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b083      	sub	sp, #12
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a10:	b2da      	uxtb	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2204      	movs	r2, #4
 8008a1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b083      	sub	sp, #12
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b04      	cmp	r3, #4
 8008a40:	d106      	bne.n	8008a50 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b082      	sub	sp, #8
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b03      	cmp	r3, #3
 8008a70:	d110      	bne.n	8008a94 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00b      	beq.n	8008a94 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a82:	69db      	ldr	r3, [r3, #28]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d005      	beq.n	8008a94 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a8e:	69db      	ldr	r3, [r3, #28]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b082      	sub	sp, #8
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	32ae      	adds	r2, #174	; 0xae
 8008ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d101      	bne.n	8008ac0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e01c      	b.n	8008afa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b03      	cmp	r3, #3
 8008aca:	d115      	bne.n	8008af8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	32ae      	adds	r2, #174	; 0xae
 8008ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ada:	6a1b      	ldr	r3, [r3, #32]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00b      	beq.n	8008af8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	32ae      	adds	r2, #174	; 0xae
 8008aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aee:	6a1b      	ldr	r3, [r3, #32]
 8008af0:	78fa      	ldrb	r2, [r7, #3]
 8008af2:	4611      	mov	r1, r2
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b082      	sub	sp, #8
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	32ae      	adds	r2, #174	; 0xae
 8008b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d101      	bne.n	8008b24 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e01c      	b.n	8008b5e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d115      	bne.n	8008b5c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	32ae      	adds	r2, #174	; 0xae
 8008b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00b      	beq.n	8008b5c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	32ae      	adds	r2, #174	; 0xae
 8008b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b54:	78fa      	ldrb	r2, [r7, #3]
 8008b56:	4611      	mov	r1, r2
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b083      	sub	sp, #12
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00e      	beq.n	8008bb8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	6852      	ldr	r2, [r2, #4]
 8008ba6:	b2d2      	uxtb	r2, r2
 8008ba8:	4611      	mov	r1, r2
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	4798      	blx	r3
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b083      	sub	sp, #12
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	460b      	mov	r3, r1
 8008bcc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008bce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	460b      	mov	r3, r1
 8008be6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008be8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr

08008bf6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b086      	sub	sp, #24
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	460b      	mov	r3, r1
 8008c00:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	885b      	ldrh	r3, [r3, #2]
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d920      	bls.n	8008c60 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008c26:	e013      	b.n	8008c50 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008c28:	f107 030a 	add.w	r3, r7, #10
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6978      	ldr	r0, [r7, #20]
 8008c30:	f000 f81b 	bl	8008c6a <USBD_GetNextDesc>
 8008c34:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	785b      	ldrb	r3, [r3, #1]
 8008c3a:	2b05      	cmp	r3, #5
 8008c3c:	d108      	bne.n	8008c50 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	789b      	ldrb	r3, [r3, #2]
 8008c46:	78fa      	ldrb	r2, [r7, #3]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d008      	beq.n	8008c5e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	885b      	ldrh	r3, [r3, #2]
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	897b      	ldrh	r3, [r7, #10]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d8e5      	bhi.n	8008c28 <USBD_GetEpDesc+0x32>
 8008c5c:	e000      	b.n	8008c60 <USBD_GetEpDesc+0x6a>
          break;
 8008c5e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008c60:	693b      	ldr	r3, [r7, #16]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3718      	adds	r7, #24
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b085      	sub	sp, #20
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	881a      	ldrh	r2, [r3, #0]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	4413      	add	r3, r2
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4413      	add	r3, r2
 8008c94:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008c96:	68fb      	ldr	r3, [r7, #12]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b087      	sub	sp, #28
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008cc2:	8a3b      	ldrh	r3, [r7, #16]
 8008cc4:	021b      	lsls	r3, r3, #8
 8008cc6:	b21a      	sxth	r2, r3
 8008cc8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	b21b      	sxth	r3, r3
 8008cd0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008cd2:	89fb      	ldrh	r3, [r7, #14]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	371c      	adds	r7, #28
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cea:	2300      	movs	r3, #0
 8008cec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cf6:	2b40      	cmp	r3, #64	; 0x40
 8008cf8:	d005      	beq.n	8008d06 <USBD_StdDevReq+0x26>
 8008cfa:	2b40      	cmp	r3, #64	; 0x40
 8008cfc:	d857      	bhi.n	8008dae <USBD_StdDevReq+0xce>
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00f      	beq.n	8008d22 <USBD_StdDevReq+0x42>
 8008d02:	2b20      	cmp	r3, #32
 8008d04:	d153      	bne.n	8008dae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	32ae      	adds	r2, #174	; 0xae
 8008d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	6839      	ldr	r1, [r7, #0]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	4798      	blx	r3
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d20:	e04a      	b.n	8008db8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	785b      	ldrb	r3, [r3, #1]
 8008d26:	2b09      	cmp	r3, #9
 8008d28:	d83b      	bhi.n	8008da2 <USBD_StdDevReq+0xc2>
 8008d2a:	a201      	add	r2, pc, #4	; (adr r2, 8008d30 <USBD_StdDevReq+0x50>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008d85 	.word	0x08008d85
 8008d34:	08008d99 	.word	0x08008d99
 8008d38:	08008da3 	.word	0x08008da3
 8008d3c:	08008d8f 	.word	0x08008d8f
 8008d40:	08008da3 	.word	0x08008da3
 8008d44:	08008d63 	.word	0x08008d63
 8008d48:	08008d59 	.word	0x08008d59
 8008d4c:	08008da3 	.word	0x08008da3
 8008d50:	08008d7b 	.word	0x08008d7b
 8008d54:	08008d6d 	.word	0x08008d6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fa3c 	bl	80091d8 <USBD_GetDescriptor>
          break;
 8008d60:	e024      	b.n	8008dac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fba1 	bl	80094ac <USBD_SetAddress>
          break;
 8008d6a:	e01f      	b.n	8008dac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fbe0 	bl	8009534 <USBD_SetConfig>
 8008d74:	4603      	mov	r3, r0
 8008d76:	73fb      	strb	r3, [r7, #15]
          break;
 8008d78:	e018      	b.n	8008dac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fc83 	bl	8009688 <USBD_GetConfig>
          break;
 8008d82:	e013      	b.n	8008dac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fcb4 	bl	80096f4 <USBD_GetStatus>
          break;
 8008d8c:	e00e      	b.n	8008dac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fce3 	bl	800975c <USBD_SetFeature>
          break;
 8008d96:	e009      	b.n	8008dac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fd07 	bl	80097ae <USBD_ClrFeature>
          break;
 8008da0:	e004      	b.n	8008dac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fd5e 	bl	8009866 <USBD_CtlError>
          break;
 8008daa:	bf00      	nop
      }
      break;
 8008dac:	e004      	b.n	8008db8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 fd58 	bl	8009866 <USBD_CtlError>
      break;
 8008db6:	bf00      	nop
  }

  return ret;
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop

08008dc4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dda:	2b40      	cmp	r3, #64	; 0x40
 8008ddc:	d005      	beq.n	8008dea <USBD_StdItfReq+0x26>
 8008dde:	2b40      	cmp	r3, #64	; 0x40
 8008de0:	d852      	bhi.n	8008e88 <USBD_StdItfReq+0xc4>
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <USBD_StdItfReq+0x26>
 8008de6:	2b20      	cmp	r3, #32
 8008de8:	d14e      	bne.n	8008e88 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	3b01      	subs	r3, #1
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d840      	bhi.n	8008e7a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	889b      	ldrh	r3, [r3, #4]
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d836      	bhi.n	8008e70 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	889b      	ldrh	r3, [r3, #4]
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7ff fed9 	bl	8008bc2 <USBD_CoreFindIF>
 8008e10:	4603      	mov	r3, r0
 8008e12:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e14:	7bbb      	ldrb	r3, [r7, #14]
 8008e16:	2bff      	cmp	r3, #255	; 0xff
 8008e18:	d01d      	beq.n	8008e56 <USBD_StdItfReq+0x92>
 8008e1a:	7bbb      	ldrb	r3, [r7, #14]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d11a      	bne.n	8008e56 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008e20:	7bba      	ldrb	r2, [r7, #14]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	32ae      	adds	r2, #174	; 0xae
 8008e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00f      	beq.n	8008e50 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008e30:	7bba      	ldrb	r2, [r7, #14]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e38:	7bba      	ldrb	r2, [r7, #14]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	32ae      	adds	r2, #174	; 0xae
 8008e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	4798      	blx	r3
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e4e:	e004      	b.n	8008e5a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008e50:	2303      	movs	r3, #3
 8008e52:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e54:	e001      	b.n	8008e5a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008e56:	2303      	movs	r3, #3
 8008e58:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	88db      	ldrh	r3, [r3, #6]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d110      	bne.n	8008e84 <USBD_StdItfReq+0xc0>
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10d      	bne.n	8008e84 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fdc7 	bl	80099fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e6e:	e009      	b.n	8008e84 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fcf7 	bl	8009866 <USBD_CtlError>
          break;
 8008e78:	e004      	b.n	8008e84 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fcf2 	bl	8009866 <USBD_CtlError>
          break;
 8008e82:	e000      	b.n	8008e86 <USBD_StdItfReq+0xc2>
          break;
 8008e84:	bf00      	nop
      }
      break;
 8008e86:	e004      	b.n	8008e92 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fceb 	bl	8009866 <USBD_CtlError>
      break;
 8008e90:	bf00      	nop
  }

  return ret;
 8008e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	889b      	ldrh	r3, [r3, #4]
 8008eae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008eb8:	2b40      	cmp	r3, #64	; 0x40
 8008eba:	d007      	beq.n	8008ecc <USBD_StdEPReq+0x30>
 8008ebc:	2b40      	cmp	r3, #64	; 0x40
 8008ebe:	f200 817f 	bhi.w	80091c0 <USBD_StdEPReq+0x324>
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d02a      	beq.n	8008f1c <USBD_StdEPReq+0x80>
 8008ec6:	2b20      	cmp	r3, #32
 8008ec8:	f040 817a 	bne.w	80091c0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	4619      	mov	r1, r3
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f7ff fe83 	bl	8008bdc <USBD_CoreFindEP>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008eda:	7b7b      	ldrb	r3, [r7, #13]
 8008edc:	2bff      	cmp	r3, #255	; 0xff
 8008ede:	f000 8174 	beq.w	80091ca <USBD_StdEPReq+0x32e>
 8008ee2:	7b7b      	ldrb	r3, [r7, #13]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f040 8170 	bne.w	80091ca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008eea:	7b7a      	ldrb	r2, [r7, #13]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008ef2:	7b7a      	ldrb	r2, [r7, #13]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	32ae      	adds	r2, #174	; 0xae
 8008ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f000 8163 	beq.w	80091ca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008f04:	7b7a      	ldrb	r2, [r7, #13]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	32ae      	adds	r2, #174	; 0xae
 8008f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	4798      	blx	r3
 8008f16:	4603      	mov	r3, r0
 8008f18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f1a:	e156      	b.n	80091ca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	785b      	ldrb	r3, [r3, #1]
 8008f20:	2b03      	cmp	r3, #3
 8008f22:	d008      	beq.n	8008f36 <USBD_StdEPReq+0x9a>
 8008f24:	2b03      	cmp	r3, #3
 8008f26:	f300 8145 	bgt.w	80091b4 <USBD_StdEPReq+0x318>
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f000 809b 	beq.w	8009066 <USBD_StdEPReq+0x1ca>
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d03c      	beq.n	8008fae <USBD_StdEPReq+0x112>
 8008f34:	e13e      	b.n	80091b4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d002      	beq.n	8008f48 <USBD_StdEPReq+0xac>
 8008f42:	2b03      	cmp	r3, #3
 8008f44:	d016      	beq.n	8008f74 <USBD_StdEPReq+0xd8>
 8008f46:	e02c      	b.n	8008fa2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f48:	7bbb      	ldrb	r3, [r7, #14]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00d      	beq.n	8008f6a <USBD_StdEPReq+0xce>
 8008f4e:	7bbb      	ldrb	r3, [r7, #14]
 8008f50:	2b80      	cmp	r3, #128	; 0x80
 8008f52:	d00a      	beq.n	8008f6a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f001 f97b 	bl	800a254 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f5e:	2180      	movs	r1, #128	; 0x80
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f001 f977 	bl	800a254 <USBD_LL_StallEP>
 8008f66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f68:	e020      	b.n	8008fac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008f6a:	6839      	ldr	r1, [r7, #0]
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 fc7a 	bl	8009866 <USBD_CtlError>
              break;
 8008f72:	e01b      	b.n	8008fac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	885b      	ldrh	r3, [r3, #2]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10e      	bne.n	8008f9a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f7c:	7bbb      	ldrb	r3, [r7, #14]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00b      	beq.n	8008f9a <USBD_StdEPReq+0xfe>
 8008f82:	7bbb      	ldrb	r3, [r7, #14]
 8008f84:	2b80      	cmp	r3, #128	; 0x80
 8008f86:	d008      	beq.n	8008f9a <USBD_StdEPReq+0xfe>
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	88db      	ldrh	r3, [r3, #6]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d104      	bne.n	8008f9a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f90:	7bbb      	ldrb	r3, [r7, #14]
 8008f92:	4619      	mov	r1, r3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f001 f95d 	bl	800a254 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fd2e 	bl	80099fc <USBD_CtlSendStatus>

              break;
 8008fa0:	e004      	b.n	8008fac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008fa2:	6839      	ldr	r1, [r7, #0]
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fc5e 	bl	8009866 <USBD_CtlError>
              break;
 8008faa:	bf00      	nop
          }
          break;
 8008fac:	e107      	b.n	80091be <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d002      	beq.n	8008fc0 <USBD_StdEPReq+0x124>
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	d016      	beq.n	8008fec <USBD_StdEPReq+0x150>
 8008fbe:	e04b      	b.n	8009058 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fc0:	7bbb      	ldrb	r3, [r7, #14]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00d      	beq.n	8008fe2 <USBD_StdEPReq+0x146>
 8008fc6:	7bbb      	ldrb	r3, [r7, #14]
 8008fc8:	2b80      	cmp	r3, #128	; 0x80
 8008fca:	d00a      	beq.n	8008fe2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fcc:	7bbb      	ldrb	r3, [r7, #14]
 8008fce:	4619      	mov	r1, r3
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f001 f93f 	bl	800a254 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fd6:	2180      	movs	r1, #128	; 0x80
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f001 f93b 	bl	800a254 <USBD_LL_StallEP>
 8008fde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fe0:	e040      	b.n	8009064 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 fc3e 	bl	8009866 <USBD_CtlError>
              break;
 8008fea:	e03b      	b.n	8009064 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	885b      	ldrh	r3, [r3, #2]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d136      	bne.n	8009062 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ff4:	7bbb      	ldrb	r3, [r7, #14]
 8008ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d004      	beq.n	8009008 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ffe:	7bbb      	ldrb	r3, [r7, #14]
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f001 f945 	bl	800a292 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fcf7 	bl	80099fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800900e:	7bbb      	ldrb	r3, [r7, #14]
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7ff fde2 	bl	8008bdc <USBD_CoreFindEP>
 8009018:	4603      	mov	r3, r0
 800901a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800901c:	7b7b      	ldrb	r3, [r7, #13]
 800901e:	2bff      	cmp	r3, #255	; 0xff
 8009020:	d01f      	beq.n	8009062 <USBD_StdEPReq+0x1c6>
 8009022:	7b7b      	ldrb	r3, [r7, #13]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d11c      	bne.n	8009062 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009028:	7b7a      	ldrb	r2, [r7, #13]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009030:	7b7a      	ldrb	r2, [r7, #13]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	32ae      	adds	r2, #174	; 0xae
 8009036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d010      	beq.n	8009062 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009040:	7b7a      	ldrb	r2, [r7, #13]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	32ae      	adds	r2, #174	; 0xae
 8009046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	4798      	blx	r3
 8009052:	4603      	mov	r3, r0
 8009054:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009056:	e004      	b.n	8009062 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009058:	6839      	ldr	r1, [r7, #0]
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fc03 	bl	8009866 <USBD_CtlError>
              break;
 8009060:	e000      	b.n	8009064 <USBD_StdEPReq+0x1c8>
              break;
 8009062:	bf00      	nop
          }
          break;
 8009064:	e0ab      	b.n	80091be <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800906c:	b2db      	uxtb	r3, r3
 800906e:	2b02      	cmp	r3, #2
 8009070:	d002      	beq.n	8009078 <USBD_StdEPReq+0x1dc>
 8009072:	2b03      	cmp	r3, #3
 8009074:	d032      	beq.n	80090dc <USBD_StdEPReq+0x240>
 8009076:	e097      	b.n	80091a8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009078:	7bbb      	ldrb	r3, [r7, #14]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d007      	beq.n	800908e <USBD_StdEPReq+0x1f2>
 800907e:	7bbb      	ldrb	r3, [r7, #14]
 8009080:	2b80      	cmp	r3, #128	; 0x80
 8009082:	d004      	beq.n	800908e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fbed 	bl	8009866 <USBD_CtlError>
                break;
 800908c:	e091      	b.n	80091b2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800908e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009092:	2b00      	cmp	r3, #0
 8009094:	da0b      	bge.n	80090ae <USBD_StdEPReq+0x212>
 8009096:	7bbb      	ldrb	r3, [r7, #14]
 8009098:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800909c:	4613      	mov	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	3310      	adds	r3, #16
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	4413      	add	r3, r2
 80090aa:	3304      	adds	r3, #4
 80090ac:	e00b      	b.n	80090c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
 80090b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090b4:	4613      	mov	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	4413      	add	r3, r2
 80090c4:	3304      	adds	r3, #4
 80090c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	2200      	movs	r2, #0
 80090cc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	2202      	movs	r2, #2
 80090d2:	4619      	mov	r1, r3
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 fc37 	bl	8009948 <USBD_CtlSendData>
              break;
 80090da:	e06a      	b.n	80091b2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80090dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	da11      	bge.n	8009108 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
 80090e6:	f003 020f 	and.w	r2, r3, #15
 80090ea:	6879      	ldr	r1, [r7, #4]
 80090ec:	4613      	mov	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	4413      	add	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	440b      	add	r3, r1
 80090f6:	3324      	adds	r3, #36	; 0x24
 80090f8:	881b      	ldrh	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d117      	bne.n	800912e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80090fe:	6839      	ldr	r1, [r7, #0]
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fbb0 	bl	8009866 <USBD_CtlError>
                  break;
 8009106:	e054      	b.n	80091b2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009108:	7bbb      	ldrb	r3, [r7, #14]
 800910a:	f003 020f 	and.w	r2, r3, #15
 800910e:	6879      	ldr	r1, [r7, #4]
 8009110:	4613      	mov	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4413      	add	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	440b      	add	r3, r1
 800911a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800911e:	881b      	ldrh	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d104      	bne.n	800912e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009124:	6839      	ldr	r1, [r7, #0]
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fb9d 	bl	8009866 <USBD_CtlError>
                  break;
 800912c:	e041      	b.n	80091b2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800912e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009132:	2b00      	cmp	r3, #0
 8009134:	da0b      	bge.n	800914e <USBD_StdEPReq+0x2b2>
 8009136:	7bbb      	ldrb	r3, [r7, #14]
 8009138:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800913c:	4613      	mov	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	3310      	adds	r3, #16
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	4413      	add	r3, r2
 800914a:	3304      	adds	r3, #4
 800914c:	e00b      	b.n	8009166 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800914e:	7bbb      	ldrb	r3, [r7, #14]
 8009150:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009154:	4613      	mov	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	4413      	add	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	4413      	add	r3, r2
 8009164:	3304      	adds	r3, #4
 8009166:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009168:	7bbb      	ldrb	r3, [r7, #14]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d002      	beq.n	8009174 <USBD_StdEPReq+0x2d8>
 800916e:	7bbb      	ldrb	r3, [r7, #14]
 8009170:	2b80      	cmp	r3, #128	; 0x80
 8009172:	d103      	bne.n	800917c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	2200      	movs	r2, #0
 8009178:	601a      	str	r2, [r3, #0]
 800917a:	e00e      	b.n	800919a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800917c:	7bbb      	ldrb	r3, [r7, #14]
 800917e:	4619      	mov	r1, r3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f001 f8a5 	bl	800a2d0 <USBD_LL_IsStallEP>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d003      	beq.n	8009194 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	2201      	movs	r2, #1
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	e002      	b.n	800919a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	2200      	movs	r2, #0
 8009198:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	2202      	movs	r2, #2
 800919e:	4619      	mov	r1, r3
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fbd1 	bl	8009948 <USBD_CtlSendData>
              break;
 80091a6:	e004      	b.n	80091b2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80091a8:	6839      	ldr	r1, [r7, #0]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fb5b 	bl	8009866 <USBD_CtlError>
              break;
 80091b0:	bf00      	nop
          }
          break;
 80091b2:	e004      	b.n	80091be <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 fb55 	bl	8009866 <USBD_CtlError>
          break;
 80091bc:	bf00      	nop
      }
      break;
 80091be:	e005      	b.n	80091cc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fb4f 	bl	8009866 <USBD_CtlError>
      break;
 80091c8:	e000      	b.n	80091cc <USBD_StdEPReq+0x330>
      break;
 80091ca:	bf00      	nop
  }

  return ret;
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
	...

080091d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091e2:	2300      	movs	r3, #0
 80091e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80091e6:	2300      	movs	r3, #0
 80091e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80091ea:	2300      	movs	r3, #0
 80091ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	885b      	ldrh	r3, [r3, #2]
 80091f2:	0a1b      	lsrs	r3, r3, #8
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	3b01      	subs	r3, #1
 80091f8:	2b06      	cmp	r3, #6
 80091fa:	f200 8128 	bhi.w	800944e <USBD_GetDescriptor+0x276>
 80091fe:	a201      	add	r2, pc, #4	; (adr r2, 8009204 <USBD_GetDescriptor+0x2c>)
 8009200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009204:	08009221 	.word	0x08009221
 8009208:	08009239 	.word	0x08009239
 800920c:	08009279 	.word	0x08009279
 8009210:	0800944f 	.word	0x0800944f
 8009214:	0800944f 	.word	0x0800944f
 8009218:	080093ef 	.word	0x080093ef
 800921c:	0800941b 	.word	0x0800941b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	7c12      	ldrb	r2, [r2, #16]
 800922c:	f107 0108 	add.w	r1, r7, #8
 8009230:	4610      	mov	r0, r2
 8009232:	4798      	blx	r3
 8009234:	60f8      	str	r0, [r7, #12]
      break;
 8009236:	e112      	b.n	800945e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	7c1b      	ldrb	r3, [r3, #16]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10d      	bne.n	800925c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009248:	f107 0208 	add.w	r2, r7, #8
 800924c:	4610      	mov	r0, r2
 800924e:	4798      	blx	r3
 8009250:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	3301      	adds	r3, #1
 8009256:	2202      	movs	r2, #2
 8009258:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800925a:	e100      	b.n	800945e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009264:	f107 0208 	add.w	r2, r7, #8
 8009268:	4610      	mov	r0, r2
 800926a:	4798      	blx	r3
 800926c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	3301      	adds	r3, #1
 8009272:	2202      	movs	r2, #2
 8009274:	701a      	strb	r2, [r3, #0]
      break;
 8009276:	e0f2      	b.n	800945e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	885b      	ldrh	r3, [r3, #2]
 800927c:	b2db      	uxtb	r3, r3
 800927e:	2b05      	cmp	r3, #5
 8009280:	f200 80ac 	bhi.w	80093dc <USBD_GetDescriptor+0x204>
 8009284:	a201      	add	r2, pc, #4	; (adr r2, 800928c <USBD_GetDescriptor+0xb4>)
 8009286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928a:	bf00      	nop
 800928c:	080092a5 	.word	0x080092a5
 8009290:	080092d9 	.word	0x080092d9
 8009294:	0800930d 	.word	0x0800930d
 8009298:	08009341 	.word	0x08009341
 800929c:	08009375 	.word	0x08009375
 80092a0:	080093a9 	.word	0x080093a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00b      	beq.n	80092c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	7c12      	ldrb	r2, [r2, #16]
 80092bc:	f107 0108 	add.w	r1, r7, #8
 80092c0:	4610      	mov	r0, r2
 80092c2:	4798      	blx	r3
 80092c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092c6:	e091      	b.n	80093ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092c8:	6839      	ldr	r1, [r7, #0]
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 facb 	bl	8009866 <USBD_CtlError>
            err++;
 80092d0:	7afb      	ldrb	r3, [r7, #11]
 80092d2:	3301      	adds	r3, #1
 80092d4:	72fb      	strb	r3, [r7, #11]
          break;
 80092d6:	e089      	b.n	80093ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00b      	beq.n	80092fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	7c12      	ldrb	r2, [r2, #16]
 80092f0:	f107 0108 	add.w	r1, r7, #8
 80092f4:	4610      	mov	r0, r2
 80092f6:	4798      	blx	r3
 80092f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092fa:	e077      	b.n	80093ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 fab1 	bl	8009866 <USBD_CtlError>
            err++;
 8009304:	7afb      	ldrb	r3, [r7, #11]
 8009306:	3301      	adds	r3, #1
 8009308:	72fb      	strb	r3, [r7, #11]
          break;
 800930a:	e06f      	b.n	80093ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00b      	beq.n	8009330 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	7c12      	ldrb	r2, [r2, #16]
 8009324:	f107 0108 	add.w	r1, r7, #8
 8009328:	4610      	mov	r0, r2
 800932a:	4798      	blx	r3
 800932c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800932e:	e05d      	b.n	80093ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fa97 	bl	8009866 <USBD_CtlError>
            err++;
 8009338:	7afb      	ldrb	r3, [r7, #11]
 800933a:	3301      	adds	r3, #1
 800933c:	72fb      	strb	r3, [r7, #11]
          break;
 800933e:	e055      	b.n	80093ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00b      	beq.n	8009364 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	7c12      	ldrb	r2, [r2, #16]
 8009358:	f107 0108 	add.w	r1, r7, #8
 800935c:	4610      	mov	r0, r2
 800935e:	4798      	blx	r3
 8009360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009362:	e043      	b.n	80093ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009364:	6839      	ldr	r1, [r7, #0]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fa7d 	bl	8009866 <USBD_CtlError>
            err++;
 800936c:	7afb      	ldrb	r3, [r7, #11]
 800936e:	3301      	adds	r3, #1
 8009370:	72fb      	strb	r3, [r7, #11]
          break;
 8009372:	e03b      	b.n	80093ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800937a:	695b      	ldr	r3, [r3, #20]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00b      	beq.n	8009398 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009386:	695b      	ldr	r3, [r3, #20]
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	7c12      	ldrb	r2, [r2, #16]
 800938c:	f107 0108 	add.w	r1, r7, #8
 8009390:	4610      	mov	r0, r2
 8009392:	4798      	blx	r3
 8009394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009396:	e029      	b.n	80093ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fa63 	bl	8009866 <USBD_CtlError>
            err++;
 80093a0:	7afb      	ldrb	r3, [r7, #11]
 80093a2:	3301      	adds	r3, #1
 80093a4:	72fb      	strb	r3, [r7, #11]
          break;
 80093a6:	e021      	b.n	80093ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ae:	699b      	ldr	r3, [r3, #24]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00b      	beq.n	80093cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	7c12      	ldrb	r2, [r2, #16]
 80093c0:	f107 0108 	add.w	r1, r7, #8
 80093c4:	4610      	mov	r0, r2
 80093c6:	4798      	blx	r3
 80093c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ca:	e00f      	b.n	80093ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fa49 	bl	8009866 <USBD_CtlError>
            err++;
 80093d4:	7afb      	ldrb	r3, [r7, #11]
 80093d6:	3301      	adds	r3, #1
 80093d8:	72fb      	strb	r3, [r7, #11]
          break;
 80093da:	e007      	b.n	80093ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fa41 	bl	8009866 <USBD_CtlError>
          err++;
 80093e4:	7afb      	ldrb	r3, [r7, #11]
 80093e6:	3301      	adds	r3, #1
 80093e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80093ea:	bf00      	nop
      }
      break;
 80093ec:	e037      	b.n	800945e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	7c1b      	ldrb	r3, [r3, #16]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d109      	bne.n	800940a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093fe:	f107 0208 	add.w	r2, r7, #8
 8009402:	4610      	mov	r0, r2
 8009404:	4798      	blx	r3
 8009406:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009408:	e029      	b.n	800945e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800940a:	6839      	ldr	r1, [r7, #0]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 fa2a 	bl	8009866 <USBD_CtlError>
        err++;
 8009412:	7afb      	ldrb	r3, [r7, #11]
 8009414:	3301      	adds	r3, #1
 8009416:	72fb      	strb	r3, [r7, #11]
      break;
 8009418:	e021      	b.n	800945e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	7c1b      	ldrb	r3, [r3, #16]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d10d      	bne.n	800943e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800942a:	f107 0208 	add.w	r2, r7, #8
 800942e:	4610      	mov	r0, r2
 8009430:	4798      	blx	r3
 8009432:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	3301      	adds	r3, #1
 8009438:	2207      	movs	r2, #7
 800943a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800943c:	e00f      	b.n	800945e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800943e:	6839      	ldr	r1, [r7, #0]
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fa10 	bl	8009866 <USBD_CtlError>
        err++;
 8009446:	7afb      	ldrb	r3, [r7, #11]
 8009448:	3301      	adds	r3, #1
 800944a:	72fb      	strb	r3, [r7, #11]
      break;
 800944c:	e007      	b.n	800945e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800944e:	6839      	ldr	r1, [r7, #0]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fa08 	bl	8009866 <USBD_CtlError>
      err++;
 8009456:	7afb      	ldrb	r3, [r7, #11]
 8009458:	3301      	adds	r3, #1
 800945a:	72fb      	strb	r3, [r7, #11]
      break;
 800945c:	bf00      	nop
  }

  if (err != 0U)
 800945e:	7afb      	ldrb	r3, [r7, #11]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d11e      	bne.n	80094a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	88db      	ldrh	r3, [r3, #6]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d016      	beq.n	800949a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800946c:	893b      	ldrh	r3, [r7, #8]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00e      	beq.n	8009490 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	88da      	ldrh	r2, [r3, #6]
 8009476:	893b      	ldrh	r3, [r7, #8]
 8009478:	4293      	cmp	r3, r2
 800947a:	bf28      	it	cs
 800947c:	4613      	movcs	r3, r2
 800947e:	b29b      	uxth	r3, r3
 8009480:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009482:	893b      	ldrh	r3, [r7, #8]
 8009484:	461a      	mov	r2, r3
 8009486:	68f9      	ldr	r1, [r7, #12]
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fa5d 	bl	8009948 <USBD_CtlSendData>
 800948e:	e009      	b.n	80094a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009490:	6839      	ldr	r1, [r7, #0]
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f9e7 	bl	8009866 <USBD_CtlError>
 8009498:	e004      	b.n	80094a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 faae 	bl	80099fc <USBD_CtlSendStatus>
 80094a0:	e000      	b.n	80094a4 <USBD_GetDescriptor+0x2cc>
    return;
 80094a2:	bf00      	nop
  }
}
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop

080094ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	889b      	ldrh	r3, [r3, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d131      	bne.n	8009522 <USBD_SetAddress+0x76>
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	88db      	ldrh	r3, [r3, #6]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d12d      	bne.n	8009522 <USBD_SetAddress+0x76>
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	885b      	ldrh	r3, [r3, #2]
 80094ca:	2b7f      	cmp	r3, #127	; 0x7f
 80094cc:	d829      	bhi.n	8009522 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	885b      	ldrh	r3, [r3, #2]
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	d104      	bne.n	80094f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80094e6:	6839      	ldr	r1, [r7, #0]
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f9bc 	bl	8009866 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ee:	e01d      	b.n	800952c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	7bfa      	ldrb	r2, [r7, #15]
 80094f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	4619      	mov	r1, r3
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 ff13 	bl	800a328 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fa7a 	bl	80099fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009508:	7bfb      	ldrb	r3, [r7, #15]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d004      	beq.n	8009518 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2202      	movs	r2, #2
 8009512:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009516:	e009      	b.n	800952c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009520:	e004      	b.n	800952c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f99e 	bl	8009866 <USBD_CtlError>
  }
}
 800952a:	bf00      	nop
 800952c:	bf00      	nop
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	885b      	ldrh	r3, [r3, #2]
 8009546:	b2da      	uxtb	r2, r3
 8009548:	4b4e      	ldr	r3, [pc, #312]	; (8009684 <USBD_SetConfig+0x150>)
 800954a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800954c:	4b4d      	ldr	r3, [pc, #308]	; (8009684 <USBD_SetConfig+0x150>)
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d905      	bls.n	8009560 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f985 	bl	8009866 <USBD_CtlError>
    return USBD_FAIL;
 800955c:	2303      	movs	r3, #3
 800955e:	e08c      	b.n	800967a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b02      	cmp	r3, #2
 800956a:	d002      	beq.n	8009572 <USBD_SetConfig+0x3e>
 800956c:	2b03      	cmp	r3, #3
 800956e:	d029      	beq.n	80095c4 <USBD_SetConfig+0x90>
 8009570:	e075      	b.n	800965e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009572:	4b44      	ldr	r3, [pc, #272]	; (8009684 <USBD_SetConfig+0x150>)
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d020      	beq.n	80095bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800957a:	4b42      	ldr	r3, [pc, #264]	; (8009684 <USBD_SetConfig+0x150>)
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	461a      	mov	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009584:	4b3f      	ldr	r3, [pc, #252]	; (8009684 <USBD_SetConfig+0x150>)
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	4619      	mov	r1, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7fe ffe7 	bl	800855e <USBD_SetClassConfig>
 8009590:	4603      	mov	r3, r0
 8009592:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009594:	7bfb      	ldrb	r3, [r7, #15]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d008      	beq.n	80095ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800959a:	6839      	ldr	r1, [r7, #0]
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 f962 	bl	8009866 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2202      	movs	r2, #2
 80095a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095aa:	e065      	b.n	8009678 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fa25 	bl	80099fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2203      	movs	r2, #3
 80095b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80095ba:	e05d      	b.n	8009678 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fa1d 	bl	80099fc <USBD_CtlSendStatus>
      break;
 80095c2:	e059      	b.n	8009678 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80095c4:	4b2f      	ldr	r3, [pc, #188]	; (8009684 <USBD_SetConfig+0x150>)
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d112      	bne.n	80095f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2202      	movs	r2, #2
 80095d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80095d4:	4b2b      	ldr	r3, [pc, #172]	; (8009684 <USBD_SetConfig+0x150>)
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	461a      	mov	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095de:	4b29      	ldr	r3, [pc, #164]	; (8009684 <USBD_SetConfig+0x150>)
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	4619      	mov	r1, r3
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f7fe ffd6 	bl	8008596 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fa06 	bl	80099fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095f0:	e042      	b.n	8009678 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80095f2:	4b24      	ldr	r3, [pc, #144]	; (8009684 <USBD_SetConfig+0x150>)
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	461a      	mov	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d02a      	beq.n	8009656 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	b2db      	uxtb	r3, r3
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7fe ffc4 	bl	8008596 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800960e:	4b1d      	ldr	r3, [pc, #116]	; (8009684 <USBD_SetConfig+0x150>)
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009618:	4b1a      	ldr	r3, [pc, #104]	; (8009684 <USBD_SetConfig+0x150>)
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	4619      	mov	r1, r3
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f7fe ff9d 	bl	800855e <USBD_SetClassConfig>
 8009624:	4603      	mov	r3, r0
 8009626:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009628:	7bfb      	ldrb	r3, [r7, #15]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00f      	beq.n	800964e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f918 	bl	8009866 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	b2db      	uxtb	r3, r3
 800963c:	4619      	mov	r1, r3
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7fe ffa9 	bl	8008596 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2202      	movs	r2, #2
 8009648:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800964c:	e014      	b.n	8009678 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f9d4 	bl	80099fc <USBD_CtlSendStatus>
      break;
 8009654:	e010      	b.n	8009678 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 f9d0 	bl	80099fc <USBD_CtlSendStatus>
      break;
 800965c:	e00c      	b.n	8009678 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800965e:	6839      	ldr	r1, [r7, #0]
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 f900 	bl	8009866 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009666:	4b07      	ldr	r3, [pc, #28]	; (8009684 <USBD_SetConfig+0x150>)
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7fe ff92 	bl	8008596 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009672:	2303      	movs	r3, #3
 8009674:	73fb      	strb	r3, [r7, #15]
      break;
 8009676:	bf00      	nop
  }

  return ret;
 8009678:	7bfb      	ldrb	r3, [r7, #15]
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	2000033c 	.word	0x2000033c

08009688 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	88db      	ldrh	r3, [r3, #6]
 8009696:	2b01      	cmp	r3, #1
 8009698:	d004      	beq.n	80096a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800969a:	6839      	ldr	r1, [r7, #0]
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 f8e2 	bl	8009866 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80096a2:	e023      	b.n	80096ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	dc02      	bgt.n	80096b6 <USBD_GetConfig+0x2e>
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	dc03      	bgt.n	80096bc <USBD_GetConfig+0x34>
 80096b4:	e015      	b.n	80096e2 <USBD_GetConfig+0x5a>
 80096b6:	2b03      	cmp	r3, #3
 80096b8:	d00b      	beq.n	80096d2 <USBD_GetConfig+0x4a>
 80096ba:	e012      	b.n	80096e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	3308      	adds	r3, #8
 80096c6:	2201      	movs	r2, #1
 80096c8:	4619      	mov	r1, r3
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f93c 	bl	8009948 <USBD_CtlSendData>
        break;
 80096d0:	e00c      	b.n	80096ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	3304      	adds	r3, #4
 80096d6:	2201      	movs	r2, #1
 80096d8:	4619      	mov	r1, r3
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 f934 	bl	8009948 <USBD_CtlSendData>
        break;
 80096e0:	e004      	b.n	80096ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f8be 	bl	8009866 <USBD_CtlError>
        break;
 80096ea:	bf00      	nop
}
 80096ec:	bf00      	nop
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009704:	b2db      	uxtb	r3, r3
 8009706:	3b01      	subs	r3, #1
 8009708:	2b02      	cmp	r3, #2
 800970a:	d81e      	bhi.n	800974a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	88db      	ldrh	r3, [r3, #6]
 8009710:	2b02      	cmp	r3, #2
 8009712:	d004      	beq.n	800971e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009714:	6839      	ldr	r1, [r7, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f8a5 	bl	8009866 <USBD_CtlError>
        break;
 800971c:	e01a      	b.n	8009754 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800972a:	2b00      	cmp	r3, #0
 800972c:	d005      	beq.n	800973a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	f043 0202 	orr.w	r2, r3, #2
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	330c      	adds	r3, #12
 800973e:	2202      	movs	r2, #2
 8009740:	4619      	mov	r1, r3
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f900 	bl	8009948 <USBD_CtlSendData>
      break;
 8009748:	e004      	b.n	8009754 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800974a:	6839      	ldr	r1, [r7, #0]
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f88a 	bl	8009866 <USBD_CtlError>
      break;
 8009752:	bf00      	nop
  }
}
 8009754:	bf00      	nop
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	885b      	ldrh	r3, [r3, #2]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d107      	bne.n	800977e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2201      	movs	r2, #1
 8009772:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f940 	bl	80099fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800977c:	e013      	b.n	80097a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	885b      	ldrh	r3, [r3, #2]
 8009782:	2b02      	cmp	r3, #2
 8009784:	d10b      	bne.n	800979e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	889b      	ldrh	r3, [r3, #4]
 800978a:	0a1b      	lsrs	r3, r3, #8
 800978c:	b29b      	uxth	r3, r3
 800978e:	b2da      	uxtb	r2, r3
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f930 	bl	80099fc <USBD_CtlSendStatus>
}
 800979c:	e003      	b.n	80097a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 f860 	bl	8009866 <USBD_CtlError>
}
 80097a6:	bf00      	nop
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b082      	sub	sp, #8
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	3b01      	subs	r3, #1
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	d80b      	bhi.n	80097de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	885b      	ldrh	r3, [r3, #2]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d10c      	bne.n	80097e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f910 	bl	80099fc <USBD_CtlSendStatus>
      }
      break;
 80097dc:	e004      	b.n	80097e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80097de:	6839      	ldr	r1, [r7, #0]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 f840 	bl	8009866 <USBD_CtlError>
      break;
 80097e6:	e000      	b.n	80097ea <USBD_ClrFeature+0x3c>
      break;
 80097e8:	bf00      	nop
  }
}
 80097ea:	bf00      	nop
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b084      	sub	sp, #16
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
 80097fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	781a      	ldrb	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	3301      	adds	r3, #1
 800980c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	781a      	ldrb	r2, [r3, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	3301      	adds	r3, #1
 800981a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f7ff fa41 	bl	8008ca4 <SWAPBYTE>
 8009822:	4603      	mov	r3, r0
 8009824:	461a      	mov	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3301      	adds	r3, #1
 800982e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	3301      	adds	r3, #1
 8009834:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f7ff fa34 	bl	8008ca4 <SWAPBYTE>
 800983c:	4603      	mov	r3, r0
 800983e:	461a      	mov	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	3301      	adds	r3, #1
 8009848:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	3301      	adds	r3, #1
 800984e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f7ff fa27 	bl	8008ca4 <SWAPBYTE>
 8009856:	4603      	mov	r3, r0
 8009858:	461a      	mov	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	80da      	strh	r2, [r3, #6]
}
 800985e:	bf00      	nop
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b082      	sub	sp, #8
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009870:	2180      	movs	r1, #128	; 0x80
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fcee 	bl	800a254 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009878:	2100      	movs	r1, #0
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fcea 	bl	800a254 <USBD_LL_StallEP>
}
 8009880:	bf00      	nop
 8009882:	3708      	adds	r7, #8
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b086      	sub	sp, #24
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009894:	2300      	movs	r3, #0
 8009896:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d036      	beq.n	800990c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80098a2:	6938      	ldr	r0, [r7, #16]
 80098a4:	f000 f836 	bl	8009914 <USBD_GetLen>
 80098a8:	4603      	mov	r3, r0
 80098aa:	3301      	adds	r3, #1
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	005b      	lsls	r3, r3, #1
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80098b6:	7dfb      	ldrb	r3, [r7, #23]
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	4413      	add	r3, r2
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	7812      	ldrb	r2, [r2, #0]
 80098c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80098c2:	7dfb      	ldrb	r3, [r7, #23]
 80098c4:	3301      	adds	r3, #1
 80098c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80098c8:	7dfb      	ldrb	r3, [r7, #23]
 80098ca:	68ba      	ldr	r2, [r7, #8]
 80098cc:	4413      	add	r3, r2
 80098ce:	2203      	movs	r2, #3
 80098d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80098d2:	7dfb      	ldrb	r3, [r7, #23]
 80098d4:	3301      	adds	r3, #1
 80098d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80098d8:	e013      	b.n	8009902 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80098da:	7dfb      	ldrb	r3, [r7, #23]
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	4413      	add	r3, r2
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	7812      	ldrb	r2, [r2, #0]
 80098e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	3301      	adds	r3, #1
 80098ea:	613b      	str	r3, [r7, #16]
    idx++;
 80098ec:	7dfb      	ldrb	r3, [r7, #23]
 80098ee:	3301      	adds	r3, #1
 80098f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80098f2:	7dfb      	ldrb	r3, [r7, #23]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	4413      	add	r3, r2
 80098f8:	2200      	movs	r2, #0
 80098fa:	701a      	strb	r2, [r3, #0]
    idx++;
 80098fc:	7dfb      	ldrb	r3, [r7, #23]
 80098fe:	3301      	adds	r3, #1
 8009900:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1e7      	bne.n	80098da <USBD_GetString+0x52>
 800990a:	e000      	b.n	800990e <USBD_GetString+0x86>
    return;
 800990c:	bf00      	nop
  }
}
 800990e:	3718      	adds	r7, #24
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800991c:	2300      	movs	r3, #0
 800991e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009924:	e005      	b.n	8009932 <USBD_GetLen+0x1e>
  {
    len++;
 8009926:	7bfb      	ldrb	r3, [r7, #15]
 8009928:	3301      	adds	r3, #1
 800992a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	3301      	adds	r3, #1
 8009930:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1f5      	bne.n	8009926 <USBD_GetLen+0x12>
  }

  return len;
 800993a:	7bfb      	ldrb	r3, [r7, #15]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3714      	adds	r7, #20
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2202      	movs	r2, #2
 8009958:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	2100      	movs	r1, #0
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f000 fcf9 	bl	800a366 <USBD_LL_Transmit>

  return USBD_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b084      	sub	sp, #16
 8009982:	af00      	add	r7, sp, #0
 8009984:	60f8      	str	r0, [r7, #12]
 8009986:	60b9      	str	r1, [r7, #8]
 8009988:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	2100      	movs	r1, #0
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f000 fce8 	bl	800a366 <USBD_LL_Transmit>

  return USBD_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3710      	adds	r7, #16
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2203      	movs	r2, #3
 80099b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	2100      	movs	r1, #0
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f000 fcec 	bl	800a3a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b084      	sub	sp, #16
 80099de:	af00      	add	r7, sp, #0
 80099e0:	60f8      	str	r0, [r7, #12]
 80099e2:	60b9      	str	r1, [r7, #8]
 80099e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	2100      	movs	r1, #0
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f000 fcdb 	bl	800a3a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2204      	movs	r2, #4
 8009a08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	2200      	movs	r2, #0
 8009a10:	2100      	movs	r1, #0
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 fca7 	bl	800a366 <USBD_LL_Transmit>

  return USBD_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b082      	sub	sp, #8
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2205      	movs	r2, #5
 8009a2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a32:	2300      	movs	r3, #0
 8009a34:	2200      	movs	r2, #0
 8009a36:	2100      	movs	r1, #0
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 fcb5 	bl	800a3a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	4912      	ldr	r1, [pc, #72]	; (8009a98 <MX_USB_DEVICE_Init+0x50>)
 8009a50:	4812      	ldr	r0, [pc, #72]	; (8009a9c <MX_USB_DEVICE_Init+0x54>)
 8009a52:	f7fe fd07 	bl	8008464 <USBD_Init>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a5c:	f7f7 f976 	bl	8000d4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009a60:	490f      	ldr	r1, [pc, #60]	; (8009aa0 <MX_USB_DEVICE_Init+0x58>)
 8009a62:	480e      	ldr	r0, [pc, #56]	; (8009a9c <MX_USB_DEVICE_Init+0x54>)
 8009a64:	f7fe fd2e 	bl	80084c4 <USBD_RegisterClass>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a6e:	f7f7 f96d 	bl	8000d4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009a72:	490c      	ldr	r1, [pc, #48]	; (8009aa4 <MX_USB_DEVICE_Init+0x5c>)
 8009a74:	4809      	ldr	r0, [pc, #36]	; (8009a9c <MX_USB_DEVICE_Init+0x54>)
 8009a76:	f7fe fc1f 	bl	80082b8 <USBD_CDC_RegisterInterface>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a80:	f7f7 f964 	bl	8000d4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009a84:	4805      	ldr	r0, [pc, #20]	; (8009a9c <MX_USB_DEVICE_Init+0x54>)
 8009a86:	f7fe fd53 	bl	8008530 <USBD_Start>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d001      	beq.n	8009a94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009a90:	f7f7 f95c 	bl	8000d4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009a94:	bf00      	nop
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	200000b0 	.word	0x200000b0
 8009a9c:	20000340 	.word	0x20000340
 8009aa0:	2000001c 	.word	0x2000001c
 8009aa4:	2000009c 	.word	0x2000009c

08009aa8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009aac:	2200      	movs	r2, #0
 8009aae:	4905      	ldr	r1, [pc, #20]	; (8009ac4 <CDC_Init_FS+0x1c>)
 8009ab0:	4805      	ldr	r0, [pc, #20]	; (8009ac8 <CDC_Init_FS+0x20>)
 8009ab2:	f7fe fc1b 	bl	80082ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009ab6:	4905      	ldr	r1, [pc, #20]	; (8009acc <CDC_Init_FS+0x24>)
 8009ab8:	4803      	ldr	r0, [pc, #12]	; (8009ac8 <CDC_Init_FS+0x20>)
 8009aba:	f7fe fc39 	bl	8008330 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009abe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	20000e1c 	.word	0x20000e1c
 8009ac8:	20000340 	.word	0x20000340
 8009acc:	2000061c 	.word	0x2000061c

08009ad0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009ad4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	6039      	str	r1, [r7, #0]
 8009aea:	71fb      	strb	r3, [r7, #7]
 8009aec:	4613      	mov	r3, r2
 8009aee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009af0:	79fb      	ldrb	r3, [r7, #7]
 8009af2:	2b23      	cmp	r3, #35	; 0x23
 8009af4:	d84a      	bhi.n	8009b8c <CDC_Control_FS+0xac>
 8009af6:	a201      	add	r2, pc, #4	; (adr r2, 8009afc <CDC_Control_FS+0x1c>)
 8009af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afc:	08009b8d 	.word	0x08009b8d
 8009b00:	08009b8d 	.word	0x08009b8d
 8009b04:	08009b8d 	.word	0x08009b8d
 8009b08:	08009b8d 	.word	0x08009b8d
 8009b0c:	08009b8d 	.word	0x08009b8d
 8009b10:	08009b8d 	.word	0x08009b8d
 8009b14:	08009b8d 	.word	0x08009b8d
 8009b18:	08009b8d 	.word	0x08009b8d
 8009b1c:	08009b8d 	.word	0x08009b8d
 8009b20:	08009b8d 	.word	0x08009b8d
 8009b24:	08009b8d 	.word	0x08009b8d
 8009b28:	08009b8d 	.word	0x08009b8d
 8009b2c:	08009b8d 	.word	0x08009b8d
 8009b30:	08009b8d 	.word	0x08009b8d
 8009b34:	08009b8d 	.word	0x08009b8d
 8009b38:	08009b8d 	.word	0x08009b8d
 8009b3c:	08009b8d 	.word	0x08009b8d
 8009b40:	08009b8d 	.word	0x08009b8d
 8009b44:	08009b8d 	.word	0x08009b8d
 8009b48:	08009b8d 	.word	0x08009b8d
 8009b4c:	08009b8d 	.word	0x08009b8d
 8009b50:	08009b8d 	.word	0x08009b8d
 8009b54:	08009b8d 	.word	0x08009b8d
 8009b58:	08009b8d 	.word	0x08009b8d
 8009b5c:	08009b8d 	.word	0x08009b8d
 8009b60:	08009b8d 	.word	0x08009b8d
 8009b64:	08009b8d 	.word	0x08009b8d
 8009b68:	08009b8d 	.word	0x08009b8d
 8009b6c:	08009b8d 	.word	0x08009b8d
 8009b70:	08009b8d 	.word	0x08009b8d
 8009b74:	08009b8d 	.word	0x08009b8d
 8009b78:	08009b8d 	.word	0x08009b8d
 8009b7c:	08009b8d 	.word	0x08009b8d
 8009b80:	08009b8d 	.word	0x08009b8d
 8009b84:	08009b8d 	.word	0x08009b8d
 8009b88:	08009b8d 	.word	0x08009b8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009b8c:	bf00      	nop
  }

  return (USBD_OK);
 8009b8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009ba6:	6879      	ldr	r1, [r7, #4]
 8009ba8:	4805      	ldr	r0, [pc, #20]	; (8009bc0 <CDC_Receive_FS+0x24>)
 8009baa:	f7fe fbc1 	bl	8008330 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009bae:	4804      	ldr	r0, [pc, #16]	; (8009bc0 <CDC_Receive_FS+0x24>)
 8009bb0:	f7fe fc22 	bl	80083f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009bb4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20000340 	.word	0x20000340

08009bc4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	460b      	mov	r3, r1
 8009bce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009bd4:	4b0d      	ldr	r3, [pc, #52]	; (8009c0c <CDC_Transmit_FS+0x48>)
 8009bd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bda:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e00b      	b.n	8009c02 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009bea:	887b      	ldrh	r3, [r7, #2]
 8009bec:	461a      	mov	r2, r3
 8009bee:	6879      	ldr	r1, [r7, #4]
 8009bf0:	4806      	ldr	r0, [pc, #24]	; (8009c0c <CDC_Transmit_FS+0x48>)
 8009bf2:	f7fe fb7b 	bl	80082ec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009bf6:	4805      	ldr	r0, [pc, #20]	; (8009c0c <CDC_Transmit_FS+0x48>)
 8009bf8:	f7fe fbb8 	bl	800836c <USBD_CDC_TransmitPacket>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	20000340 	.word	0x20000340

08009c10 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b087      	sub	sp, #28
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	371c      	adds	r7, #28
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr
	...

08009c34 <CDC_getReady>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_getReady(void)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *) hUsbDeviceFS.pClassData;
 8009c3a:	4b09      	ldr	r3, [pc, #36]	; (8009c60 <CDC_getReady+0x2c>)
 8009c3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c40:	607b      	str	r3, [r7, #4]
	if(hcdc -> TxState != 0)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d001      	beq.n	8009c50 <CDC_getReady+0x1c>
	{
		return USBD_BUSY;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e000      	b.n	8009c52 <CDC_getReady+0x1e>
	}
	else
	{
		return USBD_OK;
 8009c50:	2300      	movs	r3, #0
	}
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	370c      	adds	r7, #12
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	20000340 	.word	0x20000340

08009c64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	6039      	str	r1, [r7, #0]
 8009c6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	2212      	movs	r2, #18
 8009c74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009c76:	4b03      	ldr	r3, [pc, #12]	; (8009c84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr
 8009c84:	200000cc 	.word	0x200000cc

08009c88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	4603      	mov	r3, r0
 8009c90:	6039      	str	r1, [r7, #0]
 8009c92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	2204      	movs	r2, #4
 8009c98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c9a:	4b03      	ldr	r3, [pc, #12]	; (8009ca8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	200000e0 	.word	0x200000e0

08009cac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	6039      	str	r1, [r7, #0]
 8009cb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009cb8:	79fb      	ldrb	r3, [r7, #7]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d105      	bne.n	8009cca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009cbe:	683a      	ldr	r2, [r7, #0]
 8009cc0:	4907      	ldr	r1, [pc, #28]	; (8009ce0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009cc2:	4808      	ldr	r0, [pc, #32]	; (8009ce4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009cc4:	f7ff fde0 	bl	8009888 <USBD_GetString>
 8009cc8:	e004      	b.n	8009cd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009cca:	683a      	ldr	r2, [r7, #0]
 8009ccc:	4904      	ldr	r1, [pc, #16]	; (8009ce0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009cce:	4805      	ldr	r0, [pc, #20]	; (8009ce4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009cd0:	f7ff fdda 	bl	8009888 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cd4:	4b02      	ldr	r3, [pc, #8]	; (8009ce0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3708      	adds	r7, #8
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	2000161c 	.word	0x2000161c
 8009ce4:	0800ae9c 	.word	0x0800ae9c

08009ce8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	4603      	mov	r3, r0
 8009cf0:	6039      	str	r1, [r7, #0]
 8009cf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009cf4:	683a      	ldr	r2, [r7, #0]
 8009cf6:	4904      	ldr	r1, [pc, #16]	; (8009d08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009cf8:	4804      	ldr	r0, [pc, #16]	; (8009d0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009cfa:	f7ff fdc5 	bl	8009888 <USBD_GetString>
  return USBD_StrDesc;
 8009cfe:	4b02      	ldr	r3, [pc, #8]	; (8009d08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	2000161c 	.word	0x2000161c
 8009d0c:	0800aebc 	.word	0x0800aebc

08009d10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	4603      	mov	r3, r0
 8009d18:	6039      	str	r1, [r7, #0]
 8009d1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	221a      	movs	r2, #26
 8009d20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d22:	f000 f843 	bl	8009dac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009d26:	4b02      	ldr	r3, [pc, #8]	; (8009d30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	200000e4 	.word	0x200000e4

08009d34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	6039      	str	r1, [r7, #0]
 8009d3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009d40:	79fb      	ldrb	r3, [r7, #7]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d105      	bne.n	8009d52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	4907      	ldr	r1, [pc, #28]	; (8009d68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d4a:	4808      	ldr	r0, [pc, #32]	; (8009d6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d4c:	f7ff fd9c 	bl	8009888 <USBD_GetString>
 8009d50:	e004      	b.n	8009d5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	4904      	ldr	r1, [pc, #16]	; (8009d68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d56:	4805      	ldr	r0, [pc, #20]	; (8009d6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d58:	f7ff fd96 	bl	8009888 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d5c:	4b02      	ldr	r3, [pc, #8]	; (8009d68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	2000161c 	.word	0x2000161c
 8009d6c:	0800aed0 	.word	0x0800aed0

08009d70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	4603      	mov	r3, r0
 8009d78:	6039      	str	r1, [r7, #0]
 8009d7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d7c:	79fb      	ldrb	r3, [r7, #7]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d105      	bne.n	8009d8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	4907      	ldr	r1, [pc, #28]	; (8009da4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d86:	4808      	ldr	r0, [pc, #32]	; (8009da8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d88:	f7ff fd7e 	bl	8009888 <USBD_GetString>
 8009d8c:	e004      	b.n	8009d98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d8e:	683a      	ldr	r2, [r7, #0]
 8009d90:	4904      	ldr	r1, [pc, #16]	; (8009da4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d92:	4805      	ldr	r0, [pc, #20]	; (8009da8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d94:	f7ff fd78 	bl	8009888 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d98:	4b02      	ldr	r3, [pc, #8]	; (8009da4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	2000161c 	.word	0x2000161c
 8009da8:	0800aedc 	.word	0x0800aedc

08009dac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009db2:	4b0f      	ldr	r3, [pc, #60]	; (8009df0 <Get_SerialNum+0x44>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009db8:	4b0e      	ldr	r3, [pc, #56]	; (8009df4 <Get_SerialNum+0x48>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009dbe:	4b0e      	ldr	r3, [pc, #56]	; (8009df8 <Get_SerialNum+0x4c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4413      	add	r3, r2
 8009dca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d009      	beq.n	8009de6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009dd2:	2208      	movs	r2, #8
 8009dd4:	4909      	ldr	r1, [pc, #36]	; (8009dfc <Get_SerialNum+0x50>)
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f000 f814 	bl	8009e04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ddc:	2204      	movs	r2, #4
 8009dde:	4908      	ldr	r1, [pc, #32]	; (8009e00 <Get_SerialNum+0x54>)
 8009de0:	68b8      	ldr	r0, [r7, #8]
 8009de2:	f000 f80f 	bl	8009e04 <IntToUnicode>
  }
}
 8009de6:	bf00      	nop
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	1fff7a10 	.word	0x1fff7a10
 8009df4:	1fff7a14 	.word	0x1fff7a14
 8009df8:	1fff7a18 	.word	0x1fff7a18
 8009dfc:	200000e6 	.word	0x200000e6
 8009e00:	200000f6 	.word	0x200000f6

08009e04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b087      	sub	sp, #28
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	4613      	mov	r3, r2
 8009e10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009e12:	2300      	movs	r3, #0
 8009e14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009e16:	2300      	movs	r3, #0
 8009e18:	75fb      	strb	r3, [r7, #23]
 8009e1a:	e027      	b.n	8009e6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	0f1b      	lsrs	r3, r3, #28
 8009e20:	2b09      	cmp	r3, #9
 8009e22:	d80b      	bhi.n	8009e3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	0f1b      	lsrs	r3, r3, #28
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	7dfb      	ldrb	r3, [r7, #23]
 8009e2c:	005b      	lsls	r3, r3, #1
 8009e2e:	4619      	mov	r1, r3
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	440b      	add	r3, r1
 8009e34:	3230      	adds	r2, #48	; 0x30
 8009e36:	b2d2      	uxtb	r2, r2
 8009e38:	701a      	strb	r2, [r3, #0]
 8009e3a:	e00a      	b.n	8009e52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	0f1b      	lsrs	r3, r3, #28
 8009e40:	b2da      	uxtb	r2, r3
 8009e42:	7dfb      	ldrb	r3, [r7, #23]
 8009e44:	005b      	lsls	r3, r3, #1
 8009e46:	4619      	mov	r1, r3
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	440b      	add	r3, r1
 8009e4c:	3237      	adds	r2, #55	; 0x37
 8009e4e:	b2d2      	uxtb	r2, r2
 8009e50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	011b      	lsls	r3, r3, #4
 8009e56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e58:	7dfb      	ldrb	r3, [r7, #23]
 8009e5a:	005b      	lsls	r3, r3, #1
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	68ba      	ldr	r2, [r7, #8]
 8009e60:	4413      	add	r3, r2
 8009e62:	2200      	movs	r2, #0
 8009e64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e66:	7dfb      	ldrb	r3, [r7, #23]
 8009e68:	3301      	adds	r3, #1
 8009e6a:	75fb      	strb	r3, [r7, #23]
 8009e6c:	7dfa      	ldrb	r2, [r7, #23]
 8009e6e:	79fb      	ldrb	r3, [r7, #7]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d3d3      	bcc.n	8009e1c <IntToUnicode+0x18>
  }
}
 8009e74:	bf00      	nop
 8009e76:	bf00      	nop
 8009e78:	371c      	adds	r7, #28
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
	...

08009e84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b08a      	sub	sp, #40	; 0x28
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e8c:	f107 0314 	add.w	r3, r7, #20
 8009e90:	2200      	movs	r2, #0
 8009e92:	601a      	str	r2, [r3, #0]
 8009e94:	605a      	str	r2, [r3, #4]
 8009e96:	609a      	str	r2, [r3, #8]
 8009e98:	60da      	str	r2, [r3, #12]
 8009e9a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ea4:	d13a      	bne.n	8009f1c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	613b      	str	r3, [r7, #16]
 8009eaa:	4b1e      	ldr	r3, [pc, #120]	; (8009f24 <HAL_PCD_MspInit+0xa0>)
 8009eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eae:	4a1d      	ldr	r2, [pc, #116]	; (8009f24 <HAL_PCD_MspInit+0xa0>)
 8009eb0:	f043 0301 	orr.w	r3, r3, #1
 8009eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8009eb6:	4b1b      	ldr	r3, [pc, #108]	; (8009f24 <HAL_PCD_MspInit+0xa0>)
 8009eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	613b      	str	r3, [r7, #16]
 8009ec0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009ec2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ec8:	2302      	movs	r3, #2
 8009eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009ed4:	230a      	movs	r3, #10
 8009ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ed8:	f107 0314 	add.w	r3, r7, #20
 8009edc:	4619      	mov	r1, r3
 8009ede:	4812      	ldr	r0, [pc, #72]	; (8009f28 <HAL_PCD_MspInit+0xa4>)
 8009ee0:	f7f7 fb90 	bl	8001604 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009ee4:	4b0f      	ldr	r3, [pc, #60]	; (8009f24 <HAL_PCD_MspInit+0xa0>)
 8009ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee8:	4a0e      	ldr	r2, [pc, #56]	; (8009f24 <HAL_PCD_MspInit+0xa0>)
 8009eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eee:	6353      	str	r3, [r2, #52]	; 0x34
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	60fb      	str	r3, [r7, #12]
 8009ef4:	4b0b      	ldr	r3, [pc, #44]	; (8009f24 <HAL_PCD_MspInit+0xa0>)
 8009ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ef8:	4a0a      	ldr	r2, [pc, #40]	; (8009f24 <HAL_PCD_MspInit+0xa0>)
 8009efa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009efe:	6453      	str	r3, [r2, #68]	; 0x44
 8009f00:	4b08      	ldr	r3, [pc, #32]	; (8009f24 <HAL_PCD_MspInit+0xa0>)
 8009f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f08:	60fb      	str	r3, [r7, #12]
 8009f0a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	2100      	movs	r1, #0
 8009f10:	2043      	movs	r0, #67	; 0x43
 8009f12:	f7f7 faae 	bl	8001472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009f16:	2043      	movs	r0, #67	; 0x43
 8009f18:	f7f7 fac7 	bl	80014aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009f1c:	bf00      	nop
 8009f1e:	3728      	adds	r7, #40	; 0x28
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	40023800 	.word	0x40023800
 8009f28:	40020000 	.word	0x40020000

08009f2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009f40:	4619      	mov	r1, r3
 8009f42:	4610      	mov	r0, r2
 8009f44:	f7fe fb41 	bl	80085ca <USBD_LL_SetupStage>
}
 8009f48:	bf00      	nop
 8009f4a:	3708      	adds	r7, #8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	460b      	mov	r3, r1
 8009f5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009f62:	78fa      	ldrb	r2, [r7, #3]
 8009f64:	6879      	ldr	r1, [r7, #4]
 8009f66:	4613      	mov	r3, r2
 8009f68:	00db      	lsls	r3, r3, #3
 8009f6a:	4413      	add	r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	440b      	add	r3, r1
 8009f70:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	78fb      	ldrb	r3, [r7, #3]
 8009f78:	4619      	mov	r1, r3
 8009f7a:	f7fe fb7b 	bl	8008674 <USBD_LL_DataOutStage>
}
 8009f7e:	bf00      	nop
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b082      	sub	sp, #8
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
 8009f8e:	460b      	mov	r3, r1
 8009f90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009f98:	78fa      	ldrb	r2, [r7, #3]
 8009f9a:	6879      	ldr	r1, [r7, #4]
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	00db      	lsls	r3, r3, #3
 8009fa0:	4413      	add	r3, r2
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	440b      	add	r3, r1
 8009fa6:	334c      	adds	r3, #76	; 0x4c
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	78fb      	ldrb	r3, [r7, #3]
 8009fac:	4619      	mov	r1, r3
 8009fae:	f7fe fc14 	bl	80087da <USBD_LL_DataInStage>
}
 8009fb2:	bf00      	nop
 8009fb4:	3708      	adds	r7, #8
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b082      	sub	sp, #8
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7fe fd48 	bl	8008a5e <USBD_LL_SOF>
}
 8009fce:	bf00      	nop
 8009fd0:	3708      	adds	r7, #8
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b084      	sub	sp, #16
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d001      	beq.n	8009fee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009fea:	f7f6 feaf 	bl	8000d4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ff4:	7bfa      	ldrb	r2, [r7, #15]
 8009ff6:	4611      	mov	r1, r2
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7fe fcf2 	bl	80089e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a004:	4618      	mov	r0, r3
 800a006:	f7fe fc9a 	bl	800893e <USBD_LL_Reset>
}
 800a00a:	bf00      	nop
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
	...

0800a014 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a022:	4618      	mov	r0, r3
 800a024:	f7fe fced 	bl	8008a02 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	6812      	ldr	r2, [r2, #0]
 800a036:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a03a:	f043 0301 	orr.w	r3, r3, #1
 800a03e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6a1b      	ldr	r3, [r3, #32]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d005      	beq.n	800a054 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a048:	4b04      	ldr	r3, [pc, #16]	; (800a05c <HAL_PCD_SuspendCallback+0x48>)
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	4a03      	ldr	r2, [pc, #12]	; (800a05c <HAL_PCD_SuspendCallback+0x48>)
 800a04e:	f043 0306 	orr.w	r3, r3, #6
 800a052:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a054:	bf00      	nop
 800a056:	3708      	adds	r7, #8
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	e000ed00 	.word	0xe000ed00

0800a060 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fe fcdd 	bl	8008a2e <USBD_LL_Resume>
}
 800a074:	bf00      	nop
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	460b      	mov	r3, r1
 800a086:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a08e:	78fa      	ldrb	r2, [r7, #3]
 800a090:	4611      	mov	r1, r2
 800a092:	4618      	mov	r0, r3
 800a094:	f7fe fd35 	bl	8008b02 <USBD_LL_IsoOUTIncomplete>
}
 800a098:	bf00      	nop
 800a09a:	3708      	adds	r7, #8
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0b2:	78fa      	ldrb	r2, [r7, #3]
 800a0b4:	4611      	mov	r1, r2
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fe fcf1 	bl	8008a9e <USBD_LL_IsoINIncomplete>
}
 800a0bc:	bf00      	nop
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7fe fd47 	bl	8008b66 <USBD_LL_DevConnected>
}
 800a0d8:	bf00      	nop
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7fe fd44 	bl	8008b7c <USBD_LL_DevDisconnected>
}
 800a0f4:	bf00      	nop
 800a0f6:	3708      	adds	r7, #8
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d13c      	bne.n	800a186 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a10c:	4a20      	ldr	r2, [pc, #128]	; (800a190 <USBD_LL_Init+0x94>)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a1e      	ldr	r2, [pc, #120]	; (800a190 <USBD_LL_Init+0x94>)
 800a118:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a11c:	4b1c      	ldr	r3, [pc, #112]	; (800a190 <USBD_LL_Init+0x94>)
 800a11e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a122:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a124:	4b1a      	ldr	r3, [pc, #104]	; (800a190 <USBD_LL_Init+0x94>)
 800a126:	2204      	movs	r2, #4
 800a128:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a12a:	4b19      	ldr	r3, [pc, #100]	; (800a190 <USBD_LL_Init+0x94>)
 800a12c:	2202      	movs	r2, #2
 800a12e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a130:	4b17      	ldr	r3, [pc, #92]	; (800a190 <USBD_LL_Init+0x94>)
 800a132:	2200      	movs	r2, #0
 800a134:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a136:	4b16      	ldr	r3, [pc, #88]	; (800a190 <USBD_LL_Init+0x94>)
 800a138:	2202      	movs	r2, #2
 800a13a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a13c:	4b14      	ldr	r3, [pc, #80]	; (800a190 <USBD_LL_Init+0x94>)
 800a13e:	2200      	movs	r2, #0
 800a140:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a142:	4b13      	ldr	r3, [pc, #76]	; (800a190 <USBD_LL_Init+0x94>)
 800a144:	2200      	movs	r2, #0
 800a146:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a148:	4b11      	ldr	r3, [pc, #68]	; (800a190 <USBD_LL_Init+0x94>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a14e:	4b10      	ldr	r3, [pc, #64]	; (800a190 <USBD_LL_Init+0x94>)
 800a150:	2200      	movs	r2, #0
 800a152:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a154:	4b0e      	ldr	r3, [pc, #56]	; (800a190 <USBD_LL_Init+0x94>)
 800a156:	2200      	movs	r2, #0
 800a158:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a15a:	480d      	ldr	r0, [pc, #52]	; (800a190 <USBD_LL_Init+0x94>)
 800a15c:	f7f8 fbe1 	bl	8002922 <HAL_PCD_Init>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d001      	beq.n	800a16a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a166:	f7f6 fdf1 	bl	8000d4c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a16a:	2180      	movs	r1, #128	; 0x80
 800a16c:	4808      	ldr	r0, [pc, #32]	; (800a190 <USBD_LL_Init+0x94>)
 800a16e:	f7f9 fe38 	bl	8003de2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a172:	2240      	movs	r2, #64	; 0x40
 800a174:	2100      	movs	r1, #0
 800a176:	4806      	ldr	r0, [pc, #24]	; (800a190 <USBD_LL_Init+0x94>)
 800a178:	f7f9 fdec 	bl	8003d54 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a17c:	2280      	movs	r2, #128	; 0x80
 800a17e:	2101      	movs	r1, #1
 800a180:	4803      	ldr	r0, [pc, #12]	; (800a190 <USBD_LL_Init+0x94>)
 800a182:	f7f9 fde7 	bl	8003d54 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	2000181c 	.word	0x2000181c

0800a194 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a19c:	2300      	movs	r3, #0
 800a19e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7f8 fcd6 	bl	8002b5c <HAL_PCD_Start>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1b4:	7bfb      	ldrb	r3, [r7, #15]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 f942 	bl	800a440 <USBD_Get_USB_Status>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b084      	sub	sp, #16
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
 800a1d2:	4608      	mov	r0, r1
 800a1d4:	4611      	mov	r1, r2
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	4603      	mov	r3, r0
 800a1da:	70fb      	strb	r3, [r7, #3]
 800a1dc:	460b      	mov	r3, r1
 800a1de:	70bb      	strb	r3, [r7, #2]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a1f2:	78bb      	ldrb	r3, [r7, #2]
 800a1f4:	883a      	ldrh	r2, [r7, #0]
 800a1f6:	78f9      	ldrb	r1, [r7, #3]
 800a1f8:	f7f9 f9a7 	bl	800354a <HAL_PCD_EP_Open>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a200:	7bfb      	ldrb	r3, [r7, #15]
 800a202:	4618      	mov	r0, r3
 800a204:	f000 f91c 	bl	800a440 <USBD_Get_USB_Status>
 800a208:	4603      	mov	r3, r0
 800a20a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a20c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b084      	sub	sp, #16
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	460b      	mov	r3, r1
 800a220:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a222:	2300      	movs	r3, #0
 800a224:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a230:	78fa      	ldrb	r2, [r7, #3]
 800a232:	4611      	mov	r1, r2
 800a234:	4618      	mov	r0, r3
 800a236:	f7f9 f9f0 	bl	800361a <HAL_PCD_EP_Close>
 800a23a:	4603      	mov	r3, r0
 800a23c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a23e:	7bfb      	ldrb	r3, [r7, #15]
 800a240:	4618      	mov	r0, r3
 800a242:	f000 f8fd 	bl	800a440 <USBD_Get_USB_Status>
 800a246:	4603      	mov	r3, r0
 800a248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a24a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3710      	adds	r7, #16
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	460b      	mov	r3, r1
 800a25e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a260:	2300      	movs	r3, #0
 800a262:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a264:	2300      	movs	r3, #0
 800a266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a26e:	78fa      	ldrb	r2, [r7, #3]
 800a270:	4611      	mov	r1, r2
 800a272:	4618      	mov	r0, r3
 800a274:	f7f9 fac8 	bl	8003808 <HAL_PCD_EP_SetStall>
 800a278:	4603      	mov	r3, r0
 800a27a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
 800a27e:	4618      	mov	r0, r3
 800a280:	f000 f8de 	bl	800a440 <USBD_Get_USB_Status>
 800a284:	4603      	mov	r3, r0
 800a286:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a288:	7bbb      	ldrb	r3, [r7, #14]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b084      	sub	sp, #16
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	460b      	mov	r3, r1
 800a29c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2ac:	78fa      	ldrb	r2, [r7, #3]
 800a2ae:	4611      	mov	r1, r2
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7f9 fb0d 	bl	80038d0 <HAL_PCD_EP_ClrStall>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2ba:	7bfb      	ldrb	r3, [r7, #15]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f000 f8bf 	bl	800a440 <USBD_Get_USB_Status>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3710      	adds	r7, #16
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	460b      	mov	r3, r1
 800a2da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a2e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	da0b      	bge.n	800a304 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a2ec:	78fb      	ldrb	r3, [r7, #3]
 800a2ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2f2:	68f9      	ldr	r1, [r7, #12]
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	00db      	lsls	r3, r3, #3
 800a2f8:	4413      	add	r3, r2
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	440b      	add	r3, r1
 800a2fe:	333e      	adds	r3, #62	; 0x3e
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	e00b      	b.n	800a31c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a304:	78fb      	ldrb	r3, [r7, #3]
 800a306:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a30a:	68f9      	ldr	r1, [r7, #12]
 800a30c:	4613      	mov	r3, r2
 800a30e:	00db      	lsls	r3, r3, #3
 800a310:	4413      	add	r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	440b      	add	r3, r1
 800a316:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a31a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3714      	adds	r7, #20
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	460b      	mov	r3, r1
 800a332:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a334:	2300      	movs	r3, #0
 800a336:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a338:	2300      	movs	r3, #0
 800a33a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a342:	78fa      	ldrb	r2, [r7, #3]
 800a344:	4611      	mov	r1, r2
 800a346:	4618      	mov	r0, r3
 800a348:	f7f9 f8da 	bl	8003500 <HAL_PCD_SetAddress>
 800a34c:	4603      	mov	r3, r0
 800a34e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a350:	7bfb      	ldrb	r3, [r7, #15]
 800a352:	4618      	mov	r0, r3
 800a354:	f000 f874 	bl	800a440 <USBD_Get_USB_Status>
 800a358:	4603      	mov	r3, r0
 800a35a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a35c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b086      	sub	sp, #24
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	60f8      	str	r0, [r7, #12]
 800a36e:	607a      	str	r2, [r7, #4]
 800a370:	603b      	str	r3, [r7, #0]
 800a372:	460b      	mov	r3, r1
 800a374:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a376:	2300      	movs	r3, #0
 800a378:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a37a:	2300      	movs	r3, #0
 800a37c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a384:	7af9      	ldrb	r1, [r7, #11]
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	f7f9 f9f3 	bl	8003774 <HAL_PCD_EP_Transmit>
 800a38e:	4603      	mov	r3, r0
 800a390:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a392:	7dfb      	ldrb	r3, [r7, #23]
 800a394:	4618      	mov	r0, r3
 800a396:	f000 f853 	bl	800a440 <USBD_Get_USB_Status>
 800a39a:	4603      	mov	r3, r0
 800a39c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a39e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3718      	adds	r7, #24
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b086      	sub	sp, #24
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	607a      	str	r2, [r7, #4]
 800a3b2:	603b      	str	r3, [r7, #0]
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a3c6:	7af9      	ldrb	r1, [r7, #11]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	f7f9 f96f 	bl	80036ae <HAL_PCD_EP_Receive>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3d4:	7dfb      	ldrb	r3, [r7, #23]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f000 f832 	bl	800a440 <USBD_Get_USB_Status>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3718      	adds	r7, #24
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b082      	sub	sp, #8
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3fc:	78fa      	ldrb	r2, [r7, #3]
 800a3fe:	4611      	mov	r1, r2
 800a400:	4618      	mov	r0, r3
 800a402:	f7f9 f99f 	bl	8003744 <HAL_PCD_EP_GetRxCount>
 800a406:	4603      	mov	r3, r0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3708      	adds	r7, #8
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a418:	4b03      	ldr	r3, [pc, #12]	; (800a428 <USBD_static_malloc+0x18>)
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	370c      	adds	r7, #12
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	20001d28 	.word	0x20001d28

0800a42c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]

}
 800a434:	bf00      	nop
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
 800a446:	4603      	mov	r3, r0
 800a448:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a44a:	2300      	movs	r3, #0
 800a44c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a44e:	79fb      	ldrb	r3, [r7, #7]
 800a450:	2b03      	cmp	r3, #3
 800a452:	d817      	bhi.n	800a484 <USBD_Get_USB_Status+0x44>
 800a454:	a201      	add	r2, pc, #4	; (adr r2, 800a45c <USBD_Get_USB_Status+0x1c>)
 800a456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45a:	bf00      	nop
 800a45c:	0800a46d 	.word	0x0800a46d
 800a460:	0800a473 	.word	0x0800a473
 800a464:	0800a479 	.word	0x0800a479
 800a468:	0800a47f 	.word	0x0800a47f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a46c:	2300      	movs	r3, #0
 800a46e:	73fb      	strb	r3, [r7, #15]
    break;
 800a470:	e00b      	b.n	800a48a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a472:	2303      	movs	r3, #3
 800a474:	73fb      	strb	r3, [r7, #15]
    break;
 800a476:	e008      	b.n	800a48a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a478:	2301      	movs	r3, #1
 800a47a:	73fb      	strb	r3, [r7, #15]
    break;
 800a47c:	e005      	b.n	800a48a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a47e:	2303      	movs	r3, #3
 800a480:	73fb      	strb	r3, [r7, #15]
    break;
 800a482:	e002      	b.n	800a48a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a484:	2303      	movs	r3, #3
 800a486:	73fb      	strb	r3, [r7, #15]
    break;
 800a488:	bf00      	nop
  }
  return usb_status;
 800a48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3714      	adds	r7, #20
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <__errno>:
 800a498:	4b01      	ldr	r3, [pc, #4]	; (800a4a0 <__errno+0x8>)
 800a49a:	6818      	ldr	r0, [r3, #0]
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	20000100 	.word	0x20000100

0800a4a4 <__libc_init_array>:
 800a4a4:	b570      	push	{r4, r5, r6, lr}
 800a4a6:	4d0d      	ldr	r5, [pc, #52]	; (800a4dc <__libc_init_array+0x38>)
 800a4a8:	4c0d      	ldr	r4, [pc, #52]	; (800a4e0 <__libc_init_array+0x3c>)
 800a4aa:	1b64      	subs	r4, r4, r5
 800a4ac:	10a4      	asrs	r4, r4, #2
 800a4ae:	2600      	movs	r6, #0
 800a4b0:	42a6      	cmp	r6, r4
 800a4b2:	d109      	bne.n	800a4c8 <__libc_init_array+0x24>
 800a4b4:	4d0b      	ldr	r5, [pc, #44]	; (800a4e4 <__libc_init_array+0x40>)
 800a4b6:	4c0c      	ldr	r4, [pc, #48]	; (800a4e8 <__libc_init_array+0x44>)
 800a4b8:	f000 fc8e 	bl	800add8 <_init>
 800a4bc:	1b64      	subs	r4, r4, r5
 800a4be:	10a4      	asrs	r4, r4, #2
 800a4c0:	2600      	movs	r6, #0
 800a4c2:	42a6      	cmp	r6, r4
 800a4c4:	d105      	bne.n	800a4d2 <__libc_init_array+0x2e>
 800a4c6:	bd70      	pop	{r4, r5, r6, pc}
 800a4c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4cc:	4798      	blx	r3
 800a4ce:	3601      	adds	r6, #1
 800a4d0:	e7ee      	b.n	800a4b0 <__libc_init_array+0xc>
 800a4d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4d6:	4798      	blx	r3
 800a4d8:	3601      	adds	r6, #1
 800a4da:	e7f2      	b.n	800a4c2 <__libc_init_array+0x1e>
 800a4dc:	0800af40 	.word	0x0800af40
 800a4e0:	0800af40 	.word	0x0800af40
 800a4e4:	0800af40 	.word	0x0800af40
 800a4e8:	0800af44 	.word	0x0800af44

0800a4ec <memset>:
 800a4ec:	4402      	add	r2, r0
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d100      	bne.n	800a4f6 <memset+0xa>
 800a4f4:	4770      	bx	lr
 800a4f6:	f803 1b01 	strb.w	r1, [r3], #1
 800a4fa:	e7f9      	b.n	800a4f0 <memset+0x4>

0800a4fc <siprintf>:
 800a4fc:	b40e      	push	{r1, r2, r3}
 800a4fe:	b500      	push	{lr}
 800a500:	b09c      	sub	sp, #112	; 0x70
 800a502:	ab1d      	add	r3, sp, #116	; 0x74
 800a504:	9002      	str	r0, [sp, #8]
 800a506:	9006      	str	r0, [sp, #24]
 800a508:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a50c:	4809      	ldr	r0, [pc, #36]	; (800a534 <siprintf+0x38>)
 800a50e:	9107      	str	r1, [sp, #28]
 800a510:	9104      	str	r1, [sp, #16]
 800a512:	4909      	ldr	r1, [pc, #36]	; (800a538 <siprintf+0x3c>)
 800a514:	f853 2b04 	ldr.w	r2, [r3], #4
 800a518:	9105      	str	r1, [sp, #20]
 800a51a:	6800      	ldr	r0, [r0, #0]
 800a51c:	9301      	str	r3, [sp, #4]
 800a51e:	a902      	add	r1, sp, #8
 800a520:	f000 f868 	bl	800a5f4 <_svfiprintf_r>
 800a524:	9b02      	ldr	r3, [sp, #8]
 800a526:	2200      	movs	r2, #0
 800a528:	701a      	strb	r2, [r3, #0]
 800a52a:	b01c      	add	sp, #112	; 0x70
 800a52c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a530:	b003      	add	sp, #12
 800a532:	4770      	bx	lr
 800a534:	20000100 	.word	0x20000100
 800a538:	ffff0208 	.word	0xffff0208

0800a53c <__ssputs_r>:
 800a53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a540:	688e      	ldr	r6, [r1, #8]
 800a542:	429e      	cmp	r6, r3
 800a544:	4682      	mov	sl, r0
 800a546:	460c      	mov	r4, r1
 800a548:	4690      	mov	r8, r2
 800a54a:	461f      	mov	r7, r3
 800a54c:	d838      	bhi.n	800a5c0 <__ssputs_r+0x84>
 800a54e:	898a      	ldrh	r2, [r1, #12]
 800a550:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a554:	d032      	beq.n	800a5bc <__ssputs_r+0x80>
 800a556:	6825      	ldr	r5, [r4, #0]
 800a558:	6909      	ldr	r1, [r1, #16]
 800a55a:	eba5 0901 	sub.w	r9, r5, r1
 800a55e:	6965      	ldr	r5, [r4, #20]
 800a560:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a564:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a568:	3301      	adds	r3, #1
 800a56a:	444b      	add	r3, r9
 800a56c:	106d      	asrs	r5, r5, #1
 800a56e:	429d      	cmp	r5, r3
 800a570:	bf38      	it	cc
 800a572:	461d      	movcc	r5, r3
 800a574:	0553      	lsls	r3, r2, #21
 800a576:	d531      	bpl.n	800a5dc <__ssputs_r+0xa0>
 800a578:	4629      	mov	r1, r5
 800a57a:	f000 fb63 	bl	800ac44 <_malloc_r>
 800a57e:	4606      	mov	r6, r0
 800a580:	b950      	cbnz	r0, 800a598 <__ssputs_r+0x5c>
 800a582:	230c      	movs	r3, #12
 800a584:	f8ca 3000 	str.w	r3, [sl]
 800a588:	89a3      	ldrh	r3, [r4, #12]
 800a58a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a58e:	81a3      	strh	r3, [r4, #12]
 800a590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a598:	6921      	ldr	r1, [r4, #16]
 800a59a:	464a      	mov	r2, r9
 800a59c:	f000 fabe 	bl	800ab1c <memcpy>
 800a5a0:	89a3      	ldrh	r3, [r4, #12]
 800a5a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5aa:	81a3      	strh	r3, [r4, #12]
 800a5ac:	6126      	str	r6, [r4, #16]
 800a5ae:	6165      	str	r5, [r4, #20]
 800a5b0:	444e      	add	r6, r9
 800a5b2:	eba5 0509 	sub.w	r5, r5, r9
 800a5b6:	6026      	str	r6, [r4, #0]
 800a5b8:	60a5      	str	r5, [r4, #8]
 800a5ba:	463e      	mov	r6, r7
 800a5bc:	42be      	cmp	r6, r7
 800a5be:	d900      	bls.n	800a5c2 <__ssputs_r+0x86>
 800a5c0:	463e      	mov	r6, r7
 800a5c2:	6820      	ldr	r0, [r4, #0]
 800a5c4:	4632      	mov	r2, r6
 800a5c6:	4641      	mov	r1, r8
 800a5c8:	f000 fab6 	bl	800ab38 <memmove>
 800a5cc:	68a3      	ldr	r3, [r4, #8]
 800a5ce:	1b9b      	subs	r3, r3, r6
 800a5d0:	60a3      	str	r3, [r4, #8]
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	4433      	add	r3, r6
 800a5d6:	6023      	str	r3, [r4, #0]
 800a5d8:	2000      	movs	r0, #0
 800a5da:	e7db      	b.n	800a594 <__ssputs_r+0x58>
 800a5dc:	462a      	mov	r2, r5
 800a5de:	f000 fba5 	bl	800ad2c <_realloc_r>
 800a5e2:	4606      	mov	r6, r0
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	d1e1      	bne.n	800a5ac <__ssputs_r+0x70>
 800a5e8:	6921      	ldr	r1, [r4, #16]
 800a5ea:	4650      	mov	r0, sl
 800a5ec:	f000 fabe 	bl	800ab6c <_free_r>
 800a5f0:	e7c7      	b.n	800a582 <__ssputs_r+0x46>
	...

0800a5f4 <_svfiprintf_r>:
 800a5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f8:	4698      	mov	r8, r3
 800a5fa:	898b      	ldrh	r3, [r1, #12]
 800a5fc:	061b      	lsls	r3, r3, #24
 800a5fe:	b09d      	sub	sp, #116	; 0x74
 800a600:	4607      	mov	r7, r0
 800a602:	460d      	mov	r5, r1
 800a604:	4614      	mov	r4, r2
 800a606:	d50e      	bpl.n	800a626 <_svfiprintf_r+0x32>
 800a608:	690b      	ldr	r3, [r1, #16]
 800a60a:	b963      	cbnz	r3, 800a626 <_svfiprintf_r+0x32>
 800a60c:	2140      	movs	r1, #64	; 0x40
 800a60e:	f000 fb19 	bl	800ac44 <_malloc_r>
 800a612:	6028      	str	r0, [r5, #0]
 800a614:	6128      	str	r0, [r5, #16]
 800a616:	b920      	cbnz	r0, 800a622 <_svfiprintf_r+0x2e>
 800a618:	230c      	movs	r3, #12
 800a61a:	603b      	str	r3, [r7, #0]
 800a61c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a620:	e0d1      	b.n	800a7c6 <_svfiprintf_r+0x1d2>
 800a622:	2340      	movs	r3, #64	; 0x40
 800a624:	616b      	str	r3, [r5, #20]
 800a626:	2300      	movs	r3, #0
 800a628:	9309      	str	r3, [sp, #36]	; 0x24
 800a62a:	2320      	movs	r3, #32
 800a62c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a630:	f8cd 800c 	str.w	r8, [sp, #12]
 800a634:	2330      	movs	r3, #48	; 0x30
 800a636:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a7e0 <_svfiprintf_r+0x1ec>
 800a63a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a63e:	f04f 0901 	mov.w	r9, #1
 800a642:	4623      	mov	r3, r4
 800a644:	469a      	mov	sl, r3
 800a646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a64a:	b10a      	cbz	r2, 800a650 <_svfiprintf_r+0x5c>
 800a64c:	2a25      	cmp	r2, #37	; 0x25
 800a64e:	d1f9      	bne.n	800a644 <_svfiprintf_r+0x50>
 800a650:	ebba 0b04 	subs.w	fp, sl, r4
 800a654:	d00b      	beq.n	800a66e <_svfiprintf_r+0x7a>
 800a656:	465b      	mov	r3, fp
 800a658:	4622      	mov	r2, r4
 800a65a:	4629      	mov	r1, r5
 800a65c:	4638      	mov	r0, r7
 800a65e:	f7ff ff6d 	bl	800a53c <__ssputs_r>
 800a662:	3001      	adds	r0, #1
 800a664:	f000 80aa 	beq.w	800a7bc <_svfiprintf_r+0x1c8>
 800a668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a66a:	445a      	add	r2, fp
 800a66c:	9209      	str	r2, [sp, #36]	; 0x24
 800a66e:	f89a 3000 	ldrb.w	r3, [sl]
 800a672:	2b00      	cmp	r3, #0
 800a674:	f000 80a2 	beq.w	800a7bc <_svfiprintf_r+0x1c8>
 800a678:	2300      	movs	r3, #0
 800a67a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a67e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a682:	f10a 0a01 	add.w	sl, sl, #1
 800a686:	9304      	str	r3, [sp, #16]
 800a688:	9307      	str	r3, [sp, #28]
 800a68a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a68e:	931a      	str	r3, [sp, #104]	; 0x68
 800a690:	4654      	mov	r4, sl
 800a692:	2205      	movs	r2, #5
 800a694:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a698:	4851      	ldr	r0, [pc, #324]	; (800a7e0 <_svfiprintf_r+0x1ec>)
 800a69a:	f7f5 fda9 	bl	80001f0 <memchr>
 800a69e:	9a04      	ldr	r2, [sp, #16]
 800a6a0:	b9d8      	cbnz	r0, 800a6da <_svfiprintf_r+0xe6>
 800a6a2:	06d0      	lsls	r0, r2, #27
 800a6a4:	bf44      	itt	mi
 800a6a6:	2320      	movmi	r3, #32
 800a6a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ac:	0711      	lsls	r1, r2, #28
 800a6ae:	bf44      	itt	mi
 800a6b0:	232b      	movmi	r3, #43	; 0x2b
 800a6b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ba:	2b2a      	cmp	r3, #42	; 0x2a
 800a6bc:	d015      	beq.n	800a6ea <_svfiprintf_r+0xf6>
 800a6be:	9a07      	ldr	r2, [sp, #28]
 800a6c0:	4654      	mov	r4, sl
 800a6c2:	2000      	movs	r0, #0
 800a6c4:	f04f 0c0a 	mov.w	ip, #10
 800a6c8:	4621      	mov	r1, r4
 800a6ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6ce:	3b30      	subs	r3, #48	; 0x30
 800a6d0:	2b09      	cmp	r3, #9
 800a6d2:	d94e      	bls.n	800a772 <_svfiprintf_r+0x17e>
 800a6d4:	b1b0      	cbz	r0, 800a704 <_svfiprintf_r+0x110>
 800a6d6:	9207      	str	r2, [sp, #28]
 800a6d8:	e014      	b.n	800a704 <_svfiprintf_r+0x110>
 800a6da:	eba0 0308 	sub.w	r3, r0, r8
 800a6de:	fa09 f303 	lsl.w	r3, r9, r3
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	9304      	str	r3, [sp, #16]
 800a6e6:	46a2      	mov	sl, r4
 800a6e8:	e7d2      	b.n	800a690 <_svfiprintf_r+0x9c>
 800a6ea:	9b03      	ldr	r3, [sp, #12]
 800a6ec:	1d19      	adds	r1, r3, #4
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	9103      	str	r1, [sp, #12]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	bfbb      	ittet	lt
 800a6f6:	425b      	neglt	r3, r3
 800a6f8:	f042 0202 	orrlt.w	r2, r2, #2
 800a6fc:	9307      	strge	r3, [sp, #28]
 800a6fe:	9307      	strlt	r3, [sp, #28]
 800a700:	bfb8      	it	lt
 800a702:	9204      	strlt	r2, [sp, #16]
 800a704:	7823      	ldrb	r3, [r4, #0]
 800a706:	2b2e      	cmp	r3, #46	; 0x2e
 800a708:	d10c      	bne.n	800a724 <_svfiprintf_r+0x130>
 800a70a:	7863      	ldrb	r3, [r4, #1]
 800a70c:	2b2a      	cmp	r3, #42	; 0x2a
 800a70e:	d135      	bne.n	800a77c <_svfiprintf_r+0x188>
 800a710:	9b03      	ldr	r3, [sp, #12]
 800a712:	1d1a      	adds	r2, r3, #4
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	9203      	str	r2, [sp, #12]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	bfb8      	it	lt
 800a71c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a720:	3402      	adds	r4, #2
 800a722:	9305      	str	r3, [sp, #20]
 800a724:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a7f0 <_svfiprintf_r+0x1fc>
 800a728:	7821      	ldrb	r1, [r4, #0]
 800a72a:	2203      	movs	r2, #3
 800a72c:	4650      	mov	r0, sl
 800a72e:	f7f5 fd5f 	bl	80001f0 <memchr>
 800a732:	b140      	cbz	r0, 800a746 <_svfiprintf_r+0x152>
 800a734:	2340      	movs	r3, #64	; 0x40
 800a736:	eba0 000a 	sub.w	r0, r0, sl
 800a73a:	fa03 f000 	lsl.w	r0, r3, r0
 800a73e:	9b04      	ldr	r3, [sp, #16]
 800a740:	4303      	orrs	r3, r0
 800a742:	3401      	adds	r4, #1
 800a744:	9304      	str	r3, [sp, #16]
 800a746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a74a:	4826      	ldr	r0, [pc, #152]	; (800a7e4 <_svfiprintf_r+0x1f0>)
 800a74c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a750:	2206      	movs	r2, #6
 800a752:	f7f5 fd4d 	bl	80001f0 <memchr>
 800a756:	2800      	cmp	r0, #0
 800a758:	d038      	beq.n	800a7cc <_svfiprintf_r+0x1d8>
 800a75a:	4b23      	ldr	r3, [pc, #140]	; (800a7e8 <_svfiprintf_r+0x1f4>)
 800a75c:	bb1b      	cbnz	r3, 800a7a6 <_svfiprintf_r+0x1b2>
 800a75e:	9b03      	ldr	r3, [sp, #12]
 800a760:	3307      	adds	r3, #7
 800a762:	f023 0307 	bic.w	r3, r3, #7
 800a766:	3308      	adds	r3, #8
 800a768:	9303      	str	r3, [sp, #12]
 800a76a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a76c:	4433      	add	r3, r6
 800a76e:	9309      	str	r3, [sp, #36]	; 0x24
 800a770:	e767      	b.n	800a642 <_svfiprintf_r+0x4e>
 800a772:	fb0c 3202 	mla	r2, ip, r2, r3
 800a776:	460c      	mov	r4, r1
 800a778:	2001      	movs	r0, #1
 800a77a:	e7a5      	b.n	800a6c8 <_svfiprintf_r+0xd4>
 800a77c:	2300      	movs	r3, #0
 800a77e:	3401      	adds	r4, #1
 800a780:	9305      	str	r3, [sp, #20]
 800a782:	4619      	mov	r1, r3
 800a784:	f04f 0c0a 	mov.w	ip, #10
 800a788:	4620      	mov	r0, r4
 800a78a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a78e:	3a30      	subs	r2, #48	; 0x30
 800a790:	2a09      	cmp	r2, #9
 800a792:	d903      	bls.n	800a79c <_svfiprintf_r+0x1a8>
 800a794:	2b00      	cmp	r3, #0
 800a796:	d0c5      	beq.n	800a724 <_svfiprintf_r+0x130>
 800a798:	9105      	str	r1, [sp, #20]
 800a79a:	e7c3      	b.n	800a724 <_svfiprintf_r+0x130>
 800a79c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7a0:	4604      	mov	r4, r0
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e7f0      	b.n	800a788 <_svfiprintf_r+0x194>
 800a7a6:	ab03      	add	r3, sp, #12
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	462a      	mov	r2, r5
 800a7ac:	4b0f      	ldr	r3, [pc, #60]	; (800a7ec <_svfiprintf_r+0x1f8>)
 800a7ae:	a904      	add	r1, sp, #16
 800a7b0:	4638      	mov	r0, r7
 800a7b2:	f3af 8000 	nop.w
 800a7b6:	1c42      	adds	r2, r0, #1
 800a7b8:	4606      	mov	r6, r0
 800a7ba:	d1d6      	bne.n	800a76a <_svfiprintf_r+0x176>
 800a7bc:	89ab      	ldrh	r3, [r5, #12]
 800a7be:	065b      	lsls	r3, r3, #25
 800a7c0:	f53f af2c 	bmi.w	800a61c <_svfiprintf_r+0x28>
 800a7c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7c6:	b01d      	add	sp, #116	; 0x74
 800a7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7cc:	ab03      	add	r3, sp, #12
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	462a      	mov	r2, r5
 800a7d2:	4b06      	ldr	r3, [pc, #24]	; (800a7ec <_svfiprintf_r+0x1f8>)
 800a7d4:	a904      	add	r1, sp, #16
 800a7d6:	4638      	mov	r0, r7
 800a7d8:	f000 f87a 	bl	800a8d0 <_printf_i>
 800a7dc:	e7eb      	b.n	800a7b6 <_svfiprintf_r+0x1c2>
 800a7de:	bf00      	nop
 800a7e0:	0800af04 	.word	0x0800af04
 800a7e4:	0800af0e 	.word	0x0800af0e
 800a7e8:	00000000 	.word	0x00000000
 800a7ec:	0800a53d 	.word	0x0800a53d
 800a7f0:	0800af0a 	.word	0x0800af0a

0800a7f4 <_printf_common>:
 800a7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f8:	4616      	mov	r6, r2
 800a7fa:	4699      	mov	r9, r3
 800a7fc:	688a      	ldr	r2, [r1, #8]
 800a7fe:	690b      	ldr	r3, [r1, #16]
 800a800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a804:	4293      	cmp	r3, r2
 800a806:	bfb8      	it	lt
 800a808:	4613      	movlt	r3, r2
 800a80a:	6033      	str	r3, [r6, #0]
 800a80c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a810:	4607      	mov	r7, r0
 800a812:	460c      	mov	r4, r1
 800a814:	b10a      	cbz	r2, 800a81a <_printf_common+0x26>
 800a816:	3301      	adds	r3, #1
 800a818:	6033      	str	r3, [r6, #0]
 800a81a:	6823      	ldr	r3, [r4, #0]
 800a81c:	0699      	lsls	r1, r3, #26
 800a81e:	bf42      	ittt	mi
 800a820:	6833      	ldrmi	r3, [r6, #0]
 800a822:	3302      	addmi	r3, #2
 800a824:	6033      	strmi	r3, [r6, #0]
 800a826:	6825      	ldr	r5, [r4, #0]
 800a828:	f015 0506 	ands.w	r5, r5, #6
 800a82c:	d106      	bne.n	800a83c <_printf_common+0x48>
 800a82e:	f104 0a19 	add.w	sl, r4, #25
 800a832:	68e3      	ldr	r3, [r4, #12]
 800a834:	6832      	ldr	r2, [r6, #0]
 800a836:	1a9b      	subs	r3, r3, r2
 800a838:	42ab      	cmp	r3, r5
 800a83a:	dc26      	bgt.n	800a88a <_printf_common+0x96>
 800a83c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a840:	1e13      	subs	r3, r2, #0
 800a842:	6822      	ldr	r2, [r4, #0]
 800a844:	bf18      	it	ne
 800a846:	2301      	movne	r3, #1
 800a848:	0692      	lsls	r2, r2, #26
 800a84a:	d42b      	bmi.n	800a8a4 <_printf_common+0xb0>
 800a84c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a850:	4649      	mov	r1, r9
 800a852:	4638      	mov	r0, r7
 800a854:	47c0      	blx	r8
 800a856:	3001      	adds	r0, #1
 800a858:	d01e      	beq.n	800a898 <_printf_common+0xa4>
 800a85a:	6823      	ldr	r3, [r4, #0]
 800a85c:	68e5      	ldr	r5, [r4, #12]
 800a85e:	6832      	ldr	r2, [r6, #0]
 800a860:	f003 0306 	and.w	r3, r3, #6
 800a864:	2b04      	cmp	r3, #4
 800a866:	bf08      	it	eq
 800a868:	1aad      	subeq	r5, r5, r2
 800a86a:	68a3      	ldr	r3, [r4, #8]
 800a86c:	6922      	ldr	r2, [r4, #16]
 800a86e:	bf0c      	ite	eq
 800a870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a874:	2500      	movne	r5, #0
 800a876:	4293      	cmp	r3, r2
 800a878:	bfc4      	itt	gt
 800a87a:	1a9b      	subgt	r3, r3, r2
 800a87c:	18ed      	addgt	r5, r5, r3
 800a87e:	2600      	movs	r6, #0
 800a880:	341a      	adds	r4, #26
 800a882:	42b5      	cmp	r5, r6
 800a884:	d11a      	bne.n	800a8bc <_printf_common+0xc8>
 800a886:	2000      	movs	r0, #0
 800a888:	e008      	b.n	800a89c <_printf_common+0xa8>
 800a88a:	2301      	movs	r3, #1
 800a88c:	4652      	mov	r2, sl
 800a88e:	4649      	mov	r1, r9
 800a890:	4638      	mov	r0, r7
 800a892:	47c0      	blx	r8
 800a894:	3001      	adds	r0, #1
 800a896:	d103      	bne.n	800a8a0 <_printf_common+0xac>
 800a898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a89c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a0:	3501      	adds	r5, #1
 800a8a2:	e7c6      	b.n	800a832 <_printf_common+0x3e>
 800a8a4:	18e1      	adds	r1, r4, r3
 800a8a6:	1c5a      	adds	r2, r3, #1
 800a8a8:	2030      	movs	r0, #48	; 0x30
 800a8aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8ae:	4422      	add	r2, r4
 800a8b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8b8:	3302      	adds	r3, #2
 800a8ba:	e7c7      	b.n	800a84c <_printf_common+0x58>
 800a8bc:	2301      	movs	r3, #1
 800a8be:	4622      	mov	r2, r4
 800a8c0:	4649      	mov	r1, r9
 800a8c2:	4638      	mov	r0, r7
 800a8c4:	47c0      	blx	r8
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	d0e6      	beq.n	800a898 <_printf_common+0xa4>
 800a8ca:	3601      	adds	r6, #1
 800a8cc:	e7d9      	b.n	800a882 <_printf_common+0x8e>
	...

0800a8d0 <_printf_i>:
 800a8d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d4:	7e0f      	ldrb	r7, [r1, #24]
 800a8d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8d8:	2f78      	cmp	r7, #120	; 0x78
 800a8da:	4691      	mov	r9, r2
 800a8dc:	4680      	mov	r8, r0
 800a8de:	460c      	mov	r4, r1
 800a8e0:	469a      	mov	sl, r3
 800a8e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a8e6:	d807      	bhi.n	800a8f8 <_printf_i+0x28>
 800a8e8:	2f62      	cmp	r7, #98	; 0x62
 800a8ea:	d80a      	bhi.n	800a902 <_printf_i+0x32>
 800a8ec:	2f00      	cmp	r7, #0
 800a8ee:	f000 80d8 	beq.w	800aaa2 <_printf_i+0x1d2>
 800a8f2:	2f58      	cmp	r7, #88	; 0x58
 800a8f4:	f000 80a3 	beq.w	800aa3e <_printf_i+0x16e>
 800a8f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a900:	e03a      	b.n	800a978 <_printf_i+0xa8>
 800a902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a906:	2b15      	cmp	r3, #21
 800a908:	d8f6      	bhi.n	800a8f8 <_printf_i+0x28>
 800a90a:	a101      	add	r1, pc, #4	; (adr r1, 800a910 <_printf_i+0x40>)
 800a90c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a910:	0800a969 	.word	0x0800a969
 800a914:	0800a97d 	.word	0x0800a97d
 800a918:	0800a8f9 	.word	0x0800a8f9
 800a91c:	0800a8f9 	.word	0x0800a8f9
 800a920:	0800a8f9 	.word	0x0800a8f9
 800a924:	0800a8f9 	.word	0x0800a8f9
 800a928:	0800a97d 	.word	0x0800a97d
 800a92c:	0800a8f9 	.word	0x0800a8f9
 800a930:	0800a8f9 	.word	0x0800a8f9
 800a934:	0800a8f9 	.word	0x0800a8f9
 800a938:	0800a8f9 	.word	0x0800a8f9
 800a93c:	0800aa89 	.word	0x0800aa89
 800a940:	0800a9ad 	.word	0x0800a9ad
 800a944:	0800aa6b 	.word	0x0800aa6b
 800a948:	0800a8f9 	.word	0x0800a8f9
 800a94c:	0800a8f9 	.word	0x0800a8f9
 800a950:	0800aaab 	.word	0x0800aaab
 800a954:	0800a8f9 	.word	0x0800a8f9
 800a958:	0800a9ad 	.word	0x0800a9ad
 800a95c:	0800a8f9 	.word	0x0800a8f9
 800a960:	0800a8f9 	.word	0x0800a8f9
 800a964:	0800aa73 	.word	0x0800aa73
 800a968:	682b      	ldr	r3, [r5, #0]
 800a96a:	1d1a      	adds	r2, r3, #4
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	602a      	str	r2, [r5, #0]
 800a970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a978:	2301      	movs	r3, #1
 800a97a:	e0a3      	b.n	800aac4 <_printf_i+0x1f4>
 800a97c:	6820      	ldr	r0, [r4, #0]
 800a97e:	6829      	ldr	r1, [r5, #0]
 800a980:	0606      	lsls	r6, r0, #24
 800a982:	f101 0304 	add.w	r3, r1, #4
 800a986:	d50a      	bpl.n	800a99e <_printf_i+0xce>
 800a988:	680e      	ldr	r6, [r1, #0]
 800a98a:	602b      	str	r3, [r5, #0]
 800a98c:	2e00      	cmp	r6, #0
 800a98e:	da03      	bge.n	800a998 <_printf_i+0xc8>
 800a990:	232d      	movs	r3, #45	; 0x2d
 800a992:	4276      	negs	r6, r6
 800a994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a998:	485e      	ldr	r0, [pc, #376]	; (800ab14 <_printf_i+0x244>)
 800a99a:	230a      	movs	r3, #10
 800a99c:	e019      	b.n	800a9d2 <_printf_i+0x102>
 800a99e:	680e      	ldr	r6, [r1, #0]
 800a9a0:	602b      	str	r3, [r5, #0]
 800a9a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a9a6:	bf18      	it	ne
 800a9a8:	b236      	sxthne	r6, r6
 800a9aa:	e7ef      	b.n	800a98c <_printf_i+0xbc>
 800a9ac:	682b      	ldr	r3, [r5, #0]
 800a9ae:	6820      	ldr	r0, [r4, #0]
 800a9b0:	1d19      	adds	r1, r3, #4
 800a9b2:	6029      	str	r1, [r5, #0]
 800a9b4:	0601      	lsls	r1, r0, #24
 800a9b6:	d501      	bpl.n	800a9bc <_printf_i+0xec>
 800a9b8:	681e      	ldr	r6, [r3, #0]
 800a9ba:	e002      	b.n	800a9c2 <_printf_i+0xf2>
 800a9bc:	0646      	lsls	r6, r0, #25
 800a9be:	d5fb      	bpl.n	800a9b8 <_printf_i+0xe8>
 800a9c0:	881e      	ldrh	r6, [r3, #0]
 800a9c2:	4854      	ldr	r0, [pc, #336]	; (800ab14 <_printf_i+0x244>)
 800a9c4:	2f6f      	cmp	r7, #111	; 0x6f
 800a9c6:	bf0c      	ite	eq
 800a9c8:	2308      	moveq	r3, #8
 800a9ca:	230a      	movne	r3, #10
 800a9cc:	2100      	movs	r1, #0
 800a9ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9d2:	6865      	ldr	r5, [r4, #4]
 800a9d4:	60a5      	str	r5, [r4, #8]
 800a9d6:	2d00      	cmp	r5, #0
 800a9d8:	bfa2      	ittt	ge
 800a9da:	6821      	ldrge	r1, [r4, #0]
 800a9dc:	f021 0104 	bicge.w	r1, r1, #4
 800a9e0:	6021      	strge	r1, [r4, #0]
 800a9e2:	b90e      	cbnz	r6, 800a9e8 <_printf_i+0x118>
 800a9e4:	2d00      	cmp	r5, #0
 800a9e6:	d04d      	beq.n	800aa84 <_printf_i+0x1b4>
 800a9e8:	4615      	mov	r5, r2
 800a9ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800a9ee:	fb03 6711 	mls	r7, r3, r1, r6
 800a9f2:	5dc7      	ldrb	r7, [r0, r7]
 800a9f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a9f8:	4637      	mov	r7, r6
 800a9fa:	42bb      	cmp	r3, r7
 800a9fc:	460e      	mov	r6, r1
 800a9fe:	d9f4      	bls.n	800a9ea <_printf_i+0x11a>
 800aa00:	2b08      	cmp	r3, #8
 800aa02:	d10b      	bne.n	800aa1c <_printf_i+0x14c>
 800aa04:	6823      	ldr	r3, [r4, #0]
 800aa06:	07de      	lsls	r6, r3, #31
 800aa08:	d508      	bpl.n	800aa1c <_printf_i+0x14c>
 800aa0a:	6923      	ldr	r3, [r4, #16]
 800aa0c:	6861      	ldr	r1, [r4, #4]
 800aa0e:	4299      	cmp	r1, r3
 800aa10:	bfde      	ittt	le
 800aa12:	2330      	movle	r3, #48	; 0x30
 800aa14:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa18:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800aa1c:	1b52      	subs	r2, r2, r5
 800aa1e:	6122      	str	r2, [r4, #16]
 800aa20:	f8cd a000 	str.w	sl, [sp]
 800aa24:	464b      	mov	r3, r9
 800aa26:	aa03      	add	r2, sp, #12
 800aa28:	4621      	mov	r1, r4
 800aa2a:	4640      	mov	r0, r8
 800aa2c:	f7ff fee2 	bl	800a7f4 <_printf_common>
 800aa30:	3001      	adds	r0, #1
 800aa32:	d14c      	bne.n	800aace <_printf_i+0x1fe>
 800aa34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa38:	b004      	add	sp, #16
 800aa3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa3e:	4835      	ldr	r0, [pc, #212]	; (800ab14 <_printf_i+0x244>)
 800aa40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aa44:	6829      	ldr	r1, [r5, #0]
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa4c:	6029      	str	r1, [r5, #0]
 800aa4e:	061d      	lsls	r5, r3, #24
 800aa50:	d514      	bpl.n	800aa7c <_printf_i+0x1ac>
 800aa52:	07df      	lsls	r7, r3, #31
 800aa54:	bf44      	itt	mi
 800aa56:	f043 0320 	orrmi.w	r3, r3, #32
 800aa5a:	6023      	strmi	r3, [r4, #0]
 800aa5c:	b91e      	cbnz	r6, 800aa66 <_printf_i+0x196>
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	f023 0320 	bic.w	r3, r3, #32
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	2310      	movs	r3, #16
 800aa68:	e7b0      	b.n	800a9cc <_printf_i+0xfc>
 800aa6a:	6823      	ldr	r3, [r4, #0]
 800aa6c:	f043 0320 	orr.w	r3, r3, #32
 800aa70:	6023      	str	r3, [r4, #0]
 800aa72:	2378      	movs	r3, #120	; 0x78
 800aa74:	4828      	ldr	r0, [pc, #160]	; (800ab18 <_printf_i+0x248>)
 800aa76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa7a:	e7e3      	b.n	800aa44 <_printf_i+0x174>
 800aa7c:	0659      	lsls	r1, r3, #25
 800aa7e:	bf48      	it	mi
 800aa80:	b2b6      	uxthmi	r6, r6
 800aa82:	e7e6      	b.n	800aa52 <_printf_i+0x182>
 800aa84:	4615      	mov	r5, r2
 800aa86:	e7bb      	b.n	800aa00 <_printf_i+0x130>
 800aa88:	682b      	ldr	r3, [r5, #0]
 800aa8a:	6826      	ldr	r6, [r4, #0]
 800aa8c:	6961      	ldr	r1, [r4, #20]
 800aa8e:	1d18      	adds	r0, r3, #4
 800aa90:	6028      	str	r0, [r5, #0]
 800aa92:	0635      	lsls	r5, r6, #24
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	d501      	bpl.n	800aa9c <_printf_i+0x1cc>
 800aa98:	6019      	str	r1, [r3, #0]
 800aa9a:	e002      	b.n	800aaa2 <_printf_i+0x1d2>
 800aa9c:	0670      	lsls	r0, r6, #25
 800aa9e:	d5fb      	bpl.n	800aa98 <_printf_i+0x1c8>
 800aaa0:	8019      	strh	r1, [r3, #0]
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	6123      	str	r3, [r4, #16]
 800aaa6:	4615      	mov	r5, r2
 800aaa8:	e7ba      	b.n	800aa20 <_printf_i+0x150>
 800aaaa:	682b      	ldr	r3, [r5, #0]
 800aaac:	1d1a      	adds	r2, r3, #4
 800aaae:	602a      	str	r2, [r5, #0]
 800aab0:	681d      	ldr	r5, [r3, #0]
 800aab2:	6862      	ldr	r2, [r4, #4]
 800aab4:	2100      	movs	r1, #0
 800aab6:	4628      	mov	r0, r5
 800aab8:	f7f5 fb9a 	bl	80001f0 <memchr>
 800aabc:	b108      	cbz	r0, 800aac2 <_printf_i+0x1f2>
 800aabe:	1b40      	subs	r0, r0, r5
 800aac0:	6060      	str	r0, [r4, #4]
 800aac2:	6863      	ldr	r3, [r4, #4]
 800aac4:	6123      	str	r3, [r4, #16]
 800aac6:	2300      	movs	r3, #0
 800aac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aacc:	e7a8      	b.n	800aa20 <_printf_i+0x150>
 800aace:	6923      	ldr	r3, [r4, #16]
 800aad0:	462a      	mov	r2, r5
 800aad2:	4649      	mov	r1, r9
 800aad4:	4640      	mov	r0, r8
 800aad6:	47d0      	blx	sl
 800aad8:	3001      	adds	r0, #1
 800aada:	d0ab      	beq.n	800aa34 <_printf_i+0x164>
 800aadc:	6823      	ldr	r3, [r4, #0]
 800aade:	079b      	lsls	r3, r3, #30
 800aae0:	d413      	bmi.n	800ab0a <_printf_i+0x23a>
 800aae2:	68e0      	ldr	r0, [r4, #12]
 800aae4:	9b03      	ldr	r3, [sp, #12]
 800aae6:	4298      	cmp	r0, r3
 800aae8:	bfb8      	it	lt
 800aaea:	4618      	movlt	r0, r3
 800aaec:	e7a4      	b.n	800aa38 <_printf_i+0x168>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	4632      	mov	r2, r6
 800aaf2:	4649      	mov	r1, r9
 800aaf4:	4640      	mov	r0, r8
 800aaf6:	47d0      	blx	sl
 800aaf8:	3001      	adds	r0, #1
 800aafa:	d09b      	beq.n	800aa34 <_printf_i+0x164>
 800aafc:	3501      	adds	r5, #1
 800aafe:	68e3      	ldr	r3, [r4, #12]
 800ab00:	9903      	ldr	r1, [sp, #12]
 800ab02:	1a5b      	subs	r3, r3, r1
 800ab04:	42ab      	cmp	r3, r5
 800ab06:	dcf2      	bgt.n	800aaee <_printf_i+0x21e>
 800ab08:	e7eb      	b.n	800aae2 <_printf_i+0x212>
 800ab0a:	2500      	movs	r5, #0
 800ab0c:	f104 0619 	add.w	r6, r4, #25
 800ab10:	e7f5      	b.n	800aafe <_printf_i+0x22e>
 800ab12:	bf00      	nop
 800ab14:	0800af15 	.word	0x0800af15
 800ab18:	0800af26 	.word	0x0800af26

0800ab1c <memcpy>:
 800ab1c:	440a      	add	r2, r1
 800ab1e:	4291      	cmp	r1, r2
 800ab20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ab24:	d100      	bne.n	800ab28 <memcpy+0xc>
 800ab26:	4770      	bx	lr
 800ab28:	b510      	push	{r4, lr}
 800ab2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab32:	4291      	cmp	r1, r2
 800ab34:	d1f9      	bne.n	800ab2a <memcpy+0xe>
 800ab36:	bd10      	pop	{r4, pc}

0800ab38 <memmove>:
 800ab38:	4288      	cmp	r0, r1
 800ab3a:	b510      	push	{r4, lr}
 800ab3c:	eb01 0402 	add.w	r4, r1, r2
 800ab40:	d902      	bls.n	800ab48 <memmove+0x10>
 800ab42:	4284      	cmp	r4, r0
 800ab44:	4623      	mov	r3, r4
 800ab46:	d807      	bhi.n	800ab58 <memmove+0x20>
 800ab48:	1e43      	subs	r3, r0, #1
 800ab4a:	42a1      	cmp	r1, r4
 800ab4c:	d008      	beq.n	800ab60 <memmove+0x28>
 800ab4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab52:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab56:	e7f8      	b.n	800ab4a <memmove+0x12>
 800ab58:	4402      	add	r2, r0
 800ab5a:	4601      	mov	r1, r0
 800ab5c:	428a      	cmp	r2, r1
 800ab5e:	d100      	bne.n	800ab62 <memmove+0x2a>
 800ab60:	bd10      	pop	{r4, pc}
 800ab62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab6a:	e7f7      	b.n	800ab5c <memmove+0x24>

0800ab6c <_free_r>:
 800ab6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab6e:	2900      	cmp	r1, #0
 800ab70:	d044      	beq.n	800abfc <_free_r+0x90>
 800ab72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab76:	9001      	str	r0, [sp, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f1a1 0404 	sub.w	r4, r1, #4
 800ab7e:	bfb8      	it	lt
 800ab80:	18e4      	addlt	r4, r4, r3
 800ab82:	f000 f913 	bl	800adac <__malloc_lock>
 800ab86:	4a1e      	ldr	r2, [pc, #120]	; (800ac00 <_free_r+0x94>)
 800ab88:	9801      	ldr	r0, [sp, #4]
 800ab8a:	6813      	ldr	r3, [r2, #0]
 800ab8c:	b933      	cbnz	r3, 800ab9c <_free_r+0x30>
 800ab8e:	6063      	str	r3, [r4, #4]
 800ab90:	6014      	str	r4, [r2, #0]
 800ab92:	b003      	add	sp, #12
 800ab94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab98:	f000 b90e 	b.w	800adb8 <__malloc_unlock>
 800ab9c:	42a3      	cmp	r3, r4
 800ab9e:	d908      	bls.n	800abb2 <_free_r+0x46>
 800aba0:	6825      	ldr	r5, [r4, #0]
 800aba2:	1961      	adds	r1, r4, r5
 800aba4:	428b      	cmp	r3, r1
 800aba6:	bf01      	itttt	eq
 800aba8:	6819      	ldreq	r1, [r3, #0]
 800abaa:	685b      	ldreq	r3, [r3, #4]
 800abac:	1949      	addeq	r1, r1, r5
 800abae:	6021      	streq	r1, [r4, #0]
 800abb0:	e7ed      	b.n	800ab8e <_free_r+0x22>
 800abb2:	461a      	mov	r2, r3
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	b10b      	cbz	r3, 800abbc <_free_r+0x50>
 800abb8:	42a3      	cmp	r3, r4
 800abba:	d9fa      	bls.n	800abb2 <_free_r+0x46>
 800abbc:	6811      	ldr	r1, [r2, #0]
 800abbe:	1855      	adds	r5, r2, r1
 800abc0:	42a5      	cmp	r5, r4
 800abc2:	d10b      	bne.n	800abdc <_free_r+0x70>
 800abc4:	6824      	ldr	r4, [r4, #0]
 800abc6:	4421      	add	r1, r4
 800abc8:	1854      	adds	r4, r2, r1
 800abca:	42a3      	cmp	r3, r4
 800abcc:	6011      	str	r1, [r2, #0]
 800abce:	d1e0      	bne.n	800ab92 <_free_r+0x26>
 800abd0:	681c      	ldr	r4, [r3, #0]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	6053      	str	r3, [r2, #4]
 800abd6:	4421      	add	r1, r4
 800abd8:	6011      	str	r1, [r2, #0]
 800abda:	e7da      	b.n	800ab92 <_free_r+0x26>
 800abdc:	d902      	bls.n	800abe4 <_free_r+0x78>
 800abde:	230c      	movs	r3, #12
 800abe0:	6003      	str	r3, [r0, #0]
 800abe2:	e7d6      	b.n	800ab92 <_free_r+0x26>
 800abe4:	6825      	ldr	r5, [r4, #0]
 800abe6:	1961      	adds	r1, r4, r5
 800abe8:	428b      	cmp	r3, r1
 800abea:	bf04      	itt	eq
 800abec:	6819      	ldreq	r1, [r3, #0]
 800abee:	685b      	ldreq	r3, [r3, #4]
 800abf0:	6063      	str	r3, [r4, #4]
 800abf2:	bf04      	itt	eq
 800abf4:	1949      	addeq	r1, r1, r5
 800abf6:	6021      	streq	r1, [r4, #0]
 800abf8:	6054      	str	r4, [r2, #4]
 800abfa:	e7ca      	b.n	800ab92 <_free_r+0x26>
 800abfc:	b003      	add	sp, #12
 800abfe:	bd30      	pop	{r4, r5, pc}
 800ac00:	20001f48 	.word	0x20001f48

0800ac04 <sbrk_aligned>:
 800ac04:	b570      	push	{r4, r5, r6, lr}
 800ac06:	4e0e      	ldr	r6, [pc, #56]	; (800ac40 <sbrk_aligned+0x3c>)
 800ac08:	460c      	mov	r4, r1
 800ac0a:	6831      	ldr	r1, [r6, #0]
 800ac0c:	4605      	mov	r5, r0
 800ac0e:	b911      	cbnz	r1, 800ac16 <sbrk_aligned+0x12>
 800ac10:	f000 f8bc 	bl	800ad8c <_sbrk_r>
 800ac14:	6030      	str	r0, [r6, #0]
 800ac16:	4621      	mov	r1, r4
 800ac18:	4628      	mov	r0, r5
 800ac1a:	f000 f8b7 	bl	800ad8c <_sbrk_r>
 800ac1e:	1c43      	adds	r3, r0, #1
 800ac20:	d00a      	beq.n	800ac38 <sbrk_aligned+0x34>
 800ac22:	1cc4      	adds	r4, r0, #3
 800ac24:	f024 0403 	bic.w	r4, r4, #3
 800ac28:	42a0      	cmp	r0, r4
 800ac2a:	d007      	beq.n	800ac3c <sbrk_aligned+0x38>
 800ac2c:	1a21      	subs	r1, r4, r0
 800ac2e:	4628      	mov	r0, r5
 800ac30:	f000 f8ac 	bl	800ad8c <_sbrk_r>
 800ac34:	3001      	adds	r0, #1
 800ac36:	d101      	bne.n	800ac3c <sbrk_aligned+0x38>
 800ac38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	bd70      	pop	{r4, r5, r6, pc}
 800ac40:	20001f4c 	.word	0x20001f4c

0800ac44 <_malloc_r>:
 800ac44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac48:	1ccd      	adds	r5, r1, #3
 800ac4a:	f025 0503 	bic.w	r5, r5, #3
 800ac4e:	3508      	adds	r5, #8
 800ac50:	2d0c      	cmp	r5, #12
 800ac52:	bf38      	it	cc
 800ac54:	250c      	movcc	r5, #12
 800ac56:	2d00      	cmp	r5, #0
 800ac58:	4607      	mov	r7, r0
 800ac5a:	db01      	blt.n	800ac60 <_malloc_r+0x1c>
 800ac5c:	42a9      	cmp	r1, r5
 800ac5e:	d905      	bls.n	800ac6c <_malloc_r+0x28>
 800ac60:	230c      	movs	r3, #12
 800ac62:	603b      	str	r3, [r7, #0]
 800ac64:	2600      	movs	r6, #0
 800ac66:	4630      	mov	r0, r6
 800ac68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac6c:	4e2e      	ldr	r6, [pc, #184]	; (800ad28 <_malloc_r+0xe4>)
 800ac6e:	f000 f89d 	bl	800adac <__malloc_lock>
 800ac72:	6833      	ldr	r3, [r6, #0]
 800ac74:	461c      	mov	r4, r3
 800ac76:	bb34      	cbnz	r4, 800acc6 <_malloc_r+0x82>
 800ac78:	4629      	mov	r1, r5
 800ac7a:	4638      	mov	r0, r7
 800ac7c:	f7ff ffc2 	bl	800ac04 <sbrk_aligned>
 800ac80:	1c43      	adds	r3, r0, #1
 800ac82:	4604      	mov	r4, r0
 800ac84:	d14d      	bne.n	800ad22 <_malloc_r+0xde>
 800ac86:	6834      	ldr	r4, [r6, #0]
 800ac88:	4626      	mov	r6, r4
 800ac8a:	2e00      	cmp	r6, #0
 800ac8c:	d140      	bne.n	800ad10 <_malloc_r+0xcc>
 800ac8e:	6823      	ldr	r3, [r4, #0]
 800ac90:	4631      	mov	r1, r6
 800ac92:	4638      	mov	r0, r7
 800ac94:	eb04 0803 	add.w	r8, r4, r3
 800ac98:	f000 f878 	bl	800ad8c <_sbrk_r>
 800ac9c:	4580      	cmp	r8, r0
 800ac9e:	d13a      	bne.n	800ad16 <_malloc_r+0xd2>
 800aca0:	6821      	ldr	r1, [r4, #0]
 800aca2:	3503      	adds	r5, #3
 800aca4:	1a6d      	subs	r5, r5, r1
 800aca6:	f025 0503 	bic.w	r5, r5, #3
 800acaa:	3508      	adds	r5, #8
 800acac:	2d0c      	cmp	r5, #12
 800acae:	bf38      	it	cc
 800acb0:	250c      	movcc	r5, #12
 800acb2:	4629      	mov	r1, r5
 800acb4:	4638      	mov	r0, r7
 800acb6:	f7ff ffa5 	bl	800ac04 <sbrk_aligned>
 800acba:	3001      	adds	r0, #1
 800acbc:	d02b      	beq.n	800ad16 <_malloc_r+0xd2>
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	442b      	add	r3, r5
 800acc2:	6023      	str	r3, [r4, #0]
 800acc4:	e00e      	b.n	800ace4 <_malloc_r+0xa0>
 800acc6:	6822      	ldr	r2, [r4, #0]
 800acc8:	1b52      	subs	r2, r2, r5
 800acca:	d41e      	bmi.n	800ad0a <_malloc_r+0xc6>
 800accc:	2a0b      	cmp	r2, #11
 800acce:	d916      	bls.n	800acfe <_malloc_r+0xba>
 800acd0:	1961      	adds	r1, r4, r5
 800acd2:	42a3      	cmp	r3, r4
 800acd4:	6025      	str	r5, [r4, #0]
 800acd6:	bf18      	it	ne
 800acd8:	6059      	strne	r1, [r3, #4]
 800acda:	6863      	ldr	r3, [r4, #4]
 800acdc:	bf08      	it	eq
 800acde:	6031      	streq	r1, [r6, #0]
 800ace0:	5162      	str	r2, [r4, r5]
 800ace2:	604b      	str	r3, [r1, #4]
 800ace4:	4638      	mov	r0, r7
 800ace6:	f104 060b 	add.w	r6, r4, #11
 800acea:	f000 f865 	bl	800adb8 <__malloc_unlock>
 800acee:	f026 0607 	bic.w	r6, r6, #7
 800acf2:	1d23      	adds	r3, r4, #4
 800acf4:	1af2      	subs	r2, r6, r3
 800acf6:	d0b6      	beq.n	800ac66 <_malloc_r+0x22>
 800acf8:	1b9b      	subs	r3, r3, r6
 800acfa:	50a3      	str	r3, [r4, r2]
 800acfc:	e7b3      	b.n	800ac66 <_malloc_r+0x22>
 800acfe:	6862      	ldr	r2, [r4, #4]
 800ad00:	42a3      	cmp	r3, r4
 800ad02:	bf0c      	ite	eq
 800ad04:	6032      	streq	r2, [r6, #0]
 800ad06:	605a      	strne	r2, [r3, #4]
 800ad08:	e7ec      	b.n	800ace4 <_malloc_r+0xa0>
 800ad0a:	4623      	mov	r3, r4
 800ad0c:	6864      	ldr	r4, [r4, #4]
 800ad0e:	e7b2      	b.n	800ac76 <_malloc_r+0x32>
 800ad10:	4634      	mov	r4, r6
 800ad12:	6876      	ldr	r6, [r6, #4]
 800ad14:	e7b9      	b.n	800ac8a <_malloc_r+0x46>
 800ad16:	230c      	movs	r3, #12
 800ad18:	603b      	str	r3, [r7, #0]
 800ad1a:	4638      	mov	r0, r7
 800ad1c:	f000 f84c 	bl	800adb8 <__malloc_unlock>
 800ad20:	e7a1      	b.n	800ac66 <_malloc_r+0x22>
 800ad22:	6025      	str	r5, [r4, #0]
 800ad24:	e7de      	b.n	800ace4 <_malloc_r+0xa0>
 800ad26:	bf00      	nop
 800ad28:	20001f48 	.word	0x20001f48

0800ad2c <_realloc_r>:
 800ad2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad30:	4680      	mov	r8, r0
 800ad32:	4614      	mov	r4, r2
 800ad34:	460e      	mov	r6, r1
 800ad36:	b921      	cbnz	r1, 800ad42 <_realloc_r+0x16>
 800ad38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad3c:	4611      	mov	r1, r2
 800ad3e:	f7ff bf81 	b.w	800ac44 <_malloc_r>
 800ad42:	b92a      	cbnz	r2, 800ad50 <_realloc_r+0x24>
 800ad44:	f7ff ff12 	bl	800ab6c <_free_r>
 800ad48:	4625      	mov	r5, r4
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad50:	f000 f838 	bl	800adc4 <_malloc_usable_size_r>
 800ad54:	4284      	cmp	r4, r0
 800ad56:	4607      	mov	r7, r0
 800ad58:	d802      	bhi.n	800ad60 <_realloc_r+0x34>
 800ad5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad5e:	d812      	bhi.n	800ad86 <_realloc_r+0x5a>
 800ad60:	4621      	mov	r1, r4
 800ad62:	4640      	mov	r0, r8
 800ad64:	f7ff ff6e 	bl	800ac44 <_malloc_r>
 800ad68:	4605      	mov	r5, r0
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d0ed      	beq.n	800ad4a <_realloc_r+0x1e>
 800ad6e:	42bc      	cmp	r4, r7
 800ad70:	4622      	mov	r2, r4
 800ad72:	4631      	mov	r1, r6
 800ad74:	bf28      	it	cs
 800ad76:	463a      	movcs	r2, r7
 800ad78:	f7ff fed0 	bl	800ab1c <memcpy>
 800ad7c:	4631      	mov	r1, r6
 800ad7e:	4640      	mov	r0, r8
 800ad80:	f7ff fef4 	bl	800ab6c <_free_r>
 800ad84:	e7e1      	b.n	800ad4a <_realloc_r+0x1e>
 800ad86:	4635      	mov	r5, r6
 800ad88:	e7df      	b.n	800ad4a <_realloc_r+0x1e>
	...

0800ad8c <_sbrk_r>:
 800ad8c:	b538      	push	{r3, r4, r5, lr}
 800ad8e:	4d06      	ldr	r5, [pc, #24]	; (800ada8 <_sbrk_r+0x1c>)
 800ad90:	2300      	movs	r3, #0
 800ad92:	4604      	mov	r4, r0
 800ad94:	4608      	mov	r0, r1
 800ad96:	602b      	str	r3, [r5, #0]
 800ad98:	f7f6 f988 	bl	80010ac <_sbrk>
 800ad9c:	1c43      	adds	r3, r0, #1
 800ad9e:	d102      	bne.n	800ada6 <_sbrk_r+0x1a>
 800ada0:	682b      	ldr	r3, [r5, #0]
 800ada2:	b103      	cbz	r3, 800ada6 <_sbrk_r+0x1a>
 800ada4:	6023      	str	r3, [r4, #0]
 800ada6:	bd38      	pop	{r3, r4, r5, pc}
 800ada8:	20001f50 	.word	0x20001f50

0800adac <__malloc_lock>:
 800adac:	4801      	ldr	r0, [pc, #4]	; (800adb4 <__malloc_lock+0x8>)
 800adae:	f000 b811 	b.w	800add4 <__retarget_lock_acquire_recursive>
 800adb2:	bf00      	nop
 800adb4:	20001f54 	.word	0x20001f54

0800adb8 <__malloc_unlock>:
 800adb8:	4801      	ldr	r0, [pc, #4]	; (800adc0 <__malloc_unlock+0x8>)
 800adba:	f000 b80c 	b.w	800add6 <__retarget_lock_release_recursive>
 800adbe:	bf00      	nop
 800adc0:	20001f54 	.word	0x20001f54

0800adc4 <_malloc_usable_size_r>:
 800adc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adc8:	1f18      	subs	r0, r3, #4
 800adca:	2b00      	cmp	r3, #0
 800adcc:	bfbc      	itt	lt
 800adce:	580b      	ldrlt	r3, [r1, r0]
 800add0:	18c0      	addlt	r0, r0, r3
 800add2:	4770      	bx	lr

0800add4 <__retarget_lock_acquire_recursive>:
 800add4:	4770      	bx	lr

0800add6 <__retarget_lock_release_recursive>:
 800add6:	4770      	bx	lr

0800add8 <_init>:
 800add8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adda:	bf00      	nop
 800addc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adde:	bc08      	pop	{r3}
 800ade0:	469e      	mov	lr, r3
 800ade2:	4770      	bx	lr

0800ade4 <_fini>:
 800ade4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade6:	bf00      	nop
 800ade8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adea:	bc08      	pop	{r3}
 800adec:	469e      	mov	lr, r3
 800adee:	4770      	bx	lr
