
Daughterboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d340  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001f4f4  0800d4e0  0800d4e0  0001d4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802c9d4  0802c9d4  00040090  2**0
                  CONTENTS
  4 .ARM          00000008  0802c9d4  0802c9d4  0003c9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802c9dc  0802c9dc  00040090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802c9dc  0802c9dc  0003c9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802c9e0  0802c9e0  0003c9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0802c9e4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ea0  20000090  0802ca74  00040090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f30  0802ca74  00044f30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022840  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043db  00000000  00000000  00062900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c98  00000000  00000000  00066ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001af0  00000000  00000000  00068978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005ba9  00000000  00000000  0006a468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef6a  00000000  00000000  00070011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eba2  00000000  00000000  0008ef7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012db1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f18  00000000  00000000  0012db70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d4c8 	.word	0x0800d4c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800d4c8 	.word	0x0800d4c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f002 f83a 	bl	8002600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f854 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f9da 	bl	8000948 <MX_GPIO_Init>
  MX_DMA_Init();
 8000594:	f000 f972 	bl	800087c <MX_DMA_Init>
  MX_SPI1_Init();
 8000598:	f000 f8b6 	bl	8000708 <MX_SPI1_Init>
  MX_TIM1_Init();
 800059c:	f000 f8ea 	bl	8000774 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005a0:	f000 f940 	bl	8000824 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a4:	f008 ff90 	bl	80094c8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of xSemaphoreDMAComplete */
  xSemaphoreDMACompleteHandle = osSemaphoreNew(1, 1, &xSemaphoreDMAComplete_attributes);
 80005a8:	4a15      	ldr	r2, [pc, #84]	; (8000600 <main+0x7c>)
 80005aa:	2101      	movs	r1, #1
 80005ac:	2001      	movs	r0, #1
 80005ae:	f009 f882 	bl	80096b6 <osSemaphoreNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a13      	ldr	r2, [pc, #76]	; (8000604 <main+0x80>)
 80005b6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005b8:	4a13      	ldr	r2, [pc, #76]	; (8000608 <main+0x84>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	4813      	ldr	r0, [pc, #76]	; (800060c <main+0x88>)
 80005be:	f008 ffcd 	bl	800955c <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a12      	ldr	r2, [pc, #72]	; (8000610 <main+0x8c>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* creation of TaskLCD */
  TaskLCDHandle = osThreadNew(vTaskLCD, NULL, &TaskLCD_attributes);
 80005c8:	4a12      	ldr	r2, [pc, #72]	; (8000614 <main+0x90>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4812      	ldr	r0, [pc, #72]	; (8000618 <main+0x94>)
 80005ce:	f008 ffc5 	bl	800955c <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a11      	ldr	r2, [pc, #68]	; (800061c <main+0x98>)
 80005d6:	6013      	str	r3, [r2, #0]

  /* creation of TaskBlink */
  TaskBlinkHandle = osThreadNew(vTaskBlink, NULL, &TaskBlink_attributes);
 80005d8:	4a11      	ldr	r2, [pc, #68]	; (8000620 <main+0x9c>)
 80005da:	2100      	movs	r1, #0
 80005dc:	4811      	ldr	r0, [pc, #68]	; (8000624 <main+0xa0>)
 80005de:	f008 ffbd 	bl	800955c <osThreadNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a10      	ldr	r2, [pc, #64]	; (8000628 <main+0xa4>)
 80005e6:	6013      	str	r3, [r2, #0]

  /* creation of TaskLeds */
  TaskLedsHandle = osThreadNew(vTaskLeds, NULL, &TaskLeds_attributes);
 80005e8:	4a10      	ldr	r2, [pc, #64]	; (800062c <main+0xa8>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	4810      	ldr	r0, [pc, #64]	; (8000630 <main+0xac>)
 80005ee:	f008 ffb5 	bl	800955c <osThreadNew>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a0f      	ldr	r2, [pc, #60]	; (8000634 <main+0xb0>)
 80005f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005f8:	f008 ff8a 	bl	8009510 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x78>
 80005fe:	bf00      	nop
 8000600:	0800d6ec 	.word	0x0800d6ec
 8000604:	200002c0 	.word	0x200002c0
 8000608:	0800d65c 	.word	0x0800d65c
 800060c:	08000b11 	.word	0x08000b11
 8000610:	200002b0 	.word	0x200002b0
 8000614:	0800d680 	.word	0x0800d680
 8000618:	08000b4d 	.word	0x08000b4d
 800061c:	200002b4 	.word	0x200002b4
 8000620:	0800d6a4 	.word	0x0800d6a4
 8000624:	08000dbd 	.word	0x08000dbd
 8000628:	200002b8 	.word	0x200002b8
 800062c:	0800d6c8 	.word	0x0800d6c8
 8000630:	08000ddd 	.word	0x08000ddd
 8000634:	200002bc 	.word	0x200002bc

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f00c fa52 	bl	800caf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b27      	ldr	r3, [pc, #156]	; (8000700 <SystemClock_Config+0xc8>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a26      	ldr	r2, [pc, #152]	; (8000700 <SystemClock_Config+0xc8>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <SystemClock_Config+0xc8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <SystemClock_Config+0xcc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a20      	ldr	r2, [pc, #128]	; (8000704 <SystemClock_Config+0xcc>)
 8000682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <SystemClock_Config+0xcc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006a8:	230c      	movs	r3, #12
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006ac:	2360      	movs	r3, #96	; 0x60
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 ff87 	bl	80035d0 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 fba8 	bl	8000e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2103      	movs	r1, #3
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 f9e9 	bl	8003ac0 <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006f4:	f000 fb92 	bl	8000e1c <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	; 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_SPI1_Init+0x64>)
 800070e:	4a18      	ldr	r2, [pc, #96]	; (8000770 <MX_SPI1_Init+0x68>)
 8000710:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_SPI1_Init+0x64>)
 8000714:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000718:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_SPI1_Init+0x64>)
 8000728:	2202      	movs	r2, #2
 800072a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_SPI1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_SPI1_Init+0x64>)
 8000734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000738:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_SPI1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_SPI1_Init+0x64>)
 8000754:	220a      	movs	r2, #10
 8000756:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_SPI1_Init+0x64>)
 800075a:	f003 fb91 	bl	8003e80 <HAL_SPI_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000764:	f000 fb5a 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200000ac 	.word	0x200000ac
 8000770:	40013000 	.word	0x40013000

08000774 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08c      	sub	sp, #48	; 0x30
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	2224      	movs	r2, #36	; 0x24
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f00c f9b4 	bl	800caf0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_TIM1_Init+0xa8>)
 8000792:	4a23      	ldr	r2, [pc, #140]	; (8000820 <MX_TIM1_Init+0xac>)
 8000794:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <MX_TIM1_Init+0xa8>)
 8000798:	2200      	movs	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_TIM1_Init+0xa8>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007a2:	4b1e      	ldr	r3, [pc, #120]	; (800081c <MX_TIM1_Init+0xa8>)
 80007a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_TIM1_Init+0xa8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_TIM1_Init+0xa8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_TIM1_Init+0xa8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80007bc:	2301      	movs	r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007c4:	2301      	movs	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007d4:	2301      	movs	r3, #1
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	4619      	mov	r1, r3
 80007e6:	480d      	ldr	r0, [pc, #52]	; (800081c <MX_TIM1_Init+0xa8>)
 80007e8:	f003 ff30 	bl	800464c <HAL_TIM_Encoder_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80007f2:	f000 fb13 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4619      	mov	r1, r3
 8000802:	4806      	ldr	r0, [pc, #24]	; (800081c <MX_TIM1_Init+0xa8>)
 8000804:	f004 f848 	bl	8004898 <HAL_TIMEx_MasterConfigSynchronization>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800080e:	f000 fb05 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	3730      	adds	r7, #48	; 0x30
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000164 	.word	0x20000164
 8000820:	40010000 	.word	0x40010000

08000824 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_USART1_UART_Init+0x50>)
 800082a:	4a13      	ldr	r2, [pc, #76]	; (8000878 <MX_USART1_UART_Init+0x54>)
 800082c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_USART1_UART_Init+0x50>)
 8000830:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000834:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_USART1_UART_Init+0x50>)
 8000838:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800083c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <MX_USART1_UART_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_USART1_UART_Init+0x50>)
 8000846:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800084a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_USART1_UART_Init+0x50>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_USART1_UART_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_USART1_UART_Init+0x50>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_USART1_UART_Init+0x50>)
 8000860:	f004 f888 	bl	8004974 <HAL_UART_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 800086a:	f000 fad7 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200001ac 	.word	0x200001ac
 8000878:	40011000 	.word	0x40011000

0800087c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream1
  */
static void MX_DMA_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b2d      	ldr	r3, [pc, #180]	; (800093c <MX_DMA_Init+0xc0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a2c      	ldr	r2, [pc, #176]	; (800093c <MX_DMA_Init+0xc0>)
 800088c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b2a      	ldr	r3, [pc, #168]	; (800093c <MX_DMA_Init+0xc0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 800089e:	4b28      	ldr	r3, [pc, #160]	; (8000940 <MX_DMA_Init+0xc4>)
 80008a0:	4a28      	ldr	r2, [pc, #160]	; (8000944 <MX_DMA_Init+0xc8>)
 80008a2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Channel = DMA_CHANNEL_0;
 80008a4:	4b26      	ldr	r3, [pc, #152]	; (8000940 <MX_DMA_Init+0xc4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80008aa:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_DMA_Init+0xc4>)
 80008ac:	2280      	movs	r2, #128	; 0x80
 80008ae:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_ENABLE;
 80008b0:	4b23      	ldr	r3, [pc, #140]	; (8000940 <MX_DMA_Init+0xc4>)
 80008b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b6:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_ENABLE;
 80008b8:	4b21      	ldr	r3, [pc, #132]	; (8000940 <MX_DMA_Init+0xc4>)
 80008ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008be:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_DMA_Init+0xc4>)
 80008c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008c6:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008c8:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_DMA_Init+0xc4>)
 80008ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ce:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_DMA_Init+0xc4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_LOW;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_DMA_Init+0xc4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_DMA_Init+0xc4>)
 80008de:	2204      	movs	r2, #4
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_DMA_Init+0xc4>)
 80008e4:	2203      	movs	r2, #3
 80008e6:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_SINGLE;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_DMA_Init+0xc4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_DMA_Init+0xc4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 80008f4:	4812      	ldr	r0, [pc, #72]	; (8000940 <MX_DMA_Init+0xc4>)
 80008f6:	f002 f82b 	bl	8002950 <HAL_DMA_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_DMA_Init+0x88>
  {
    Error_Handler( );
 8000900:	f000 fa8c 	bl	8000e1c <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	2105      	movs	r1, #5
 8000908:	2039      	movs	r0, #57	; 0x39
 800090a:	f001 ffea 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800090e:	2039      	movs	r0, #57	; 0x39
 8000910:	f002 f803 	bl	800291a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2105      	movs	r1, #5
 8000918:	203a      	movs	r0, #58	; 0x3a
 800091a:	f001 ffe2 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800091e:	203a      	movs	r0, #58	; 0x3a
 8000920:	f001 fffb 	bl	800291a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2105      	movs	r1, #5
 8000928:	2046      	movs	r0, #70	; 0x46
 800092a:	f001 ffda 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800092e:	2046      	movs	r0, #70	; 0x46
 8000930:	f001 fff3 	bl	800291a <HAL_NVIC_EnableIRQ>

}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	20000250 	.word	0x20000250
 8000944:	40026428 	.word	0x40026428

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	; 0x28
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	4b67      	ldr	r3, [pc, #412]	; (8000b00 <MX_GPIO_Init+0x1b8>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a66      	ldr	r2, [pc, #408]	; (8000b00 <MX_GPIO_Init+0x1b8>)
 8000968:	f043 0304 	orr.w	r3, r3, #4
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b64      	ldr	r3, [pc, #400]	; (8000b00 <MX_GPIO_Init+0x1b8>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0304 	and.w	r3, r3, #4
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b60      	ldr	r3, [pc, #384]	; (8000b00 <MX_GPIO_Init+0x1b8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a5f      	ldr	r2, [pc, #380]	; (8000b00 <MX_GPIO_Init+0x1b8>)
 8000984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b5d      	ldr	r3, [pc, #372]	; (8000b00 <MX_GPIO_Init+0x1b8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	4b59      	ldr	r3, [pc, #356]	; (8000b00 <MX_GPIO_Init+0x1b8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a58      	ldr	r2, [pc, #352]	; (8000b00 <MX_GPIO_Init+0x1b8>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b56      	ldr	r3, [pc, #344]	; (8000b00 <MX_GPIO_Init+0x1b8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b52      	ldr	r3, [pc, #328]	; (8000b00 <MX_GPIO_Init+0x1b8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a51      	ldr	r2, [pc, #324]	; (8000b00 <MX_GPIO_Init+0x1b8>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b4f      	ldr	r3, [pc, #316]	; (8000b00 <MX_GPIO_Init+0x1b8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GP_GPIO_Port, LED_GP_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d4:	484b      	ldr	r0, [pc, #300]	; (8000b04 <MX_GPIO_Init+0x1bc>)
 80009d6:	f002 fda3 	bl	8003520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 80009da:	2201      	movs	r2, #1
 80009dc:	2150      	movs	r1, #80	; 0x50
 80009de:	484a      	ldr	r0, [pc, #296]	; (8000b08 <MX_GPIO_Init+0x1c0>)
 80009e0:	f002 fd9e 	bl	8003520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_BLK_Pin, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2103      	movs	r1, #3
 80009e8:	4848      	ldr	r0, [pc, #288]	; (8000b0c <MX_GPIO_Init+0x1c4>)
 80009ea:	f002 fd99 	bl	8003520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_COMM_Pin|LED_USB_Pin|LED_CONTROL_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80009f4:	4845      	ldr	r0, [pc, #276]	; (8000b0c <MX_GPIO_Init+0x1c4>)
 80009f6:	f002 fd93 	bl	8003520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GP_Pin */
  GPIO_InitStruct.Pin = LED_GP_Pin;
 80009fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GP_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	483c      	ldr	r0, [pc, #240]	; (8000b04 <MX_GPIO_Init+0x1bc>)
 8000a14:	f002 fc00 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pin : Down_IT_Pin */
  GPIO_InitStruct.Pin = Down_IT_Pin;
 8000a18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a1e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Down_IT_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4835      	ldr	r0, [pc, #212]	; (8000b04 <MX_GPIO_Init+0x1bc>)
 8000a30:	f002 fbf2 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_IT_Pin Ok_IT_Pin Right_IT_Pin Up_IT_Pin
                           EncoderSW_Pin */
  GPIO_InitStruct.Pin = Left_IT_Pin|Ok_IT_Pin|Right_IT_Pin|Up_IT_Pin
 8000a34:	f240 430f 	movw	r3, #1039	; 0x40f
 8000a38:	617b      	str	r3, [r7, #20]
                          |EncoderSW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a3a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	482f      	ldr	r0, [pc, #188]	; (8000b08 <MX_GPIO_Init+0x1c0>)
 8000a4c:	f002 fbe4 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 8000a50:	2350      	movs	r3, #80	; 0x50
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	4828      	ldr	r0, [pc, #160]	; (8000b08 <MX_GPIO_Init+0x1c0>)
 8000a68:	f002 fbd6 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_BLK_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_BLK_Pin;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	4822      	ldr	r0, [pc, #136]	; (8000b0c <MX_GPIO_Init+0x1c4>)
 8000a84:	f002 fbc8 	bl	8003218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_COMM_Pin LED_USB_Pin LED_CONTROL_Pin */
  GPIO_InitStruct.Pin = LED_COMM_Pin|LED_USB_Pin|LED_CONTROL_Pin;
 8000a88:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	481a      	ldr	r0, [pc, #104]	; (8000b0c <MX_GPIO_Init+0x1c4>)
 8000aa2:	f002 fbb9 	bl	8003218 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2105      	movs	r1, #5
 8000aaa:	2006      	movs	r0, #6
 8000aac:	f001 ff19 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ab0:	2006      	movs	r0, #6
 8000ab2:	f001 ff32 	bl	800291a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2105      	movs	r1, #5
 8000aba:	2007      	movs	r0, #7
 8000abc:	f001 ff11 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ac0:	2007      	movs	r0, #7
 8000ac2:	f001 ff2a 	bl	800291a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2105      	movs	r1, #5
 8000aca:	2008      	movs	r0, #8
 8000acc:	f001 ff09 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ad0:	2008      	movs	r0, #8
 8000ad2:	f001 ff22 	bl	800291a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2105      	movs	r1, #5
 8000ada:	2009      	movs	r0, #9
 8000adc:	f001 ff01 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ae0:	2009      	movs	r0, #9
 8000ae2:	f001 ff1a 	bl	800291a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2105      	movs	r1, #5
 8000aea:	2028      	movs	r0, #40	; 0x28
 8000aec:	f001 fef9 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000af0:	2028      	movs	r0, #40	; 0x28
 8000af2:	f001 ff12 	bl	800291a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	; 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020800 	.word	0x40020800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020400 	.word	0x40020400

08000b10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f008 fdb1 	bl	8009680 <osDelay>
 8000b1e:	e7fb      	b.n	8000b18 <StartDefaultTask+0x8>

08000b20 <DMATrasferCpltCallback>:

/* USER CODE BEGIN Header_vTaskLCD */
extern const uint16_t ITMLogoData[ITMLOGO_SIZE];

void DMATrasferCpltCallback(DMA_HandleTypeDef *DmaHandle)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(xSemaphoreDMACompleteHandle);
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <DMATrasferCpltCallback+0x1c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f008 fe9d 	bl	800986c <osSemaphoreRelease>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200002c0 	.word	0x200002c0

08000b40 <DynamicErrorHandler>:

void DynamicErrorHandler(char *str)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	while(1)
 8000b48:	e7fe      	b.n	8000b48 <DynamicErrorHandler+0x8>
	...

08000b4c <vTaskLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskLCD */
void vTaskLCD(void *argument)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08c      	sub	sp, #48	; 0x30
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskLCD */
	uint16_t *ITMLogoRAMBuffer;
	uint16_t *NonWhitePixelsValue;
	uint32_t *NonWhitePixelsIndex;
	uint16_t PixelsIndex = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	85fb      	strh	r3, [r7, #46]	; 0x2e

	LCD_init();
 8000b58:	f000 ff74 	bl	8001a44 <LCD_init>
	HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream1, HAL_DMA_XFER_CPLT_CB_ID, DMATrasferCpltCallback);
 8000b5c:	4a90      	ldr	r2, [pc, #576]	; (8000da0 <vTaskLCD+0x254>)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4890      	ldr	r0, [pc, #576]	; (8000da4 <vTaskLCD+0x258>)
 8000b62:	f002 fa17 	bl	8002f94 <HAL_DMA_RegisterCallback>

	/*Fade white in*/
	for(uint16_t r = 0, g = 0, b = 0; g < 63; r++, g+=2, b++)
 8000b66:	2300      	movs	r3, #0
 8000b68:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000b6e:	2300      	movs	r3, #0
 8000b70:	853b      	strh	r3, [r7, #40]	; 0x28
 8000b72:	e01d      	b.n	8000bb0 <vTaskLCD+0x64>
	{
		UG_FillScreen(RGB565Color(r, g, b));
 8000b74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000b76:	02db      	lsls	r3, r3, #11
 8000b78:	b21a      	sxth	r2, r3
 8000b7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000b7c:	015b      	lsls	r3, r3, #5
 8000b7e:	b21b      	sxth	r3, r3
 8000b80:	4313      	orrs	r3, r2
 8000b82:	b21a      	sxth	r2, r3
 8000b84:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	b21b      	sxth	r3, r3
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f004 fe9e 	bl	80058d0 <UG_FillScreen>
		UG_Update();
 8000b94:	f006 fcc8 	bl	8007528 <UG_Update>
		osDelay(pdMS_TO_TICKS(20));
 8000b98:	2014      	movs	r0, #20
 8000b9a:	f008 fd71 	bl	8009680 <osDelay>
	for(uint16_t r = 0, g = 0, b = 0; g < 63; r++, g+=2, b++)
 8000b9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000ba4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000baa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bac:	3301      	adds	r3, #1
 8000bae:	853b      	strh	r3, [r7, #40]	; 0x28
 8000bb0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000bb2:	2b3e      	cmp	r3, #62	; 0x3e
 8000bb4:	d9de      	bls.n	8000b74 <vTaskLCD+0x28>
	}

	ITMLogoRAMBuffer = (uint16_t*)calloc(ITMLOGO_SIZE*2, sizeof(uint16_t));
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	f24c 0072 	movw	r0, #49266	; 0xc072
 8000bbc:	f00b ff3e 	bl	800ca3c <calloc>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	623b      	str	r3, [r7, #32]
	/*Calloc Failure*/
	if(ITMLogoRAMBuffer == NULL)
 8000bc4:	6a3b      	ldr	r3, [r7, #32]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d102      	bne.n	8000bd0 <vTaskLCD+0x84>
	{
		/*Report for the debugger*/
		DynamicErrorHandler("ITMLogoRAMBuffer");
 8000bca:	4877      	ldr	r0, [pc, #476]	; (8000da8 <vTaskLCD+0x25c>)
 8000bcc:	f7ff ffb8 	bl	8000b40 <DynamicErrorHandler>
	}
	else
	{
		/*Do Nothing*/
	}
	HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream1, (uint32_t)ITMLogoData, (uint32_t)ITMLogoRAMBuffer, ITMLOGO_SIZE);
 8000bd0:	4976      	ldr	r1, [pc, #472]	; (8000dac <vTaskLCD+0x260>)
 8000bd2:	6a3a      	ldr	r2, [r7, #32]
 8000bd4:	f246 0339 	movw	r3, #24633	; 0x6039
 8000bd8:	4872      	ldr	r0, [pc, #456]	; (8000da4 <vTaskLCD+0x258>)
 8000bda:	f001 ff67 	bl	8002aac <HAL_DMA_Start_IT>
	osSemaphoreAcquire(xSemaphoreDMACompleteHandle, osWaitForever);
 8000bde:	4b74      	ldr	r3, [pc, #464]	; (8000db0 <vTaskLCD+0x264>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000be6:	4618      	mov	r0, r3
 8000be8:	f008 fdee 	bl	80097c8 <osSemaphoreAcquire>

	UG_BMP ITMLogoRAM = {
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	6a3b      	ldr	r3, [r7, #32]
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	23a1      	movs	r3, #161	; 0xa1
 8000bfe:	823b      	strh	r3, [r7, #16]
 8000c00:	2399      	movs	r3, #153	; 0x99
 8000c02:	827b      	strh	r3, [r7, #18]
 8000c04:	2310      	movs	r3, #16
 8000c06:	753b      	strb	r3, [r7, #20]
		.height = 153,
		.bpp = BMP_BPP_16
	};

	/*Getting the non white pixels*/
	NonWhitePixelsValue = (uint16_t*)calloc(ITMLOGO_SIZE, sizeof(uint16_t));
 8000c08:	2102      	movs	r1, #2
 8000c0a:	f246 0039 	movw	r0, #24633	; 0x6039
 8000c0e:	f00b ff15 	bl	800ca3c <calloc>
 8000c12:	4603      	mov	r3, r0
 8000c14:	61fb      	str	r3, [r7, #28]
	NonWhitePixelsIndex = (uint32_t*)calloc(ITMLOGO_SIZE, sizeof(uint32_t));
 8000c16:	2104      	movs	r1, #4
 8000c18:	f246 0039 	movw	r0, #24633	; 0x6039
 8000c1c:	f00b ff0e 	bl	800ca3c <calloc>
 8000c20:	4603      	mov	r3, r0
 8000c22:	61bb      	str	r3, [r7, #24]
	if(NonWhitePixelsValue == NULL)
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d103      	bne.n	8000c32 <vTaskLCD+0xe6>
	{
		DynamicErrorHandler("NonWhitePixelsValue");
 8000c2a:	4862      	ldr	r0, [pc, #392]	; (8000db4 <vTaskLCD+0x268>)
 8000c2c:	f7ff ff88 	bl	8000b40 <DynamicErrorHandler>
 8000c30:	e005      	b.n	8000c3e <vTaskLCD+0xf2>
	}
	else if(NonWhitePixelsIndex == NULL)
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <vTaskLCD+0xf2>
	{
		DynamicErrorHandler("NonWhitePixelsIndex");
 8000c38:	485f      	ldr	r0, [pc, #380]	; (8000db8 <vTaskLCD+0x26c>)
 8000c3a:	f7ff ff81 	bl	8000b40 <DynamicErrorHandler>
	}
	else
	{
		/*Do Nothing*/
	}
	PixelsIndex = 0; /*Reusing variable for as index for the buffers*/
 8000c3e:	2300      	movs	r3, #0
 8000c40:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t i = 0; i < ITMLOGO_SIZE*2; i++)
 8000c42:	2300      	movs	r3, #0
 8000c44:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000c46:	e01e      	b.n	8000c86 <vTaskLCD+0x13a>
	{
		if((uint16_t)ITMLogoRAMBuffer[i] != 0xFFFF)
 8000c48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	6a3a      	ldr	r2, [r7, #32]
 8000c4e:	4413      	add	r3, r2
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d012      	beq.n	8000c80 <vTaskLCD+0x134>
		{
			/*Found a non white pixel*/
			NonWhitePixelsValue[PixelsIndex] = ITMLogoRAMBuffer[i];
 8000c5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	6a3a      	ldr	r2, [r7, #32]
 8000c60:	441a      	add	r2, r3
 8000c62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	69f9      	ldr	r1, [r7, #28]
 8000c68:	440b      	add	r3, r1
 8000c6a:	8812      	ldrh	r2, [r2, #0]
 8000c6c:	801a      	strh	r2, [r3, #0]
			NonWhitePixelsIndex[PixelsIndex] = i;
 8000c6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4413      	add	r3, r2
 8000c76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c78:	601a      	str	r2, [r3, #0]
			PixelsIndex++; /*At the end of the loop, will have the max number of data needed*/
 8000c7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t i = 0; i < ITMLOGO_SIZE*2; i++)
 8000c80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c82:	3301      	adds	r3, #1
 8000c84:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000c86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c88:	f24c 0271 	movw	r2, #49265	; 0xc071
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d9db      	bls.n	8000c48 <vTaskLCD+0xfc>
		}
	}
	/*Free RAM that is not used*/
	NonWhitePixelsValue = realloc(NonWhitePixelsValue, (PixelsIndex+1)*sizeof(uint16_t));
 8000c90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c92:	3301      	adds	r3, #1
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4619      	mov	r1, r3
 8000c98:	69f8      	ldr	r0, [r7, #28]
 8000c9a:	f00c f827 	bl	800ccec <realloc>
 8000c9e:	61f8      	str	r0, [r7, #28]
	NonWhitePixelsIndex = realloc(NonWhitePixelsIndex, (PixelsIndex+1)*sizeof(uint32_t));
 8000ca0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	69b8      	ldr	r0, [r7, #24]
 8000caa:	f00c f81f 	bl	800ccec <realloc>
 8000cae:	61b8      	str	r0, [r7, #24]

	/*Fade animation logo in*/
	memset(ITMLogoRAMBuffer, 0xFFFF, ITMLOGO_SIZE*2); /*Setting white buffer*/
 8000cb0:	f24c 0272 	movw	r2, #49266	; 0xc072
 8000cb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cb8:	6a38      	ldr	r0, [r7, #32]
 8000cba:	f00b ff19 	bl	800caf0 <memset>
	ITMLogoRAM.p = ITMLogoRAMBuffer;
 8000cbe:	6a3b      	ldr	r3, [r7, #32]
 8000cc0:	60fb      	str	r3, [r7, #12]
	while(memcmp(ITMLogoRAMBuffer, ITMLogoData, ITMLOGO_SIZE) != 0)
 8000cc2:	e03f      	b.n	8000d44 <vTaskLCD+0x1f8>
	{
		for(uint16_t i = 0; i < PixelsIndex; i++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000cc8:	e01e      	b.n	8000d08 <vTaskLCD+0x1bc>
		{
			if(ITMLogoRAMBuffer[NonWhitePixelsIndex[i]] != NonWhitePixelsValue[i])
 8000cca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	6a3a      	ldr	r2, [r7, #32]
 8000cd8:	4413      	add	r3, r2
 8000cda:	881a      	ldrh	r2, [r3, #0]
 8000cdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	69f9      	ldr	r1, [r7, #28]
 8000ce2:	440b      	add	r3, r1
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d00b      	beq.n	8000d02 <vTaskLCD+0x1b6>
			{
				ITMLogoRAMBuffer[NonWhitePixelsIndex[i]]--; /*Until it gets the color*/
 8000cea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	6a3a      	ldr	r2, [r7, #32]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	881a      	ldrh	r2, [r3, #0]
 8000cfc:	3a01      	subs	r2, #1
 8000cfe:	b292      	uxth	r2, r2
 8000d00:	801a      	strh	r2, [r3, #0]
		for(uint16_t i = 0; i < PixelsIndex; i++)
 8000d02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d04:	3301      	adds	r3, #1
 8000d06:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000d08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000d0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d3dc      	bcc.n	8000cca <vTaskLCD+0x17e>
			}
		}
		ITMLogoRAM.p = ITMLogoRAMBuffer;
 8000d10:	6a3b      	ldr	r3, [r7, #32]
 8000d12:	60fb      	str	r3, [r7, #12]
		UG_DrawBMP((LCD_WIDTH-ITMLogoRAM.width)/2, (LCD_HEIGHT-ITMLogoRAM.height)/2, &ITMLogoRAM);
 8000d14:	8a3b      	ldrh	r3, [r7, #16]
 8000d16:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000d1a:	0fda      	lsrs	r2, r3, #31
 8000d1c:	4413      	add	r3, r2
 8000d1e:	105b      	asrs	r3, r3, #1
 8000d20:	b218      	sxth	r0, r3
 8000d22:	8a7b      	ldrh	r3, [r7, #18]
 8000d24:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000d28:	0fda      	lsrs	r2, r3, #31
 8000d2a:	4413      	add	r3, r2
 8000d2c:	105b      	asrs	r3, r3, #1
 8000d2e:	b21b      	sxth	r3, r3
 8000d30:	f107 020c 	add.w	r2, r7, #12
 8000d34:	4619      	mov	r1, r3
 8000d36:	f006 fcb7 	bl	80076a8 <UG_DrawBMP>
		UG_Update();
 8000d3a:	f006 fbf5 	bl	8007528 <UG_Update>
		osDelay(pdMS_TO_TICKS(20));
 8000d3e:	2014      	movs	r0, #20
 8000d40:	f008 fc9e 	bl	8009680 <osDelay>
	while(memcmp(ITMLogoRAMBuffer, ITMLogoData, ITMLOGO_SIZE) != 0)
 8000d44:	f246 0239 	movw	r2, #24633	; 0x6039
 8000d48:	4918      	ldr	r1, [pc, #96]	; (8000dac <vTaskLCD+0x260>)
 8000d4a:	6a38      	ldr	r0, [r7, #32]
 8000d4c:	f00b feb2 	bl	800cab4 <memcmp>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1b6      	bne.n	8000cc4 <vTaskLCD+0x178>
	}

	UG_DrawBMP((LCD_WIDTH-ITMLogoRAM.width)/2, (LCD_HEIGHT-ITMLogoRAM.height)/2, &ITMLogoRAM);
 8000d56:	8a3b      	ldrh	r3, [r7, #16]
 8000d58:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000d5c:	0fda      	lsrs	r2, r3, #31
 8000d5e:	4413      	add	r3, r2
 8000d60:	105b      	asrs	r3, r3, #1
 8000d62:	b218      	sxth	r0, r3
 8000d64:	8a7b      	ldrh	r3, [r7, #18]
 8000d66:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000d6a:	0fda      	lsrs	r2, r3, #31
 8000d6c:	4413      	add	r3, r2
 8000d6e:	105b      	asrs	r3, r3, #1
 8000d70:	b21b      	sxth	r3, r3
 8000d72:	f107 020c 	add.w	r2, r7, #12
 8000d76:	4619      	mov	r1, r3
 8000d78:	f006 fc96 	bl	80076a8 <UG_DrawBMP>
	UG_Update();
 8000d7c:	f006 fbd4 	bl	8007528 <UG_Update>
	osDelay(pdMS_TO_TICKS(3000));
 8000d80:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d84:	f008 fc7c 	bl	8009680 <osDelay>

	free(ITMLogoRAMBuffer);
 8000d88:	6a38      	ldr	r0, [r7, #32]
 8000d8a:	f00b fe8b 	bl	800caa4 <free>
	free(NonWhitePixelsValue);
 8000d8e:	69f8      	ldr	r0, [r7, #28]
 8000d90:	f00b fe88 	bl	800caa4 <free>
	free(NonWhitePixelsIndex);
 8000d94:	69b8      	ldr	r0, [r7, #24]
 8000d96:	f00b fe85 	bl	800caa4 <free>
	/*!HIGH RAM CONSUMPTION ZONE*/
  for(;;)
  {
  	LCD_Test();
 8000d9a:	f000 fefb 	bl	8001b94 <LCD_Test>
 8000d9e:	e7fc      	b.n	8000d9a <vTaskLCD+0x24e>
 8000da0:	08000b21 	.word	0x08000b21
 8000da4:	20000250 	.word	0x20000250
 8000da8:	0800d524 	.word	0x0800d524
 8000dac:	080208cc 	.word	0x080208cc
 8000db0:	200002c0 	.word	0x200002c0
 8000db4:	0800d538 	.word	0x0800d538
 8000db8:	0800d54c 	.word	0x0800d54c

08000dbc <vTaskBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskBlink */
void vTaskBlink(void *argument)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskBlink */

  for(;;)
  {
    HAL_GPIO_TogglePin(LED_GP_GPIO_Port, LED_GP_Pin);
 8000dc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc8:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <vTaskBlink+0x1c>)
 8000dca:	f002 fbc2 	bl	8003552 <HAL_GPIO_TogglePin>
    osDelay(pdMS_TO_TICKS(250));
 8000dce:	20fa      	movs	r0, #250	; 0xfa
 8000dd0:	f008 fc56 	bl	8009680 <osDelay>
    HAL_GPIO_TogglePin(LED_GP_GPIO_Port, LED_GP_Pin);
 8000dd4:	e7f6      	b.n	8000dc4 <vTaskBlink+0x8>
 8000dd6:	bf00      	nop
 8000dd8:	40020800 	.word	0x40020800

08000ddc <vTaskLeds>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskLeds */
void vTaskLeds(void *argument)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskLeds */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LED_COMM_GPIO_Port, LED_COMM_Pin);
 8000de4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de8:	480b      	ldr	r0, [pc, #44]	; (8000e18 <vTaskLeds+0x3c>)
 8000dea:	f002 fbb2 	bl	8003552 <HAL_GPIO_TogglePin>
    osDelay(pdMS_TO_TICKS(100));
 8000dee:	2064      	movs	r0, #100	; 0x64
 8000df0:	f008 fc46 	bl	8009680 <osDelay>
    HAL_GPIO_TogglePin(LED_USB_GPIO_Port, LED_USB_Pin);
 8000df4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000df8:	4807      	ldr	r0, [pc, #28]	; (8000e18 <vTaskLeds+0x3c>)
 8000dfa:	f002 fbaa 	bl	8003552 <HAL_GPIO_TogglePin>
    osDelay(pdMS_TO_TICKS(100));
 8000dfe:	2064      	movs	r0, #100	; 0x64
 8000e00:	f008 fc3e 	bl	8009680 <osDelay>
    HAL_GPIO_TogglePin(LED_CONTROL_GPIO_Port, LED_CONTROL_Pin);
 8000e04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e08:	4803      	ldr	r0, [pc, #12]	; (8000e18 <vTaskLeds+0x3c>)
 8000e0a:	f002 fba2 	bl	8003552 <HAL_GPIO_TogglePin>
    osDelay(pdMS_TO_TICKS(100));
 8000e0e:	2064      	movs	r0, #100	; 0x64
 8000e10:	f008 fc36 	bl	8009680 <osDelay>
    HAL_GPIO_TogglePin(LED_COMM_GPIO_Port, LED_COMM_Pin);
 8000e14:	e7e6      	b.n	8000de4 <vTaskLeds+0x8>
 8000e16:	bf00      	nop
 8000e18:	40020400 	.word	0x40020400

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <Error_Handler+0x8>
	...

08000e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_MspInit+0x54>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	4a11      	ldr	r2, [pc, #68]	; (8000e7c <HAL_MspInit+0x54>)
 8000e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HAL_MspInit+0x54>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_MspInit+0x54>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_MspInit+0x54>)
 8000e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e58:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_MspInit+0x54>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	210f      	movs	r1, #15
 8000e6a:	f06f 0001 	mvn.w	r0, #1
 8000e6e:	f001 fd38 	bl	80028e2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800

08000e80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a30      	ldr	r2, [pc, #192]	; (8000f60 <HAL_SPI_MspInit+0xe0>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d15a      	bne.n	8000f58 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	4b2f      	ldr	r3, [pc, #188]	; (8000f64 <HAL_SPI_MspInit+0xe4>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a2e      	ldr	r2, [pc, #184]	; (8000f64 <HAL_SPI_MspInit+0xe4>)
 8000eac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b2c      	ldr	r3, [pc, #176]	; (8000f64 <HAL_SPI_MspInit+0xe4>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <HAL_SPI_MspInit+0xe4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a27      	ldr	r2, [pc, #156]	; (8000f64 <HAL_SPI_MspInit+0xe4>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <HAL_SPI_MspInit+0xe4>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_SDO_Pin;
 8000eda:	23a0      	movs	r3, #160	; 0xa0
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eea:	2305      	movs	r3, #5
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	481c      	ldr	r0, [pc, #112]	; (8000f68 <HAL_SPI_MspInit+0xe8>)
 8000ef6:	f002 f98f 	bl	8003218 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <HAL_SPI_MspInit+0xec>)
 8000efc:	4a1c      	ldr	r2, [pc, #112]	; (8000f70 <HAL_SPI_MspInit+0xf0>)
 8000efe:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8000f00:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <HAL_SPI_MspInit+0xec>)
 8000f02:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f06:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_SPI_MspInit+0xec>)
 8000f0a:	2240      	movs	r2, #64	; 0x40
 8000f0c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_SPI_MspInit+0xec>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_SPI_MspInit+0xec>)
 8000f16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f1a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <HAL_SPI_MspInit+0xec>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_SPI_MspInit+0xec>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_SPI_MspInit+0xec>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <HAL_SPI_MspInit+0xec>)
 8000f30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f34:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <HAL_SPI_MspInit+0xec>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000f3c:	480b      	ldr	r0, [pc, #44]	; (8000f6c <HAL_SPI_MspInit+0xec>)
 8000f3e:	f001 fd07 	bl	8002950 <HAL_DMA_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000f48:	f7ff ff68 	bl	8000e1c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_SPI_MspInit+0xec>)
 8000f50:	649a      	str	r2, [r3, #72]	; 0x48
 8000f52:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <HAL_SPI_MspInit+0xec>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f58:	bf00      	nop
 8000f5a:	3728      	adds	r7, #40	; 0x28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40013000 	.word	0x40013000
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	20000104 	.word	0x20000104
 8000f70:	40026440 	.word	0x40026440

08000f74 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <HAL_TIM_Encoder_MspInit+0x84>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d12c      	bne.n	8000ff0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_TIM_Encoder_MspInit+0x88>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <HAL_TIM_Encoder_MspInit+0x88>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_TIM_Encoder_MspInit+0x88>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_TIM_Encoder_MspInit+0x88>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <HAL_TIM_Encoder_MspInit+0x88>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <HAL_TIM_Encoder_MspInit+0x88>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_Pin|EncoderB_Pin;
 8000fce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000fec:	f002 f914 	bl	8003218 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ff0:	bf00      	nop
 8000ff2:	3728      	adds	r7, #40	; 0x28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40010000 	.word	0x40010000
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020000 	.word	0x40020000

08001004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a44      	ldr	r2, [pc, #272]	; (8001134 <HAL_UART_MspInit+0x130>)
 8001022:	4293      	cmp	r3, r2
 8001024:	f040 8081 	bne.w	800112a <HAL_UART_MspInit+0x126>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	4b42      	ldr	r3, [pc, #264]	; (8001138 <HAL_UART_MspInit+0x134>)
 800102e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001030:	4a41      	ldr	r2, [pc, #260]	; (8001138 <HAL_UART_MspInit+0x134>)
 8001032:	f043 0310 	orr.w	r3, r3, #16
 8001036:	6453      	str	r3, [r2, #68]	; 0x44
 8001038:	4b3f      	ldr	r3, [pc, #252]	; (8001138 <HAL_UART_MspInit+0x134>)
 800103a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103c:	f003 0310 	and.w	r3, r3, #16
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	4b3b      	ldr	r3, [pc, #236]	; (8001138 <HAL_UART_MspInit+0x134>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	4a3a      	ldr	r2, [pc, #232]	; (8001138 <HAL_UART_MspInit+0x134>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6313      	str	r3, [r2, #48]	; 0x30
 8001054:	4b38      	ldr	r3, [pc, #224]	; (8001138 <HAL_UART_MspInit+0x134>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	4b34      	ldr	r3, [pc, #208]	; (8001138 <HAL_UART_MspInit+0x134>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001068:	4a33      	ldr	r2, [pc, #204]	; (8001138 <HAL_UART_MspInit+0x134>)
 800106a:	f043 0302 	orr.w	r3, r3, #2
 800106e:	6313      	str	r3, [r2, #48]	; 0x30
 8001070:	4b31      	ldr	r3, [pc, #196]	; (8001138 <HAL_UART_MspInit+0x134>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800107c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800108e:	2307      	movs	r3, #7
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	4828      	ldr	r0, [pc, #160]	; (800113c <HAL_UART_MspInit+0x138>)
 800109a:	f002 f8bd 	bl	8003218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800109e:	2308      	movs	r3, #8
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010ae:	2307      	movs	r3, #7
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	4821      	ldr	r0, [pc, #132]	; (8001140 <HAL_UART_MspInit+0x13c>)
 80010ba:	f002 f8ad 	bl	8003218 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80010be:	4b21      	ldr	r3, [pc, #132]	; (8001144 <HAL_UART_MspInit+0x140>)
 80010c0:	4a21      	ldr	r2, [pc, #132]	; (8001148 <HAL_UART_MspInit+0x144>)
 80010c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <HAL_UART_MspInit+0x140>)
 80010c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ca:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <HAL_UART_MspInit+0x140>)
 80010ce:	2240      	movs	r2, #64	; 0x40
 80010d0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d2:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <HAL_UART_MspInit+0x140>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010d8:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <HAL_UART_MspInit+0x140>)
 80010da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010de:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <HAL_UART_MspInit+0x140>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <HAL_UART_MspInit+0x140>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <HAL_UART_MspInit+0x140>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <HAL_UART_MspInit+0x140>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_UART_MspInit+0x140>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80010fe:	4811      	ldr	r0, [pc, #68]	; (8001144 <HAL_UART_MspInit+0x140>)
 8001100:	f001 fc26 	bl	8002950 <HAL_DMA_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800110a:	f7ff fe87 	bl	8000e1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a0c      	ldr	r2, [pc, #48]	; (8001144 <HAL_UART_MspInit+0x140>)
 8001112:	635a      	str	r2, [r3, #52]	; 0x34
 8001114:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <HAL_UART_MspInit+0x140>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2105      	movs	r1, #5
 800111e:	2025      	movs	r0, #37	; 0x25
 8001120:	f001 fbdf 	bl	80028e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001124:	2025      	movs	r0, #37	; 0x25
 8001126:	f001 fbf8 	bl	800291a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800112a:	bf00      	nop
 800112c:	3728      	adds	r7, #40	; 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40011000 	.word	0x40011000
 8001138:	40023800 	.word	0x40023800
 800113c:	40020000 	.word	0x40020000
 8001140:	40020400 	.word	0x40020400
 8001144:	200001f0 	.word	0x200001f0
 8001148:	400264b8 	.word	0x400264b8

0800114c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <NMI_Handler+0x4>

08001152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001156:	e7fe      	b.n	8001156 <HardFault_Handler+0x4>

08001158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800115c:	e7fe      	b.n	800115c <MemManage_Handler+0x4>

0800115e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <BusFault_Handler+0x4>

08001164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <UsageFault_Handler+0x4>

0800116a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117c:	f001 fa92 	bl	80026a4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001180:	f00a faf6 	bl	800b770 <xTaskGetSchedulerState>
 8001184:	4603      	mov	r3, r0
 8001186:	2b01      	cmp	r3, #1
 8001188:	d001      	beq.n	800118e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800118a:	f00b f9dd 	bl	800c548 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}

08001192 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Left_IT_Pin);
 8001196:	2001      	movs	r0, #1
 8001198:	f002 f9f6 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}

080011a0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ok_IT_Pin);
 80011a4:	2002      	movs	r0, #2
 80011a6:	f002 f9ef 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}

080011ae <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Right_IT_Pin);
 80011b2:	2004      	movs	r0, #4
 80011b4:	f002 f9e8 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}

080011bc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Up_IT_Pin);
 80011c0:	2008      	movs	r0, #8
 80011c2:	f002 f9e1 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <USART1_IRQHandler+0x10>)
 80011d2:	f003 fc1d 	bl	8004a10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200001ac 	.word	0x200001ac

080011e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EncoderSW_Pin);
 80011e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011e8:	f002 f9ce 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Down_IT_Pin);
 80011ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80011f0:	f002 f9ca 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream1);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <DMA2_Stream1_IRQHandler+0x10>)
 80011fe:	f001 fd3f 	bl	8002c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000250 	.word	0x20000250

0800120c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <DMA2_Stream2_IRQHandler+0x10>)
 8001212:	f001 fd35 	bl	8002c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000104 	.word	0x20000104

08001220 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <DMA2_Stream7_IRQHandler+0x10>)
 8001226:	f001 fd2b 	bl	8002c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200001f0 	.word	0x200001f0

08001234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800123c:	4a14      	ldr	r2, [pc, #80]	; (8001290 <_sbrk+0x5c>)
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <_sbrk+0x60>)
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d102      	bne.n	8001256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <_sbrk+0x64>)
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <_sbrk+0x68>)
 8001254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <_sbrk+0x64>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	429a      	cmp	r2, r3
 8001262:	d207      	bcs.n	8001274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001264:	f00b fbf2 	bl	800ca4c <__errno>
 8001268:	4603      	mov	r3, r0
 800126a:	220c      	movs	r2, #12
 800126c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001272:	e009      	b.n	8001288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <_sbrk+0x64>)
 8001284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001286:	68fb      	ldr	r3, [r7, #12]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20020000 	.word	0x20020000
 8001294:	00000400 	.word	0x00000400
 8001298:	200002c4 	.word	0x200002c4
 800129c:	20004f30 	.word	0x20004f30

080012a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <SystemInit+0x20>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <SystemInit+0x20>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012c8:	480d      	ldr	r0, [pc, #52]	; (8001300 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ca:	490e      	ldr	r1, [pc, #56]	; (8001304 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012cc:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d0:	e002      	b.n	80012d8 <LoopCopyDataInit>

080012d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d6:	3304      	adds	r3, #4

080012d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012dc:	d3f9      	bcc.n	80012d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012de:	4a0b      	ldr	r2, [pc, #44]	; (800130c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012e0:	4c0b      	ldr	r4, [pc, #44]	; (8001310 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e4:	e001      	b.n	80012ea <LoopFillZerobss>

080012e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e8:	3204      	adds	r2, #4

080012ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ec:	d3fb      	bcc.n	80012e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ee:	f7ff ffd7 	bl	80012a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012f2:	f00b fbb1 	bl	800ca58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012f6:	f7ff f945 	bl	8000584 <main>
  bx  lr    
 80012fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001304:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001308:	0802c9e4 	.word	0x0802c9e4
  ldr r2, =_sbss
 800130c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001310:	20004f30 	.word	0x20004f30

08001314 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC_IRQHandler>
	...

08001318 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <setSPI_Size+0x84>)
 8001324:	f993 3000 	ldrsb.w	r3, [r3]
 8001328:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800132c:	429a      	cmp	r2, r3
 800132e:	d02e      	beq.n	800138e <setSPI_Size+0x76>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <setSPI_Size+0x88>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <setSPI_Size+0x88>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800133e:	601a      	str	r2, [r3, #0]

    config.spi_sz=size;
 8001340:	4a16      	ldr	r2, [pc, #88]	; (800139c <setSPI_Size+0x84>)
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d10c      	bne.n	8001368 <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <setSPI_Size+0x88>)
 8001350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001354:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_DFF;
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <setSPI_Size+0x88>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <setSPI_Size+0x88>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e00a      	b.n	800137e <setSPI_Size+0x66>
    }
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8001368:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <setSPI_Size+0x88>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <setSPI_Size+0x88>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <setSPI_Size+0x88>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800137c:	601a      	str	r2, [r3, #0]
    }
    __HAL_SPI_ENABLE(&LCD_HANDLE);
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <setSPI_Size+0x88>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <setSPI_Size+0x88>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800138c:	601a      	str	r2, [r3, #0]
  }
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000004 	.word	0x20000004
 80013a0:	200000ac 	.word	0x200000ac

080013a4 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	460a      	mov	r2, r1
 80013ae:	71fb      	strb	r3, [r7, #7]
 80013b0:	4613      	mov	r3, r2
 80013b2:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 80013b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ffad 	bl	8001318 <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 80013be:	4b41      	ldr	r3, [pc, #260]	; (80014c4 <setDMAMemMode+0x120>)
 80013c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80013c4:	461a      	mov	r2, r3
 80013c6:	79bb      	ldrb	r3, [r7, #6]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d106      	bne.n	80013da <setDMAMemMode+0x36>
 80013cc:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <setDMAMemMode+0x120>)
 80013ce:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80013d2:	461a      	mov	r2, r3
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d06f      	beq.n	80014ba <setDMAMemMode+0x116>
    config.dma_sz =size;
 80013da:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80013de:	4b39      	ldr	r3, [pc, #228]	; (80014c4 <setDMAMemMode+0x120>)
 80013e0:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 80013e2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80013e6:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <setDMAMemMode+0x120>)
 80013e8:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);
 80013ea:	4b37      	ldr	r3, [pc, #220]	; (80014c8 <setDMAMemMode+0x124>)
 80013ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b35      	ldr	r3, [pc, #212]	; (80014c8 <setDMAMemMode+0x124>)
 80013f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0201 	bic.w	r2, r2, #1
 80013fc:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
 80013fe:	bf00      	nop
 8001400:	4b31      	ldr	r3, [pc, #196]	; (80014c8 <setDMAMemMode+0x124>)
 8001402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1f7      	bne.n	8001400 <setDMAMemMode+0x5c>
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
#endif
    if(memInc==mem_increase){
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d10f      	bne.n	8001436 <setDMAMemMode+0x92>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 8001416:	4b2c      	ldr	r3, [pc, #176]	; (80014c8 <setDMAMemMode+0x124>)
 8001418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800141e:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
 8001420:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <setDMAMemMode+0x124>)
 8001422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <setDMAMemMode+0x124>)
 800142a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	e00d      	b.n	8001452 <setDMAMemMode+0xae>
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 8001436:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <setDMAMemMode+0x124>)
 8001438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
 800143e:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <setDMAMemMode+0x124>)
 8001440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <setDMAMemMode+0x124>)
 8001448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001450:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
#endif
    }

    if(size==mode_16bit){
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d116      	bne.n	8001486 <setDMAMemMode+0xe2>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <setDMAMemMode+0x124>)
 800145a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001460:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001462:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <setDMAMemMode+0x124>)
 8001464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001466:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800146a:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <setDMAMemMode+0x124>)
 800146e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <setDMAMemMode+0x124>)
 800147a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	e011      	b.n	80014aa <setDMAMemMode+0x106>
                                                   (1<<DMA_CCR_PSIZE_Pos | 1<<DMA_CCR_MSIZE_Pos);
#endif

    }
    else{
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <setDMAMemMode+0x124>)
 8001488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148a:	2200      	movs	r2, #0
 800148c:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <setDMAMemMode+0x124>)
 8001490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001492:	2200      	movs	r2, #0
 8001494:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk));
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <setDMAMemMode+0x124>)
 8001498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <setDMAMemMode+0x124>)
 80014a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80014a8:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
    __HAL_SPI_ENABLE(&LCD_HANDLE);
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <setDMAMemMode+0x124>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <setDMAMemMode+0x124>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014b8:	601a      	str	r2, [r3, #0]
  }
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000004 	.word	0x20000004
 80014c8:	200000ac 	.word	0x200000ac

080014cc <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 80014d8:	2000      	movs	r0, #0
 80014da:	f7ff ff1d 	bl	8001318 <setSPI_Size>
  LCD_PIN(LCD_DC,RESET);
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <LCD_WriteCommand+0x5c>)
 80014e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014e4:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <LCD_WriteCommand+0x60>)
 80014e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014ec:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014f2:	2201      	movs	r2, #1
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	480e      	ldr	r0, [pc, #56]	; (8001530 <LCD_WriteCommand+0x64>)
 80014f8:	f002 fd4b 	bl	8003f92 <HAL_SPI_Transmit>
  if(argc){
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00b      	beq.n	800151a <LCD_WriteCommand+0x4e>
    LCD_PIN(LCD_DC,SET);
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <LCD_WriteCommand+0x5c>)
 8001504:	2210      	movs	r2, #16
 8001506:	619a      	str	r2, [r3, #24]
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	1c59      	adds	r1, r3, #1
 800150c:	78fb      	ldrb	r3, [r7, #3]
 800150e:	b29a      	uxth	r2, r3
 8001510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001514:	4806      	ldr	r0, [pc, #24]	; (8001530 <LCD_WriteCommand+0x64>)
 8001516:	f002 fd3c 	bl	8003f92 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 800151a:	4b04      	ldr	r3, [pc, #16]	; (800152c <LCD_WriteCommand+0x60>)
 800151c:	2201      	movs	r2, #1
 800151e:	619a      	str	r2, [r3, #24]
#endif
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40020000 	.word	0x40020000
 800152c:	40020400 	.word	0x40020400
 8001530:	200000ac 	.word	0x200000ac

08001534 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  LCD_PIN(LCD_DC,SET);
 800153e:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <LCD_WriteData+0xc4>)
 8001540:	2210      	movs	r2, #16
 8001542:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 8001544:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <LCD_WriteData+0xc8>)
 8001546:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800154a:	619a      	str	r2, [r3, #24]
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 800154c:	e049      	b.n	80015e2 <LCD_WriteData+0xae>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001554:	4293      	cmp	r3, r2
 8001556:	bf28      	it	cs
 8001558:	4613      	movcs	r3, r2
 800155a:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_min_Sz){
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d924      	bls.n	80015ac <LCD_WriteData+0x78>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 8001562:	89fb      	ldrh	r3, [r7, #14]
 8001564:	461a      	mov	r2, r3
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	4825      	ldr	r0, [pc, #148]	; (8001600 <LCD_WriteData+0xcc>)
 800156a:	f002 fe4f 	bl	800420c <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!= HAL_DMA_STATE_READY);
 800156e:	bf00      	nop
 8001570:	4b23      	ldr	r3, [pc, #140]	; (8001600 <LCD_WriteData+0xcc>)
 8001572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001574:	4618      	mov	r0, r3
 8001576:	f001 fd61 	bl	800303c <HAL_DMA_GetState>
 800157a:	4603      	mov	r3, r0
 800157c:	2b01      	cmp	r3, #1
 800157e:	d1f7      	bne.n	8001570 <LCD_WriteData+0x3c>
      if(config.dma_mem_inc==mem_increase){
 8001580:	4b20      	ldr	r3, [pc, #128]	; (8001604 <LCD_WriteData+0xd0>)
 8001582:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d127      	bne.n	80015da <LCD_WriteData+0xa6>
        if(config.dma_sz==mode_16bit)
 800158a:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <LCD_WriteData+0xd0>)
 800158c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d104      	bne.n	800159e <LCD_WriteData+0x6a>
          buff += chunk_size;
 8001594:	89fb      	ldrh	r3, [r7, #14]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	e01d      	b.n	80015da <LCD_WriteData+0xa6>
        else
          buff += chunk_size*2;
 800159e:	89fb      	ldrh	r3, [r7, #14]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	461a      	mov	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4413      	add	r3, r2
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	e016      	b.n	80015da <LCD_WriteData+0xa6>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 80015ac:	89fa      	ldrh	r2, [r7, #14]
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4812      	ldr	r0, [pc, #72]	; (8001600 <LCD_WriteData+0xcc>)
 80015b6:	f002 fcec 	bl	8003f92 <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <LCD_WriteData+0xd0>)
 80015bc:	f993 3000 	ldrsb.w	r3, [r3]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d104      	bne.n	80015ce <LCD_WriteData+0x9a>
        buff += chunk_size;
 80015c4:	89fb      	ldrh	r3, [r7, #14]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	e005      	b.n	80015da <LCD_WriteData+0xa6>
      else
        buff += chunk_size*2;
 80015ce:	89fb      	ldrh	r3, [r7, #14]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	461a      	mov	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4413      	add	r3, r2
 80015d8:	607b      	str	r3, [r7, #4]

    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 80015da:	89fb      	ldrh	r3, [r7, #14]
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1b2      	bne.n	800154e <LCD_WriteData+0x1a>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <LCD_WriteData+0xc8>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	619a      	str	r2, [r3, #24]
#endif
}
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020400 	.word	0x40020400
 8001600:	200000ac 	.word	0x200000ac
 8001604:	20000004 	.word	0x20000004

08001608 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b08b      	sub	sp, #44	; 0x2c
 800160c:	af00      	add	r7, sp, #0
 800160e:	4604      	mov	r4, r0
 8001610:	4608      	mov	r0, r1
 8001612:	4611      	mov	r1, r2
 8001614:	461a      	mov	r2, r3
 8001616:	4623      	mov	r3, r4
 8001618:	80fb      	strh	r3, [r7, #6]
 800161a:	4603      	mov	r3, r0
 800161c:	80bb      	strh	r3, [r7, #4]
 800161e:	460b      	mov	r3, r1
 8001620:	807b      	strh	r3, [r7, #2]
 8001622:	4613      	mov	r3, r2
 8001624:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	84fb      	strh	r3, [r7, #38]	; 0x26
 800162a:	887b      	ldrh	r3, [r7, #2]
 800162c:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 800162e:	88bb      	ldrh	r3, [r7, #4]
 8001630:	847b      	strh	r3, [r7, #34]	; 0x22
 8001632:	883b      	ldrh	r3, [r7, #0]
 8001634:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8001636:	232a      	movs	r3, #42	; 0x2a
 8001638:	763b      	strb	r3, [r7, #24]
 800163a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800163e:	121b      	asrs	r3, r3, #8
 8001640:	b21b      	sxth	r3, r3
 8001642:	b2db      	uxtb	r3, r3
 8001644:	767b      	strb	r3, [r7, #25]
 8001646:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001648:	b2db      	uxtb	r3, r3
 800164a:	76bb      	strb	r3, [r7, #26]
 800164c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001650:	121b      	asrs	r3, r3, #8
 8001652:	b21b      	sxth	r3, r3
 8001654:	b2db      	uxtb	r3, r3
 8001656:	76fb      	strb	r3, [r7, #27]
 8001658:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800165a:	b2db      	uxtb	r3, r3
 800165c:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800165e:	f107 0318 	add.w	r3, r7, #24
 8001662:	2104      	movs	r1, #4
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff31 	bl	80014cc <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 800166a:	232b      	movs	r3, #43	; 0x2b
 800166c:	743b      	strb	r3, [r7, #16]
 800166e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001672:	121b      	asrs	r3, r3, #8
 8001674:	b21b      	sxth	r3, r3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	747b      	strb	r3, [r7, #17]
 800167a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800167c:	b2db      	uxtb	r3, r3
 800167e:	74bb      	strb	r3, [r7, #18]
 8001680:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001684:	121b      	asrs	r3, r3, #8
 8001686:	b21b      	sxth	r3, r3
 8001688:	b2db      	uxtb	r3, r3
 800168a:	74fb      	strb	r3, [r7, #19]
 800168c:	8c3b      	ldrh	r3, [r7, #32]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001692:	f107 0310 	add.w	r3, r7, #16
 8001696:	2104      	movs	r1, #4
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff17 	bl	80014cc <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 800169e:	232c      	movs	r3, #44	; 0x2c
 80016a0:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff0f 	bl	80014cc <LCD_WriteCommand>
  }
}
 80016ae:	bf00      	nop
 80016b0:	372c      	adds	r7, #44	; 0x2c
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd90      	pop	{r4, r7, pc}
	...

080016b8 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	80fb      	strh	r3, [r7, #6]
 80016c2:	460b      	mov	r3, r1
 80016c4:	80bb      	strh	r3, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 80016ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	db30      	blt.n	8001734 <LCD_DrawPixel+0x7c>
 80016d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d6:	2bef      	cmp	r3, #239	; 0xef
 80016d8:	dc2c      	bgt.n	8001734 <LCD_DrawPixel+0x7c>
 80016da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	db28      	blt.n	8001734 <LCD_DrawPixel+0x7c>
     (y < 0) || (y > LCD_HEIGHT-1))
 80016e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016e6:	2bef      	cmp	r3, #239	; 0xef
 80016e8:	dc24      	bgt.n	8001734 <LCD_DrawPixel+0x7c>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 80016ea:	887b      	ldrh	r3, [r7, #2]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	733b      	strb	r3, [r7, #12]
 80016f4:	887b      	ldrh	r3, [r7, #2]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 80016fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001702:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001706:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800170a:	f7ff ff7d 	bl	8001608 <LCD_SetAddressWindow>

  LCD_PIN(LCD_DC,SET);
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <LCD_DrawPixel+0x84>)
 8001710:	2210      	movs	r2, #16
 8001712:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 8001714:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <LCD_DrawPixel+0x88>)
 8001716:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800171a:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 800171c:	f107 010c 	add.w	r1, r7, #12
 8001720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001724:	2202      	movs	r2, #2
 8001726:	4807      	ldr	r0, [pc, #28]	; (8001744 <LCD_DrawPixel+0x8c>)
 8001728:	f002 fc33 	bl	8003f92 <HAL_SPI_Transmit>
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <LCD_DrawPixel+0x88>)
 800172e:	2201      	movs	r2, #1
 8001730:	619a      	str	r2, [r3, #24]
 8001732:	e000      	b.n	8001736 <LCD_DrawPixel+0x7e>
    return;
 8001734:	bf00      	nop
#endif
}
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40020000 	.word	0x40020000
 8001740:	40020400 	.word	0x40020400
 8001744:	200000ac 	.word	0x200000ac

08001748 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8001748:	b580      	push	{r7, lr}
 800174a:	b0a4      	sub	sp, #144	; 0x90
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_min_Sz)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d905      	bls.n	8001766 <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 800175a:	1cbb      	adds	r3, r7, #2
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fee8 	bl	8001534 <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 8001764:	e02f      	b.n	80017c6 <LCD_FillPixels+0x7e>
    for(uint8_t t=0;t<(pixels<64 ? pixels : 64);t++){                                 // Fill the buffer with the color
 8001766:	2300      	movs	r3, #0
 8001768:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800176c:	e00c      	b.n	8001788 <LCD_FillPixels+0x40>
      fill[t]=color;
 800176e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	3390      	adds	r3, #144	; 0x90
 8001778:	443b      	add	r3, r7
 800177a:	f823 2c84 	strh.w	r2, [r3, #-132]
    for(uint8_t t=0;t<(pixels<64 ? pixels : 64);t++){                                 // Fill the buffer with the color
 800177e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001782:	3301      	adds	r3, #1
 8001784:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001788:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b40      	cmp	r3, #64	; 0x40
 8001790:	bf28      	it	cs
 8001792:	2340      	movcs	r3, #64	; 0x40
 8001794:	429a      	cmp	r2, r3
 8001796:	d3ea      	bcc.n	800176e <LCD_FillPixels+0x26>
    while(pixels){                                                                    // Send 64 pixel blocks
 8001798:	e012      	b.n	80017c0 <LCD_FillPixels+0x78>
      uint8_t sz = (pixels<64 ? pixels : 64);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b40      	cmp	r3, #64	; 0x40
 800179e:	bf28      	it	cs
 80017a0:	2340      	movcs	r3, #64	; 0x40
 80017a2:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
      LCD_WriteData((uint8_t*)fill, sz);
 80017a6:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	4611      	mov	r1, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff febf 	bl	8001534 <LCD_WriteData>
      pixels-=sz;
 80017b6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                    // Send 64 pixel blocks
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1e9      	bne.n	800179a <LCD_FillPixels+0x52>
}
 80017c6:	bf00      	nop
 80017c8:	3790      	adds	r7, #144	; 0x90
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4604      	mov	r4, r0
 80017d8:	4608      	mov	r0, r1
 80017da:	4611      	mov	r1, r2
 80017dc:	461a      	mov	r2, r3
 80017de:	4623      	mov	r3, r4
 80017e0:	80fb      	strh	r3, [r7, #6]
 80017e2:	4603      	mov	r3, r0
 80017e4:	80bb      	strh	r3, [r7, #4]
 80017e6:	460b      	mov	r3, r1
 80017e8:	807b      	strh	r3, [r7, #2]
 80017ea:	4613      	mov	r3, r2
 80017ec:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 80017ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017f6:	d105      	bne.n	8001804 <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 80017f8:	2100      	movs	r1, #0
 80017fa:	2001      	movs	r0, #1
 80017fc:	f7ff fdd2 	bl	80013a4 <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 8001800:	2300      	movs	r3, #0
 8001802:	e011      	b.n	8001828 <LCD_FillArea+0x58>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 8001804:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001808:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800180c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001810:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001814:	f7ff fef8 	bl	8001608 <LCD_SetAddressWindow>
#ifdef USE_DMA
  setDMAMemMode(mem_fixed, mode_16bit); //setDMAMemMode(mem_fixed, mode_16bit);
 8001818:	2101      	movs	r1, #1
 800181a:	2000      	movs	r0, #0
 800181c:	f7ff fdc2 	bl	80013a4 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  LCD_PIN(LCD_DC,SET);
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <LCD_FillArea+0x60>)
 8001822:	2210      	movs	r2, #16
 8001824:	619a      	str	r2, [r3, #24]
  return LCD_FillPixels;
 8001826:	4b03      	ldr	r3, [pc, #12]	; (8001834 <LCD_FillArea+0x64>)
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bd90      	pop	{r4, r7, pc}
 8001830:	40020000 	.word	0x40020000
 8001834:	08001749 	.word	0x08001749

08001838 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	4604      	mov	r4, r0
 8001840:	4608      	mov	r0, r1
 8001842:	4611      	mov	r1, r2
 8001844:	461a      	mov	r2, r3
 8001846:	4623      	mov	r3, r4
 8001848:	80fb      	strh	r3, [r7, #6]
 800184a:	4603      	mov	r3, r0
 800184c:	80bb      	strh	r3, [r7, #4]
 800184e:	460b      	mov	r3, r1
 8001850:	807b      	strh	r3, [r7, #2]
 8001852:	4613      	mov	r3, r2
 8001854:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 8001856:	887a      	ldrh	r2, [r7, #2]
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	3301      	adds	r3, #1
 800185e:	4619      	mov	r1, r3
 8001860:	883a      	ldrh	r2, [r7, #0]
 8001862:	88bb      	ldrh	r3, [r7, #4]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	3301      	adds	r3, #1
 8001868:	fb01 f303 	mul.w	r3, r1, r3
 800186c:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 800186e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001872:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001876:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800187a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800187e:	f7ff fec3 	bl	8001608 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8001882:	2101      	movs	r1, #1
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff fd8d 	bl	80013a4 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 800188a:	8c3b      	ldrh	r3, [r7, #32]
 800188c:	4619      	mov	r1, r3
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f7ff ff5a 	bl	8001748 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit); //setDMAMemMode(mem_increase, mode_16bit);
 8001894:	2100      	movs	r1, #0
 8001896:	2001      	movs	r0, #1
 8001898:	f7ff fd84 	bl	80013a4 <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd90      	pop	{r4, r7, pc}

080018a6 <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 80018a6:	b590      	push	{r4, r7, lr}
 80018a8:	b085      	sub	sp, #20
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	603a      	str	r2, [r7, #0]
 80018b0:	80fb      	strh	r3, [r7, #6]
 80018b2:	460b      	mov	r3, r1
 80018b4:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	889b      	ldrh	r3, [r3, #4]
 80018ba:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	88db      	ldrh	r3, [r3, #6]
 80018c0:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	2bef      	cmp	r3, #239	; 0xef
 80018c6:	d837      	bhi.n	8001938 <LCD_DrawImage+0x92>
 80018c8:	88bb      	ldrh	r3, [r7, #4]
 80018ca:	2bef      	cmp	r3, #239	; 0xef
 80018cc:	d834      	bhi.n	8001938 <LCD_DrawImage+0x92>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 80018ce:	88fa      	ldrh	r2, [r7, #6]
 80018d0:	89fb      	ldrh	r3, [r7, #14]
 80018d2:	4413      	add	r3, r2
 80018d4:	2bf0      	cmp	r3, #240	; 0xf0
 80018d6:	dc31      	bgt.n	800193c <LCD_DrawImage+0x96>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 80018d8:	88ba      	ldrh	r2, [r7, #4]
 80018da:	89bb      	ldrh	r3, [r7, #12]
 80018dc:	4413      	add	r3, r2
 80018de:	2bf0      	cmp	r3, #240	; 0xf0
 80018e0:	dc2e      	bgt.n	8001940 <LCD_DrawImage+0x9a>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	7a1b      	ldrb	r3, [r3, #8]
 80018e6:	2b10      	cmp	r3, #16
 80018e8:	d12c      	bne.n	8001944 <LCD_DrawImage+0x9e>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80018ea:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80018ee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80018f2:	88fa      	ldrh	r2, [r7, #6]
 80018f4:	89fb      	ldrh	r3, [r7, #14]
 80018f6:	4413      	add	r3, r2
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	b21c      	sxth	r4, r3
 8001900:	88ba      	ldrh	r2, [r7, #4]
 8001902:	89bb      	ldrh	r3, [r7, #12]
 8001904:	4413      	add	r3, r2
 8001906:	b29b      	uxth	r3, r3
 8001908:	3b01      	subs	r3, #1
 800190a:	b29b      	uxth	r3, r3
 800190c:	b21b      	sxth	r3, r3
 800190e:	4622      	mov	r2, r4
 8001910:	f7ff fe7a 	bl	8001608 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);  //setDMAMemMode(mem_increase, mode_16bit);                                                          // Set SPI and DMA to 16 bit, enable memory increase
 8001914:	2101      	movs	r1, #1
 8001916:	2001      	movs	r0, #1
 8001918:	f7ff fd44 	bl	80013a4 <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	6818      	ldr	r0, [r3, #0]
 8001920:	89fb      	ldrh	r3, [r7, #14]
 8001922:	89ba      	ldrh	r2, [r7, #12]
 8001924:	fb02 f303 	mul.w	r3, r2, r3
 8001928:	4619      	mov	r1, r3
 800192a:	f7ff fe03 	bl	8001534 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 800192e:	2100      	movs	r1, #0
 8001930:	2001      	movs	r0, #1
 8001932:	f7ff fd37 	bl	80013a4 <setDMAMemMode>
 8001936:	e006      	b.n	8001946 <LCD_DrawImage+0xa0>
    return;
 8001938:	bf00      	nop
 800193a:	e004      	b.n	8001946 <LCD_DrawImage+0xa0>
    return;
 800193c:	bf00      	nop
 800193e:	e002      	b.n	8001946 <LCD_DrawImage+0xa0>
    return;
 8001940:	bf00      	nop
 8001942:	e000      	b.n	8001946 <LCD_DrawImage+0xa0>
    return;
 8001944:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	bd90      	pop	{r4, r7, pc}

0800194c <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b087      	sub	sp, #28
 8001950:	af02      	add	r7, sp, #8
 8001952:	4604      	mov	r4, r0
 8001954:	4608      	mov	r0, r1
 8001956:	4611      	mov	r1, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4623      	mov	r3, r4
 800195c:	80fb      	strh	r3, [r7, #6]
 800195e:	4603      	mov	r3, r0
 8001960:	80bb      	strh	r3, [r7, #4]
 8001962:	460b      	mov	r3, r1
 8001964:	807b      	strh	r3, [r7, #2]
 8001966:	4613      	mov	r3, r2
 8001968:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 800196a:	88fa      	ldrh	r2, [r7, #6]
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	429a      	cmp	r2, r3
 8001970:	d10a      	bne.n	8001988 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 8001972:	88ba      	ldrh	r2, [r7, #4]
 8001974:	883b      	ldrh	r3, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d918      	bls.n	80019ac <LCD_DrawLine+0x60>
 800197a:	88bb      	ldrh	r3, [r7, #4]
 800197c:	81bb      	strh	r3, [r7, #12]
 800197e:	883b      	ldrh	r3, [r7, #0]
 8001980:	80bb      	strh	r3, [r7, #4]
 8001982:	89bb      	ldrh	r3, [r7, #12]
 8001984:	803b      	strh	r3, [r7, #0]
 8001986:	e011      	b.n	80019ac <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8001988:	88ba      	ldrh	r2, [r7, #4]
 800198a:	883b      	ldrh	r3, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d10a      	bne.n	80019a6 <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8001990:	88fa      	ldrh	r2, [r7, #6]
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	429a      	cmp	r2, r3
 8001996:	d909      	bls.n	80019ac <LCD_DrawLine+0x60>
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	81fb      	strh	r3, [r7, #14]
 800199c:	887b      	ldrh	r3, [r7, #2]
 800199e:	80fb      	strh	r3, [r7, #6]
 80019a0:	89fb      	ldrh	r3, [r7, #14]
 80019a2:	807b      	strh	r3, [r7, #2]
 80019a4:	e002      	b.n	80019ac <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019aa:	e009      	b.n	80019c0 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 80019ac:	883c      	ldrh	r4, [r7, #0]
 80019ae:	887a      	ldrh	r2, [r7, #2]
 80019b0:	88b9      	ldrh	r1, [r7, #4]
 80019b2:	88f8      	ldrh	r0, [r7, #6]
 80019b4:	8c3b      	ldrh	r3, [r7, #32]
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	4623      	mov	r3, r4
 80019ba:	f7ff ff3d 	bl	8001838 <LCD_Fill>
  return UG_RESULT_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd90      	pop	{r4, r7, pc}

080019c8 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60ba      	str	r2, [r7, #8]
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	4603      	mov	r3, r0
 80019d4:	81fb      	strh	r3, [r7, #14]
 80019d6:	460b      	mov	r3, r1
 80019d8:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f003 ff68 	bl	80058b0 <UG_FontSelect>
  UG_SetForecolor(color);
 80019e0:	8b3b      	ldrh	r3, [r7, #24]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f004 fdac 	bl	8006540 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 80019e8:	8bbb      	ldrh	r3, [r7, #28]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f004 fdba 	bl	8006564 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 80019f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019f4:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f004 fd18 	bl	8006430 <UG_PutString>
}
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <LCD_setPower+0x14>
 8001a18:	2329      	movs	r3, #41	; 0x29
 8001a1a:	e000      	b.n	8001a1e <LCD_setPower+0x16>
 8001a1c:	2328      	movs	r3, #40	; 0x28
 8001a1e:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fd50 	bl	80014cc <LCD_WriteCommand>
}
 8001a2c:	bf00      	nop
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <LCD_Update>:

static void LCD_Update(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f7ff fcb2 	bl	80013a4 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 8001a4a:	4b28      	ldr	r3, [pc, #160]	; (8001aec <LCD_init+0xa8>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	619a      	str	r2, [r3, #24]
#endif
#ifdef LCD_RST
  LCD_PIN(LCD_RST,RESET);
 8001a50:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <LCD_init+0xac>)
 8001a52:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001a56:	619a      	str	r2, [r3, #24]
  HAL_Delay(25);
 8001a58:	2019      	movs	r0, #25
 8001a5a:	f000 fe43 	bl	80026e4 <HAL_Delay>
  LCD_PIN(LCD_RST,SET);
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <LCD_init+0xac>)
 8001a60:	2240      	movs	r2, #64	; 0x40
 8001a62:	619a      	str	r2, [r3, #24]
  HAL_Delay(200);
 8001a64:	20c8      	movs	r0, #200	; 0xc8
 8001a66:	f000 fe3d 	bl	80026e4 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8001a6a:	4922      	ldr	r1, [pc, #136]	; (8001af4 <LCD_init+0xb0>)
 8001a6c:	4822      	ldr	r0, [pc, #136]	; (8001af8 <LCD_init+0xb4>)
 8001a6e:	f003 fead 	bl	80057cc <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8001a72:	4922      	ldr	r1, [pc, #136]	; (8001afc <LCD_init+0xb8>)
 8001a74:	2000      	movs	r0, #0
 8001a76:	f005 fd35 	bl	80074e4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8001a7a:	4921      	ldr	r1, [pc, #132]	; (8001b00 <LCD_init+0xbc>)
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	f005 fd31 	bl	80074e4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8001a82:	4920      	ldr	r1, [pc, #128]	; (8001b04 <LCD_init+0xc0>)
 8001a84:	2002      	movs	r0, #2
 8001a86:	f005 fd2d 	bl	80074e4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8001a8a:	491f      	ldr	r1, [pc, #124]	; (8001b08 <LCD_init+0xc4>)
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f005 fd29 	bl	80074e4 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8001a92:	2000      	movs	r0, #0
 8001a94:	f004 fd94 	bl	80065c0 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f004 fda5 	bl	80065e8 <UG_FontSetVSpace>

  //LCD_SetRotation(LCD_ROTATION_CMD);
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	80fb      	strh	r3, [r7, #6]
 8001aa2:	e013      	b.n	8001acc <LCD_init+0x88>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	4a18      	ldr	r2, [pc, #96]	; (8001b0c <LCD_init+0xc8>)
 8001aaa:	441a      	add	r2, r3
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	4917      	ldr	r1, [pc, #92]	; (8001b0c <LCD_init+0xc8>)
 8001ab0:	5ccb      	ldrb	r3, [r1, r3]
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	f7ff fd09 	bl	80014cc <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <LCD_init+0xc8>)
 8001abe:	5cd3      	ldrb	r3, [r2, r3]
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	3302      	adds	r3, #2
 8001aca:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	2b4b      	cmp	r3, #75	; 0x4b
 8001ad0:	d9e8      	bls.n	8001aa4 <LCD_init+0x60>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f003 fefc 	bl	80058d0 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff95 	bl	8001a08 <LCD_setPower>
  UG_Update();
 8001ade:	f005 fd23 	bl	8007528 <UG_Update>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40020400 	.word	0x40020400
 8001af0:	40020000 	.word	0x40020000
 8001af4:	20000008 	.word	0x20000008
 8001af8:	200002e8 	.word	0x200002e8
 8001afc:	0800194d 	.word	0x0800194d
 8001b00:	08001839 	.word	0x08001839
 8001b04:	080017d1 	.word	0x080017d1
 8001b08:	080018a7 	.word	0x080018a7
 8001b0c:	0800d714 	.word	0x0800d714

08001b10 <clearTime>:


#define DEFAULT_FONT FONT_6X8

static uint32_t draw_time=0;
static void clearTime(void){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  draw_time=HAL_GetTick();
 8001b14:	f000 fdda 	bl	80026cc <HAL_GetTick>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4a02      	ldr	r2, [pc, #8]	; (8001b24 <clearTime+0x14>)
 8001b1c:	6013      	str	r3, [r2, #0]
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000344 	.word	0x20000344

08001b28 <printTime>:
static void printTime(void){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
  char str[8];
  uint8_t t = UG_FontGetTransparency();
 8001b2e:	f004 fd81 	bl	8006634 <UG_FontGetTransparency>
 8001b32:	4603      	mov	r3, r0
 8001b34:	73fb      	strb	r3, [r7, #15]
  sprintf(str,"%lums",HAL_GetTick()-draw_time);
 8001b36:	f000 fdc9 	bl	80026cc <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <printTime+0x60>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	1ad2      	subs	r2, r2, r3
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	4911      	ldr	r1, [pc, #68]	; (8001b8c <printTime+0x64>)
 8001b46:	4618      	mov	r0, r3
 8001b48:	f00b f952 	bl	800cdf0 <siprintf>
  UG_FontSelect(DEFAULT_FONT);
 8001b4c:	4810      	ldr	r0, [pc, #64]	; (8001b90 <printTime+0x68>)
 8001b4e:	f003 feaf 	bl	80058b0 <UG_FontSelect>
  UG_SetForecolor(C_YELLOW);
 8001b52:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001b56:	f004 fcf3 	bl	8006540 <UG_SetForecolor>
  UG_SetBackcolor(C_BLACK);
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f004 fd02 	bl	8006564 <UG_SetBackcolor>
  UG_FontSetTransparency(0);
 8001b60:	2000      	movs	r0, #0
 8001b62:	f004 fd55 	bl	8006610 <UG_FontSetTransparency>
  UG_PutString(10, 15, str);
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	461a      	mov	r2, r3
 8001b6a:	210f      	movs	r1, #15
 8001b6c:	200a      	movs	r0, #10
 8001b6e:	f004 fc5f 	bl	8006430 <UG_PutString>
  UG_FontSetTransparency(t);
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f004 fd4b 	bl	8006610 <UG_FontSetTransparency>
  UG_Update();
 8001b7a:	f005 fcd5 	bl	8007528 <UG_Update>
}
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000344 	.word	0x20000344
 8001b8c:	0800d560 	.word	0x0800d560
 8001b90:	0802005c 	.word	0x0802005c

08001b94 <LCD_Test>:
static UG_BUTTON button_1;
static UG_TEXTBOX textbox_1;
static UG_OBJECT obj_buff_wnd_1[MAX_OBJECTS];
static UG_PROGRESS pgb;
void LCD_Test(void)
{
 8001b94:	b590      	push	{r4, r7, lr}
 8001b96:	b091      	sub	sp, #68	; 0x44
 8001b98:	af04      	add	r7, sp, #16

  int16_t x=40,y=40,rad=20,count=0;
 8001b9a:	2328      	movs	r3, #40	; 0x28
 8001b9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001b9e:	2328      	movs	r3, #40	; 0x28
 8001ba0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001ba2:	2314      	movs	r3, #20
 8001ba4:	827b      	strh	r3, [r7, #18]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	857b      	strh	r3, [r7, #42]	; 0x2a
  int8_t xadd=2,yadd=2,dstep=2;
 8001baa:	2302      	movs	r3, #2
 8001bac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	747b      	strb	r3, [r7, #17]
  uint8_t r=0,g=0,b=0, t;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint32_t start, show;

  UG_FontSetTransparency(1);
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f004 fd1f 	bl	8006610 <UG_FontSetTransparency>

  UG_FillScreen(C_BLACK);
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f003 fe7c 	bl	80058d0 <UG_FillScreen>

  LCD_PutStr(50, 56, "STARTING TEST", DEFAULT_FONT, C_GREEN, C_BLACK);
 8001bd8:	2300      	movs	r3, #0
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	4bc0      	ldr	r3, [pc, #768]	; (8001ee4 <LCD_Test+0x350>)
 8001be4:	4ac0      	ldr	r2, [pc, #768]	; (8001ee8 <LCD_Test+0x354>)
 8001be6:	2138      	movs	r1, #56	; 0x38
 8001be8:	2032      	movs	r0, #50	; 0x32
 8001bea:	f7ff feed 	bl	80019c8 <LCD_PutStr>
  HAL_Delay(500);
 8001bee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bf2:	f000 fd77 	bl	80026e4 <HAL_Delay>

  UG_FillScreen(C_BLACK);
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f003 fe6a 	bl	80058d0 <UG_FillScreen>
  show=start=HAL_GetTick();
 8001bfc:	f000 fd66 	bl	80026cc <HAL_GetTick>
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	623b      	str	r3, [r7, #32]
  t = UG_FontGetTransparency();
 8001c06:	f004 fd15 	bl	8006634 <UG_FontGetTransparency>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	72fb      	strb	r3, [r7, #11]
  while(HAL_GetTick()-start<4000){
 8001c0e:	e0a8      	b.n	8001d62 <LCD_Test+0x1ce>
    UG_FillFrame(x-rad, y-rad, x+rad, y+rad, C_BLACK);
 8001c10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001c12:	8a7b      	ldrh	r3, [r7, #18]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	b218      	sxth	r0, r3
 8001c1a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001c1c:	8a7b      	ldrh	r3, [r7, #18]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	b219      	sxth	r1, r3
 8001c24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001c26:	8a7b      	ldrh	r3, [r7, #18]
 8001c28:	4413      	add	r3, r2
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	b21c      	sxth	r4, r3
 8001c2e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001c30:	8a7b      	ldrh	r3, [r7, #18]
 8001c32:	4413      	add	r3, r2
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	b21b      	sxth	r3, r3
 8001c38:	2200      	movs	r2, #0
 8001c3a:	9200      	str	r2, [sp, #0]
 8001c3c:	4622      	mov	r2, r4
 8001c3e:	f003 fe6b 	bl	8005918 <UG_FillFrame>
    x+=xadd;
 8001c42:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    y+=yadd;
 8001c50:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c58:	4413      	add	r3, r2
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if(x-rad<1){
 8001c5e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001c62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	dc0a      	bgt.n	8001c82 <LCD_Test+0xee>
      xadd=dstep;
 8001c6c:	7c7b      	ldrb	r3, [r7, #17]
 8001c6e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
      x+=xadd;
 8001c72:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c7a:	4413      	add	r3, r2
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001c80:	e012      	b.n	8001ca8 <LCD_Test+0x114>
    }
    else if(x+rad>(LCD_WIDTH-1)){
 8001c82:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001c86:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	2bef      	cmp	r3, #239	; 0xef
 8001c8e:	dd0b      	ble.n	8001ca8 <LCD_Test+0x114>
      xadd=-dstep;
 8001c90:	7c7b      	ldrb	r3, [r7, #17]
 8001c92:	425b      	negs	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
      x+=xadd;
 8001c9a:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ca2:	4413      	add	r3, r2
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    if(y-rad<1){
 8001ca8:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8001cac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	dc0a      	bgt.n	8001ccc <LCD_Test+0x138>
      yadd=dstep;
 8001cb6:	7c7b      	ldrb	r3, [r7, #17]
 8001cb8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
      y+=yadd;
 8001cbc:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001cc4:	4413      	add	r3, r2
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001cca:	e012      	b.n	8001cf2 <LCD_Test+0x15e>
    }
    else if(y+rad>(LCD_HEIGHT-1)){
 8001ccc:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8001cd0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	2bef      	cmp	r3, #239	; 0xef
 8001cd8:	dd0b      	ble.n	8001cf2 <LCD_Test+0x15e>
      yadd=-dstep;
 8001cda:	7c7b      	ldrb	r3, [r7, #17]
 8001cdc:	425b      	negs	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
      y+=yadd;
 8001ce4:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001cec:	4413      	add	r3, r2
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }

    UG_FillCircle(x, y, rad, C_WHITE);
 8001cf2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001cf6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8001cfa:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d02:	f004 f839 	bl	8005d78 <UG_FillCircle>
    UG_FontSetTransparency(0);
 8001d06:	2000      	movs	r0, #0
 8001d08:	f004 fc82 	bl	8006610 <UG_FontSetTransparency>
    LCD_PutStr(0, 0, str, DEFAULT_FONT, C_RED, C_BLACK);
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	4b73      	ldr	r3, [pc, #460]	; (8001ee4 <LCD_Test+0x350>)
 8001d18:	4a74      	ldr	r2, [pc, #464]	; (8001eec <LCD_Test+0x358>)
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f7ff fe53 	bl	80019c8 <LCD_PutStr>
    UG_FontSetTransparency(t);
 8001d22:	7afb      	ldrb	r3, [r7, #11]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f004 fc73 	bl	8006610 <UG_FontSetTransparency>
    UG_Update();
 8001d2a:	f005 fbfd 	bl	8007528 <UG_Update>
    count++;
 8001d2e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3301      	adds	r3, #1
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(HAL_GetTick()-show>999){
 8001d3a:	f000 fcc7 	bl	80026cc <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d48:	d30b      	bcc.n	8001d62 <LCD_Test+0x1ce>
      show=HAL_GetTick();
 8001d4a:	f000 fcbf 	bl	80026cc <HAL_GetTick>
 8001d4e:	6238      	str	r0, [r7, #32]
      sprintf(str,"%dFPS",count);
 8001d50:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d54:	461a      	mov	r2, r3
 8001d56:	4966      	ldr	r1, [pc, #408]	; (8001ef0 <LCD_Test+0x35c>)
 8001d58:	4864      	ldr	r0, [pc, #400]	; (8001eec <LCD_Test+0x358>)
 8001d5a:	f00b f849 	bl	800cdf0 <siprintf>
      count=0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	857b      	strh	r3, [r7, #42]	; 0x2a
  while(HAL_GetTick()-start<4000){
 8001d62:	f000 fcb3 	bl	80026cc <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001d70:	f4ff af4e 	bcc.w	8001c10 <LCD_Test+0x7c>
    }
  }

  for(r=0; r<32;r++){                                       // R++, G=0, B=0
 8001d74:	2300      	movs	r3, #0
 8001d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d7a:	e019      	b.n	8001db0 <LCD_Test+0x21c>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d80:	02db      	lsls	r3, r3, #11
 8001d82:	b21a      	sxth	r2, r3
 8001d84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d88:	015b      	lsls	r3, r3, #5
 8001d8a:	b21b      	sxth	r3, r3
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	b21a      	sxth	r2, r3
 8001d90:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d94:	b21b      	sxth	r3, r3
 8001d96:	4313      	orrs	r3, r2
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f003 fd97 	bl	80058d0 <UG_FillScreen>
    UG_Update();
 8001da2:	f005 fbc1 	bl	8007528 <UG_Update>
  for(r=0; r<32;r++){                                       // R++, G=0, B=0
 8001da6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001daa:	3301      	adds	r3, #1
 8001dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001db4:	2b1f      	cmp	r3, #31
 8001db6:	d9e1      	bls.n	8001d7c <LCD_Test+0x1e8>
  }
  r=31;
 8001db8:	231f      	movs	r3, #31
 8001dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  for(g=0; g<64;g+=2){                                      // R=31, G++, B=0
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001dc4:	e019      	b.n	8001dfa <LCD_Test+0x266>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001dc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dca:	02db      	lsls	r3, r3, #11
 8001dcc:	b21a      	sxth	r2, r3
 8001dce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001dd2:	015b      	lsls	r3, r3, #5
 8001dd4:	b21b      	sxth	r3, r3
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	b21a      	sxth	r2, r3
 8001dda:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001dde:	b21b      	sxth	r3, r3
 8001de0:	4313      	orrs	r3, r2
 8001de2:	b21b      	sxth	r3, r3
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 fd72 	bl	80058d0 <UG_FillScreen>
    UG_Update();
 8001dec:	f005 fb9c 	bl	8007528 <UG_Update>
  for(g=0; g<64;g+=2){                                      // R=31, G++, B=0
 8001df0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001df4:	3302      	adds	r3, #2
 8001df6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001dfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001dfe:	2b3f      	cmp	r3, #63	; 0x3f
 8001e00:	d9e1      	bls.n	8001dc6 <LCD_Test+0x232>
  }
  g=63;
 8001e02:	233f      	movs	r3, #63	; 0x3f
 8001e04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(r=28; r;r--){                                         // R--, Gmax, B=0
 8001e08:	231c      	movs	r3, #28
 8001e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e0e:	e019      	b.n	8001e44 <LCD_Test+0x2b0>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001e10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e14:	02db      	lsls	r3, r3, #11
 8001e16:	b21a      	sxth	r2, r3
 8001e18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e1c:	015b      	lsls	r3, r3, #5
 8001e1e:	b21b      	sxth	r3, r3
 8001e20:	4313      	orrs	r3, r2
 8001e22:	b21a      	sxth	r2, r3
 8001e24:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e28:	b21b      	sxth	r3, r3
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	b21b      	sxth	r3, r3
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 fd4d 	bl	80058d0 <UG_FillScreen>
    UG_Update();
 8001e36:	f005 fb77 	bl	8007528 <UG_Update>
  for(r=28; r;r--){                                         // R--, Gmax, B=0
 8001e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e1      	bne.n	8001e10 <LCD_Test+0x27c>
  }
  for(b=0; b<32;b++){                                       // R=0, Gmax, B++
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001e52:	e019      	b.n	8001e88 <LCD_Test+0x2f4>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001e54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e58:	02db      	lsls	r3, r3, #11
 8001e5a:	b21a      	sxth	r2, r3
 8001e5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e60:	015b      	lsls	r3, r3, #5
 8001e62:	b21b      	sxth	r3, r3
 8001e64:	4313      	orrs	r3, r2
 8001e66:	b21a      	sxth	r2, r3
 8001e68:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e6c:	b21b      	sxth	r3, r3
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	b21b      	sxth	r3, r3
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	f003 fd2b 	bl	80058d0 <UG_FillScreen>
    UG_Update();
 8001e7a:	f005 fb55 	bl	8007528 <UG_Update>
  for(b=0; b<32;b++){                                       // R=0, Gmax, B++
 8001e7e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e82:	3301      	adds	r3, #1
 8001e84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001e88:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e8c:	2b1f      	cmp	r3, #31
 8001e8e:	d9e1      	bls.n	8001e54 <LCD_Test+0x2c0>
  }
  b=31;
 8001e90:	231f      	movs	r3, #31
 8001e92:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for(g=56; g;g-=2){                                        // R=0, G--, Bmax
 8001e96:	2338      	movs	r3, #56	; 0x38
 8001e98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001e9c:	e019      	b.n	8001ed2 <LCD_Test+0x33e>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ea2:	02db      	lsls	r3, r3, #11
 8001ea4:	b21a      	sxth	r2, r3
 8001ea6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001eaa:	015b      	lsls	r3, r3, #5
 8001eac:	b21b      	sxth	r3, r3
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	b21a      	sxth	r2, r3
 8001eb2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001eb6:	b21b      	sxth	r3, r3
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	b21b      	sxth	r3, r3
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 fd06 	bl	80058d0 <UG_FillScreen>
    UG_Update();
 8001ec4:	f005 fb30 	bl	8007528 <UG_Update>
  for(g=56; g;g-=2){                                        // R=0, G--, Bmax
 8001ec8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ecc:	3b02      	subs	r3, #2
 8001ece:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001ed2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1e1      	bne.n	8001e9e <LCD_Test+0x30a>
  }
  for(r=0; r<32;r++){                                       // R++, G=0, Bmax
 8001eda:	2300      	movs	r3, #0
 8001edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ee0:	e022      	b.n	8001f28 <LCD_Test+0x394>
 8001ee2:	bf00      	nop
 8001ee4:	0802005c 	.word	0x0802005c
 8001ee8:	0800d568 	.word	0x0800d568
 8001eec:	200002c8 	.word	0x200002c8
 8001ef0:	0800d578 	.word	0x0800d578
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ef8:	02db      	lsls	r3, r3, #11
 8001efa:	b21a      	sxth	r2, r3
 8001efc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f00:	015b      	lsls	r3, r3, #5
 8001f02:	b21b      	sxth	r3, r3
 8001f04:	4313      	orrs	r3, r2
 8001f06:	b21a      	sxth	r2, r3
 8001f08:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	b21b      	sxth	r3, r3
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	4618      	mov	r0, r3
 8001f16:	f003 fcdb 	bl	80058d0 <UG_FillScreen>
    UG_Update();
 8001f1a:	f005 fb05 	bl	8007528 <UG_Update>
  for(r=0; r<32;r++){                                       // R++, G=0, Bmax
 8001f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f22:	3301      	adds	r3, #1
 8001f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f2c:	2b1f      	cmp	r3, #31
 8001f2e:	d9e1      	bls.n	8001ef4 <LCD_Test+0x360>
  }
  r=31;
 8001f30:	231f      	movs	r3, #31
 8001f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  for(g=0; g<64;g+=2){                                      // Rmax, G++, Bmax
 8001f36:	2300      	movs	r3, #0
 8001f38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f3c:	e019      	b.n	8001f72 <LCD_Test+0x3de>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f42:	02db      	lsls	r3, r3, #11
 8001f44:	b21a      	sxth	r2, r3
 8001f46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f4a:	015b      	lsls	r3, r3, #5
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	b21a      	sxth	r2, r3
 8001f52:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f56:	b21b      	sxth	r3, r3
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	b21b      	sxth	r3, r3
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 fcb6 	bl	80058d0 <UG_FillScreen>
    UG_Update();
 8001f64:	f005 fae0 	bl	8007528 <UG_Update>
  for(g=0; g<64;g+=2){                                      // Rmax, G++, Bmax
 8001f68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f76:	2b3f      	cmp	r3, #63	; 0x3f
 8001f78:	d9e1      	bls.n	8001f3e <LCD_Test+0x3aa>
  }


  UG_FillScreen(C_RED);
 8001f7a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001f7e:	f003 fca7 	bl	80058d0 <UG_FillScreen>
  UG_Update();
 8001f82:	f005 fad1 	bl	8007528 <UG_Update>
  HAL_Delay(500);
 8001f86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f8a:	f000 fbab 	bl	80026e4 <HAL_Delay>
  UG_FillScreen(C_GREEN);
 8001f8e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001f92:	f003 fc9d 	bl	80058d0 <UG_FillScreen>
  UG_Update();
 8001f96:	f005 fac7 	bl	8007528 <UG_Update>
  HAL_Delay(500);
 8001f9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f9e:	f000 fba1 	bl	80026e4 <HAL_Delay>
  UG_FillScreen(C_BLUE);
 8001fa2:	201f      	movs	r0, #31
 8001fa4:	f003 fc94 	bl	80058d0 <UG_FillScreen>
  UG_Update();
 8001fa8:	f005 fabe 	bl	8007528 <UG_Update>
  HAL_Delay(500);
 8001fac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fb0:	f000 fb98 	bl	80026e4 <HAL_Delay>
  UG_FillScreen(C_BLACK);
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f003 fc8b 	bl	80058d0 <UG_FillScreen>
  UG_Update();
 8001fba:	f005 fab5 	bl	8007528 <UG_Update>
  HAL_Delay(500);
 8001fbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fc2:	f000 fb8f 	bl	80026e4 <HAL_Delay>

  clearTime();
 8001fc6:	f7ff fda3 	bl	8001b10 <clearTime>
  UG_FillScreen(C_WHITE);
 8001fca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001fce:	f003 fc7f 	bl	80058d0 <UG_FillScreen>
  printTime();
 8001fd2:	f7ff fda9 	bl	8001b28 <printTime>
  LCD_PutStr(10, 5, "Fill", DEFAULT_FONT, C_RED, C_WHITE);
 8001fd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	4bd6      	ldr	r3, [pc, #856]	; (800233c <LCD_Test+0x7a8>)
 8001fe4:	4ad6      	ldr	r2, [pc, #856]	; (8002340 <LCD_Test+0x7ac>)
 8001fe6:	2105      	movs	r1, #5
 8001fe8:	200a      	movs	r0, #10
 8001fea:	f7ff fced 	bl	80019c8 <LCD_PutStr>
  UG_Update();
 8001fee:	f005 fa9b 	bl	8007528 <UG_Update>
  HAL_Delay(1000);
 8001ff2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ff6:	f000 fb75 	bl	80026e4 <HAL_Delay>

  UG_FillScreen(C_BLACK);
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f003 fc68 	bl	80058d0 <UG_FillScreen>
  LCD_PutStr(10, 5, "Font", DEFAULT_FONT, C_RED, C_BLACK);
 8002000:	2300      	movs	r3, #0
 8002002:	9301      	str	r3, [sp, #4]
 8002004:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	4bcc      	ldr	r3, [pc, #816]	; (800233c <LCD_Test+0x7a8>)
 800200c:	4acd      	ldr	r2, [pc, #820]	; (8002344 <LCD_Test+0x7b0>)
 800200e:	2105      	movs	r1, #5
 8002010:	200a      	movs	r0, #10
 8002012:	f7ff fcd9 	bl	80019c8 <LCD_PutStr>
  clearTime();
 8002016:	f7ff fd7b 	bl	8001b10 <clearTime>
  LCD_PutStr(10, 35, "Hello Steve!", DEFAULT_FONT, C_CYAN, C_BLACK);
 800201a:	2300      	movs	r3, #0
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	4bc5      	ldr	r3, [pc, #788]	; (800233c <LCD_Test+0x7a8>)
 8002026:	4ac8      	ldr	r2, [pc, #800]	; (8002348 <LCD_Test+0x7b4>)
 8002028:	2123      	movs	r1, #35	; 0x23
 800202a:	200a      	movs	r0, #10
 800202c:	f7ff fccc 	bl	80019c8 <LCD_PutStr>
  LCD_PutStr(10, 55, "Hello Steve!", DEFAULT_FONT, C_ORANGE_RED, C_BLACK);
 8002030:	2300      	movs	r3, #0
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	f64f 2320 	movw	r3, #64032	; 0xfa20
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	4bc0      	ldr	r3, [pc, #768]	; (800233c <LCD_Test+0x7a8>)
 800203c:	4ac2      	ldr	r2, [pc, #776]	; (8002348 <LCD_Test+0x7b4>)
 800203e:	2137      	movs	r1, #55	; 0x37
 8002040:	200a      	movs	r0, #10
 8002042:	f7ff fcc1 	bl	80019c8 <LCD_PutStr>
  LCD_PutStr(10, 75, "Hello Steve!", DEFAULT_FONT, C_LIME_GREEN, C_BLACK);
 8002046:	2300      	movs	r3, #0
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	f243 6366 	movw	r3, #13926	; 0x3666
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	4bba      	ldr	r3, [pc, #744]	; (800233c <LCD_Test+0x7a8>)
 8002052:	4abd      	ldr	r2, [pc, #756]	; (8002348 <LCD_Test+0x7b4>)
 8002054:	214b      	movs	r1, #75	; 0x4b
 8002056:	200a      	movs	r0, #10
 8002058:	f7ff fcb6 	bl	80019c8 <LCD_PutStr>
  LCD_PutStr(10, 95, "Hello Steve!", DEFAULT_FONT, C_HOT_PINK, C_BLACK);
 800205c:	2300      	movs	r3, #0
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	f64f 3356 	movw	r3, #64342	; 0xfb56
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	4bb5      	ldr	r3, [pc, #724]	; (800233c <LCD_Test+0x7a8>)
 8002068:	4ab7      	ldr	r2, [pc, #732]	; (8002348 <LCD_Test+0x7b4>)
 800206a:	215f      	movs	r1, #95	; 0x5f
 800206c:	200a      	movs	r0, #10
 800206e:	f7ff fcab 	bl	80019c8 <LCD_PutStr>
  UG_Update();
 8002072:	f005 fa59 	bl	8007528 <UG_Update>
  printTime();
 8002076:	f7ff fd57 	bl	8001b28 <printTime>
  HAL_Delay(1000);
 800207a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800207e:	f000 fb31 	bl	80026e4 <HAL_Delay>

#if DEMO_FLASH_KB >=128
  UG_FillScreen(C_BLACK);
 8002082:	2000      	movs	r0, #0
 8002084:	f003 fc24 	bl	80058d0 <UG_FillScreen>
  LCD_PutStr(10, 5, "Big font", DEFAULT_FONT, C_RED, C_BLACK);
 8002088:	2300      	movs	r3, #0
 800208a:	9301      	str	r3, [sp, #4]
 800208c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	4baa      	ldr	r3, [pc, #680]	; (800233c <LCD_Test+0x7a8>)
 8002094:	4aad      	ldr	r2, [pc, #692]	; (800234c <LCD_Test+0x7b8>)
 8002096:	2105      	movs	r1, #5
 8002098:	200a      	movs	r0, #10
 800209a:	f7ff fc95 	bl	80019c8 <LCD_PutStr>
  clearTime();
 800209e:	f7ff fd37 	bl	8001b10 <clearTime>
  LCD_PutStr(10, 35, "Hello", FONT_arial_49X57, C_CYAN, C_BLACK);
 80020a2:	2300      	movs	r3, #0
 80020a4:	9301      	str	r3, [sp, #4]
 80020a6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	4ba8      	ldr	r3, [pc, #672]	; (8002350 <LCD_Test+0x7bc>)
 80020ae:	4aa9      	ldr	r2, [pc, #676]	; (8002354 <LCD_Test+0x7c0>)
 80020b0:	2123      	movs	r1, #35	; 0x23
 80020b2:	200a      	movs	r0, #10
 80020b4:	f7ff fc88 	bl	80019c8 <LCD_PutStr>
  LCD_PutStr(10, 80, "Steve!", FONT_arial_49X57, C_CYAN, C_BLACK);
 80020b8:	2300      	movs	r3, #0
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	4ba3      	ldr	r3, [pc, #652]	; (8002350 <LCD_Test+0x7bc>)
 80020c4:	4aa4      	ldr	r2, [pc, #656]	; (8002358 <LCD_Test+0x7c4>)
 80020c6:	2150      	movs	r1, #80	; 0x50
 80020c8:	200a      	movs	r0, #10
 80020ca:	f7ff fc7d 	bl	80019c8 <LCD_PutStr>
  UG_Update();
 80020ce:	f005 fa2b 	bl	8007528 <UG_Update>
  printTime();
 80020d2:	f7ff fd29 	bl	8001b28 <printTime>
  HAL_Delay(1000);
 80020d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020da:	f000 fb03 	bl	80026e4 <HAL_Delay>
#endif

  UG_FillScreen(C_RED);
 80020de:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80020e2:	f003 fbf5 	bl	80058d0 <UG_FillScreen>
  LCD_PutStr(10, 5, "Line", DEFAULT_FONT, C_YELLOW, C_RED);
 80020e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	4b92      	ldr	r3, [pc, #584]	; (800233c <LCD_Test+0x7a8>)
 80020f4:	4a99      	ldr	r2, [pc, #612]	; (800235c <LCD_Test+0x7c8>)
 80020f6:	2105      	movs	r1, #5
 80020f8:	200a      	movs	r0, #10
 80020fa:	f7ff fc65 	bl	80019c8 <LCD_PutStr>
  clearTime();
 80020fe:	f7ff fd07 	bl	8001b10 <clearTime>
  UG_DrawLine(10, 30, 10, 100, C_WHITE);
 8002102:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	2364      	movs	r3, #100	; 0x64
 800210a:	220a      	movs	r2, #10
 800210c:	211e      	movs	r1, #30
 800210e:	200a      	movs	r0, #10
 8002110:	f003 ff0c 	bl	8005f2c <UG_DrawLine>
  UG_DrawLine(10, 30, 100, 30, C_WHITE);
 8002114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	231e      	movs	r3, #30
 800211c:	2264      	movs	r2, #100	; 0x64
 800211e:	211e      	movs	r1, #30
 8002120:	200a      	movs	r0, #10
 8002122:	f003 ff03 	bl	8005f2c <UG_DrawLine>
  UG_DrawLine(10, 30, 100, 100, C_WHITE);
 8002126:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	2364      	movs	r3, #100	; 0x64
 800212e:	2264      	movs	r2, #100	; 0x64
 8002130:	211e      	movs	r1, #30
 8002132:	200a      	movs	r0, #10
 8002134:	f003 fefa 	bl	8005f2c <UG_DrawLine>
  UG_Update();
 8002138:	f005 f9f6 	bl	8007528 <UG_Update>
  printTime();
 800213c:	f7ff fcf4 	bl	8001b28 <printTime>
  HAL_Delay(1000);
 8002140:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002144:	f000 face 	bl	80026e4 <HAL_Delay>

  UG_FillScreen(C_RED);
 8002148:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800214c:	f003 fbc0 	bl	80058d0 <UG_FillScreen>
  LCD_PutStr(10, 5, "Rect", DEFAULT_FONT, C_YELLOW, C_RED);
 8002150:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	4b77      	ldr	r3, [pc, #476]	; (800233c <LCD_Test+0x7a8>)
 800215e:	4a80      	ldr	r2, [pc, #512]	; (8002360 <LCD_Test+0x7cc>)
 8002160:	2105      	movs	r1, #5
 8002162:	200a      	movs	r0, #10
 8002164:	f7ff fc30 	bl	80019c8 <LCD_PutStr>
  clearTime();
 8002168:	f7ff fcd2 	bl	8001b10 <clearTime>
  UG_DrawFrame(10, 30, 100, 100, C_WHITE);
 800216c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	2364      	movs	r3, #100	; 0x64
 8002174:	2264      	movs	r2, #100	; 0x64
 8002176:	211e      	movs	r1, #30
 8002178:	200a      	movs	r0, #10
 800217a:	f003 fcb6 	bl	8005aea <UG_DrawFrame>
  UG_Update();
 800217e:	f005 f9d3 	bl	8007528 <UG_Update>
  printTime();
 8002182:	f7ff fcd1 	bl	8001b28 <printTime>
  HAL_Delay(1000);
 8002186:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800218a:	f000 faab 	bl	80026e4 <HAL_Delay>

  UG_FillScreen(C_RED);
 800218e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002192:	f003 fb9d 	bl	80058d0 <UG_FillScreen>
  LCD_PutStr(10, 5, "Filled Rect", DEFAULT_FONT, C_YELLOW, C_RED);
 8002196:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	4b66      	ldr	r3, [pc, #408]	; (800233c <LCD_Test+0x7a8>)
 80021a4:	4a6f      	ldr	r2, [pc, #444]	; (8002364 <LCD_Test+0x7d0>)
 80021a6:	2105      	movs	r1, #5
 80021a8:	200a      	movs	r0, #10
 80021aa:	f7ff fc0d 	bl	80019c8 <LCD_PutStr>
  clearTime();
 80021ae:	f7ff fcaf 	bl	8001b10 <clearTime>
  UG_FillFrame(10, 30, 100, 100, C_WHITE);
 80021b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	2364      	movs	r3, #100	; 0x64
 80021ba:	2264      	movs	r2, #100	; 0x64
 80021bc:	211e      	movs	r1, #30
 80021be:	200a      	movs	r0, #10
 80021c0:	f003 fbaa 	bl	8005918 <UG_FillFrame>
  UG_Update();
 80021c4:	f005 f9b0 	bl	8007528 <UG_Update>
  printTime();
 80021c8:	f7ff fcae 	bl	8001b28 <printTime>
  HAL_Delay(1000);
 80021cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021d0:	f000 fa88 	bl	80026e4 <HAL_Delay>

  UG_FillScreen(C_RED);
 80021d4:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80021d8:	f003 fb7a 	bl	80058d0 <UG_FillScreen>
  LCD_PutStr(10, 5, "Mesh.", DEFAULT_FONT, C_YELLOW, C_RED);
 80021dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	4b54      	ldr	r3, [pc, #336]	; (800233c <LCD_Test+0x7a8>)
 80021ea:	4a5f      	ldr	r2, [pc, #380]	; (8002368 <LCD_Test+0x7d4>)
 80021ec:	2105      	movs	r1, #5
 80021ee:	200a      	movs	r0, #10
 80021f0:	f7ff fbea 	bl	80019c8 <LCD_PutStr>
  clearTime();
 80021f4:	f7ff fc8c 	bl	8001b10 <clearTime>
  UG_DrawMesh(10, 30, 100, 100, 5, C_WHITE);
 80021f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	2305      	movs	r3, #5
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	2364      	movs	r3, #100	; 0x64
 8002204:	2264      	movs	r2, #100	; 0x64
 8002206:	211e      	movs	r1, #30
 8002208:	200a      	movs	r0, #10
 800220a:	f003 fbf7 	bl	80059fc <UG_DrawMesh>
  UG_Update();
 800220e:	f005 f98b 	bl	8007528 <UG_Update>
  printTime();
 8002212:	f7ff fc89 	bl	8001b28 <printTime>
  HAL_Delay(1000);
 8002216:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800221a:	f000 fa63 	bl	80026e4 <HAL_Delay>

  UG_FillScreen(C_RED);
 800221e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002222:	f003 fb55 	bl	80058d0 <UG_FillScreen>
  LCD_PutStr(10, 5, "Circle", DEFAULT_FONT, C_YELLOW, C_RED);
 8002226:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	4b42      	ldr	r3, [pc, #264]	; (800233c <LCD_Test+0x7a8>)
 8002234:	4a4d      	ldr	r2, [pc, #308]	; (800236c <LCD_Test+0x7d8>)
 8002236:	2105      	movs	r1, #5
 8002238:	200a      	movs	r0, #10
 800223a:	f7ff fbc5 	bl	80019c8 <LCD_PutStr>
  clearTime();
 800223e:	f7ff fc67 	bl	8001b10 <clearTime>
  UG_DrawCircle(45, 65, 30, C_WHITE);
 8002242:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002246:	221e      	movs	r2, #30
 8002248:	2141      	movs	r1, #65	; 0x41
 800224a:	202d      	movs	r0, #45	; 0x2d
 800224c:	f003 fcae 	bl	8005bac <UG_DrawCircle>
  UG_Update();
 8002250:	f005 f96a 	bl	8007528 <UG_Update>
  printTime();
 8002254:	f7ff fc68 	bl	8001b28 <printTime>
  HAL_Delay(1000);
 8002258:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800225c:	f000 fa42 	bl	80026e4 <HAL_Delay>

  UG_FillScreen(C_RED);
 8002260:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002264:	f003 fb34 	bl	80058d0 <UG_FillScreen>
  LCD_PutStr(10, 5, "Filled Circle", DEFAULT_FONT, C_YELLOW, C_RED);
 8002268:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	4b31      	ldr	r3, [pc, #196]	; (800233c <LCD_Test+0x7a8>)
 8002276:	4a3e      	ldr	r2, [pc, #248]	; (8002370 <LCD_Test+0x7dc>)
 8002278:	2105      	movs	r1, #5
 800227a:	200a      	movs	r0, #10
 800227c:	f7ff fba4 	bl	80019c8 <LCD_PutStr>
  UG_Update();
 8002280:	f005 f952 	bl	8007528 <UG_Update>
  clearTime();
 8002284:	f7ff fc44 	bl	8001b10 <clearTime>
  UG_FillCircle(45, 65, 30, C_WHITE);
 8002288:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800228c:	221e      	movs	r2, #30
 800228e:	2141      	movs	r1, #65	; 0x41
 8002290:	202d      	movs	r0, #45	; 0x2d
 8002292:	f003 fd71 	bl	8005d78 <UG_FillCircle>
  UG_Update();
 8002296:	f005 f947 	bl	8007528 <UG_Update>
  printTime();
 800229a:	f7ff fc45 	bl	8001b28 <printTime>
  HAL_Delay(1000);
 800229e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022a2:	f000 fa1f 	bl	80026e4 <HAL_Delay>

  UG_FillScreen(C_RED);
 80022a6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80022aa:	f003 fb11 	bl	80058d0 <UG_FillScreen>
  LCD_PutStr(10, 5, "Triangle", DEFAULT_FONT, C_YELLOW, C_RED);
 80022ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	4b20      	ldr	r3, [pc, #128]	; (800233c <LCD_Test+0x7a8>)
 80022bc:	4a2d      	ldr	r2, [pc, #180]	; (8002374 <LCD_Test+0x7e0>)
 80022be:	2105      	movs	r1, #5
 80022c0:	200a      	movs	r0, #10
 80022c2:	f7ff fb81 	bl	80019c8 <LCD_PutStr>
  clearTime();
 80022c6:	f7ff fc23 	bl	8001b10 <clearTime>
  UG_DrawTriangle(10, 30, 100, 30, 50, 100, C_WHITE);
 80022ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022ce:	9302      	str	r3, [sp, #8]
 80022d0:	2364      	movs	r3, #100	; 0x64
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	2332      	movs	r3, #50	; 0x32
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	231e      	movs	r3, #30
 80022da:	2264      	movs	r2, #100	; 0x64
 80022dc:	211e      	movs	r1, #30
 80022de:	200a      	movs	r0, #10
 80022e0:	f003 ff04 	bl	80060ec <UG_DrawTriangle>
  UG_Update();
 80022e4:	f005 f920 	bl	8007528 <UG_Update>
  printTime();
 80022e8:	f7ff fc1e 	bl	8001b28 <printTime>
  HAL_Delay(1000);
 80022ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022f0:	f000 f9f8 	bl	80026e4 <HAL_Delay>

  UG_FillScreen(C_RED);
 80022f4:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80022f8:	f003 faea 	bl	80058d0 <UG_FillScreen>
  clearTime();
 80022fc:	f7ff fc08 	bl	8001b10 <clearTime>
  LCD_PutStr(10, 5, "Filled Tri.", DEFAULT_FONT, C_YELLOW, C_RED);
 8002300:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <LCD_Test+0x7a8>)
 800230e:	4a1a      	ldr	r2, [pc, #104]	; (8002378 <LCD_Test+0x7e4>)
 8002310:	2105      	movs	r1, #5
 8002312:	200a      	movs	r0, #10
 8002314:	f7ff fb58 	bl	80019c8 <LCD_PutStr>
  UG_FillTriangle(10, 30, 100, 30, 50, 100, C_WHITE);
 8002318:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800231c:	9302      	str	r3, [sp, #8]
 800231e:	2364      	movs	r3, #100	; 0x64
 8002320:	9301      	str	r3, [sp, #4]
 8002322:	2332      	movs	r3, #50	; 0x32
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	231e      	movs	r3, #30
 8002328:	2264      	movs	r2, #100	; 0x64
 800232a:	211e      	movs	r1, #30
 800232c:	200a      	movs	r0, #10
 800232e:	f003 ff17 	bl	8006160 <UG_FillTriangle>
  UG_Update();
 8002332:	f005 f8f9 	bl	8007528 <UG_Update>
  printTime();
 8002336:	f7ff fbf7 	bl	8001b28 <printTime>
 800233a:	e01f      	b.n	800237c <LCD_Test+0x7e8>
 800233c:	0802005c 	.word	0x0802005c
 8002340:	0800d580 	.word	0x0800d580
 8002344:	0800d588 	.word	0x0800d588
 8002348:	0800d590 	.word	0x0800d590
 800234c:	0800d5a0 	.word	0x0800d5a0
 8002350:	0800d768 	.word	0x0800d768
 8002354:	0800d5ac 	.word	0x0800d5ac
 8002358:	0800d5b4 	.word	0x0800d5b4
 800235c:	0800d5bc 	.word	0x0800d5bc
 8002360:	0800d5c4 	.word	0x0800d5c4
 8002364:	0800d5cc 	.word	0x0800d5cc
 8002368:	0800d5d8 	.word	0x0800d5d8
 800236c:	0800d5e0 	.word	0x0800d5e0
 8002370:	0800d5e8 	.word	0x0800d5e8
 8002374:	0800d5f8 	.word	0x0800d5f8
 8002378:	0800d604 	.word	0x0800d604
  HAL_Delay(1000);
 800237c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002380:	f000 f9b0 	bl	80026e4 <HAL_Delay>

  clearTime();
 8002384:	f7ff fbc4 	bl	8001b10 <clearTime>
  // Create the window
  UG_WindowCreate(&window_1, obj_buff_wnd_1, MAX_OBJECTS, window_1_callback);
 8002388:	4b8b      	ldr	r3, [pc, #556]	; (80025b8 <LCD_Test+0xa24>)
 800238a:	220a      	movs	r2, #10
 800238c:	498b      	ldr	r1, [pc, #556]	; (80025bc <LCD_Test+0xa28>)
 800238e:	488c      	ldr	r0, [pc, #560]	; (80025c0 <LCD_Test+0xa2c>)
 8002390:	f005 faaa 	bl	80078e8 <UG_WindowCreate>
  // Window Title
  UG_WindowSetTitleText(&window_1, "Test Window");
 8002394:	498b      	ldr	r1, [pc, #556]	; (80025c4 <LCD_Test+0xa30>)
 8002396:	488a      	ldr	r0, [pc, #552]	; (80025c0 <LCD_Test+0xa2c>)
 8002398:	f005 fcfc 	bl	8007d94 <UG_WindowSetTitleText>
  UG_WindowSetTitleTextFont(&window_1, DEFAULT_FONT);
 800239c:	498a      	ldr	r1, [pc, #552]	; (80025c8 <LCD_Test+0xa34>)
 800239e:	4888      	ldr	r0, [pc, #544]	; (80025c0 <LCD_Test+0xa2c>)
 80023a0:	f005 fd1a 	bl	8007dd8 <UG_WindowSetTitleTextFont>
  UG_WindowSetTitleHeight(&window_1, 15);
 80023a4:	210f      	movs	r1, #15
 80023a6:	4886      	ldr	r0, [pc, #536]	; (80025c0 <LCD_Test+0xa2c>)
 80023a8:	f005 fd51 	bl	8007e4e <UG_WindowSetTitleHeight>
  UG_WindowSetXStart(&window_1, 0);
 80023ac:	2100      	movs	r1, #0
 80023ae:	4884      	ldr	r0, [pc, #528]	; (80025c0 <LCD_Test+0xa2c>)
 80023b0:	f005 fd78 	bl	8007ea4 <UG_WindowSetXStart>
  UG_WindowSetYStart(&window_1, 0);
 80023b4:	2100      	movs	r1, #0
 80023b6:	4882      	ldr	r0, [pc, #520]	; (80025c0 <LCD_Test+0xa2c>)
 80023b8:	f005 fda6 	bl	8007f08 <UG_WindowSetYStart>
  UG_WindowSetXEnd(&window_1, LCD_WIDTH-1);
 80023bc:	21ef      	movs	r1, #239	; 0xef
 80023be:	4880      	ldr	r0, [pc, #512]	; (80025c0 <LCD_Test+0xa2c>)
 80023c0:	f005 fdd4 	bl	8007f6c <UG_WindowSetXEnd>
  UG_WindowSetYEnd(&window_1, LCD_HEIGHT-1);
 80023c4:	21ef      	movs	r1, #239	; 0xef
 80023c6:	487e      	ldr	r0, [pc, #504]	; (80025c0 <LCD_Test+0xa2c>)
 80023c8:	f005 fe02 	bl	8007fd0 <UG_WindowSetYEnd>

  // Create Buttons
  UG_ButtonCreate(&window_1, &button_1, BTN_ID_0, 5, 5, 70, 35);
 80023cc:	2323      	movs	r3, #35	; 0x23
 80023ce:	9302      	str	r3, [sp, #8]
 80023d0:	2346      	movs	r3, #70	; 0x46
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	2305      	movs	r3, #5
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	2305      	movs	r3, #5
 80023da:	2200      	movs	r2, #0
 80023dc:	497b      	ldr	r1, [pc, #492]	; (80025cc <LCD_Test+0xa38>)
 80023de:	4878      	ldr	r0, [pc, #480]	; (80025c0 <LCD_Test+0xa2c>)
 80023e0:	f006 f850 	bl	8008484 <UG_ButtonCreate>
  //Label Buttons
  UG_ButtonSetFont(&window_1,BTN_ID_0,DEFAULT_FONT);
 80023e4:	4a78      	ldr	r2, [pc, #480]	; (80025c8 <LCD_Test+0xa34>)
 80023e6:	2100      	movs	r1, #0
 80023e8:	4875      	ldr	r0, [pc, #468]	; (80025c0 <LCD_Test+0xa2c>)
 80023ea:	f006 f94b 	bl	8008684 <UG_ButtonSetFont>
  UG_ButtonSetForeColor(&window_1,BTN_ID_0, C_BLACK);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	4873      	ldr	r0, [pc, #460]	; (80025c0 <LCD_Test+0xa2c>)
 80023f4:	f006 f8c6 	bl	8008584 <UG_ButtonSetForeColor>
  UG_ButtonSetBackColor(&window_1, BTN_ID_0, C_LIGHT_GRAY);
 80023f8:	f24d 629a 	movw	r2, #54938	; 0xd69a
 80023fc:	2100      	movs	r1, #0
 80023fe:	4870      	ldr	r0, [pc, #448]	; (80025c0 <LCD_Test+0xa2c>)
 8002400:	f006 f8eb 	bl	80085da <UG_ButtonSetBackColor>
  UG_ButtonSetText(&window_1,BTN_ID_0,"3D Btn");
 8002404:	4a72      	ldr	r2, [pc, #456]	; (80025d0 <LCD_Test+0xa3c>)
 8002406:	2100      	movs	r1, #0
 8002408:	486d      	ldr	r0, [pc, #436]	; (80025c0 <LCD_Test+0xa2c>)
 800240a:	f006 f911 	bl	8008630 <UG_ButtonSetText>

  // Create Textbox
  UG_TextboxCreate(&window_1, &textbox_1, TXB_ID_0, 10, 40, LCD_WIDTH-20, 65);
 800240e:	2341      	movs	r3, #65	; 0x41
 8002410:	9302      	str	r3, [sp, #8]
 8002412:	23dc      	movs	r3, #220	; 0xdc
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	2328      	movs	r3, #40	; 0x28
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	230a      	movs	r3, #10
 800241c:	2200      	movs	r2, #0
 800241e:	496d      	ldr	r1, [pc, #436]	; (80025d4 <LCD_Test+0xa40>)
 8002420:	4867      	ldr	r0, [pc, #412]	; (80025c0 <LCD_Test+0xa2c>)
 8002422:	f006 fe03 	bl	800902c <UG_TextboxCreate>
  UG_TextboxSetFont(&window_1, TXB_ID_0, DEFAULT_FONT);
 8002426:	4a68      	ldr	r2, [pc, #416]	; (80025c8 <LCD_Test+0xa34>)
 8002428:	2100      	movs	r1, #0
 800242a:	4865      	ldr	r0, [pc, #404]	; (80025c0 <LCD_Test+0xa2c>)
 800242c:	f006 fef8 	bl	8009220 <UG_TextboxSetFont>
  UG_TextboxSetText(&window_1, TXB_ID_0, "Some Text");
 8002430:	4a69      	ldr	r2, [pc, #420]	; (80025d8 <LCD_Test+0xa44>)
 8002432:	2100      	movs	r1, #0
 8002434:	4862      	ldr	r0, [pc, #392]	; (80025c0 <LCD_Test+0xa2c>)
 8002436:	f006 fec9 	bl	80091cc <UG_TextboxSetText>
  UG_TextboxSetBackColor(&window_1, TXB_ID_0, C_LIGHT_YELLOW);
 800243a:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 800243e:	2100      	movs	r1, #0
 8002440:	485f      	ldr	r0, [pc, #380]	; (80025c0 <LCD_Test+0xa2c>)
 8002442:	f006 fe98 	bl	8009176 <UG_TextboxSetBackColor>
  UG_TextboxSetForeColor(&window_1, TXB_ID_0, C_BLACK);
 8002446:	2200      	movs	r2, #0
 8002448:	2100      	movs	r1, #0
 800244a:	485d      	ldr	r0, [pc, #372]	; (80025c0 <LCD_Test+0xa2c>)
 800244c:	f006 fe68 	bl	8009120 <UG_TextboxSetForeColor>
  UG_TextboxSetAlignment(&window_1, TXB_ID_0, ALIGN_CENTER);
 8002450:	2212      	movs	r2, #18
 8002452:	2100      	movs	r1, #0
 8002454:	485a      	ldr	r0, [pc, #360]	; (80025c0 <LCD_Test+0xa2c>)
 8002456:	f006 ff0d 	bl	8009274 <UG_TextboxSetAlignment>

  // Create progress bar
  UG_ProgressCreate(&window_1, &pgb, PGB_ID_0, 10, 72, LCD_WIDTH-20, 85);
 800245a:	2355      	movs	r3, #85	; 0x55
 800245c:	9302      	str	r3, [sp, #8]
 800245e:	23dc      	movs	r3, #220	; 0xdc
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	2348      	movs	r3, #72	; 0x48
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	230a      	movs	r3, #10
 8002468:	2200      	movs	r2, #0
 800246a:	495c      	ldr	r1, [pc, #368]	; (80025dc <LCD_Test+0xa48>)
 800246c:	4854      	ldr	r0, [pc, #336]	; (80025c0 <LCD_Test+0xa2c>)
 800246e:	f006 fb51 	bl	8008b14 <UG_ProgressCreate>
  UG_ProgressSetForeColor(&window_1, PGB_ID_0, C_ROYAL_BLUE);
 8002472:	f244 325b 	movw	r2, #17243	; 0x435b
 8002476:	2100      	movs	r1, #0
 8002478:	4851      	ldr	r0, [pc, #324]	; (80025c0 <LCD_Test+0xa2c>)
 800247a:	f006 fbaf 	bl	8008bdc <UG_ProgressSetForeColor>

  UG_WindowShow(&window_1);
 800247e:	4850      	ldr	r0, [pc, #320]	; (80025c0 <LCD_Test+0xa2c>)
 8002480:	f005 fb00 	bl	8007a84 <UG_WindowShow>
  UG_Update();
 8002484:	f005 f850 	bl	8007528 <UG_Update>
  printTime();
 8002488:	f7ff fb4e 	bl	8001b28 <printTime>
  HAL_Delay(1000);
 800248c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002490:	f000 f928 	bl	80026e4 <HAL_Delay>
  uint32_t btn_time,progress_time,now;
  uint8_t i=0, j=0,u=0;
 8002494:	2300      	movs	r3, #0
 8002496:	75fb      	strb	r3, [r7, #23]
 8002498:	2300      	movs	r3, #0
 800249a:	75bb      	strb	r3, [r7, #22]
 800249c:	2300      	movs	r3, #0
 800249e:	757b      	strb	r3, [r7, #21]
  btn_time = progress_time = HAL_GetTick();
 80024a0:	f000 f914 	bl	80026cc <HAL_GetTick>
 80024a4:	61b8      	str	r0, [r7, #24]
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	61fb      	str	r3, [r7, #28]
  while(1){
    now=HAL_GetTick();
 80024aa:	f000 f90f 	bl	80026cc <HAL_GetTick>
 80024ae:	6078      	str	r0, [r7, #4]
    if(now-btn_time>199){
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2bc7      	cmp	r3, #199	; 0xc7
 80024b8:	d916      	bls.n	80024e8 <LCD_Test+0x954>
      btn_time=now;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	61fb      	str	r3, [r7, #28]
      u=1;
 80024be:	2301      	movs	r3, #1
 80024c0:	757b      	strb	r3, [r7, #21]
      i++;
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
 80024c4:	3301      	adds	r3, #1
 80024c6:	75fb      	strb	r3, [r7, #23]
      //UG_TouchUpdate((i&1 ? 10 : -1), (i&1 ? 31 : -1), OBJ_TOUCH_STATE_CHANGED | (i&1 ? OBJ_TOUCH_STATE_IS_PRESSED : 0));
      if(i==9){
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	2b09      	cmp	r3, #9
 80024cc:	d109      	bne.n	80024e2 <LCD_Test+0x94e>
        UG_ButtonSetText(&window_1,BTN_ID_0,"2D Btn");
 80024ce:	4a44      	ldr	r2, [pc, #272]	; (80025e0 <LCD_Test+0xa4c>)
 80024d0:	2100      	movs	r1, #0
 80024d2:	483b      	ldr	r0, [pc, #236]	; (80025c0 <LCD_Test+0xa2c>)
 80024d4:	f006 f8ac 	bl	8008630 <UG_ButtonSetText>
        UG_ButtonSetStyle(&window_1, BTN_ID_0, BTN_STYLE_2D);
 80024d8:	2200      	movs	r2, #0
 80024da:	2100      	movs	r1, #0
 80024dc:	4838      	ldr	r0, [pc, #224]	; (80025c0 <LCD_Test+0xa2c>)
 80024de:	f006 f8fb 	bl	80086d8 <UG_ButtonSetStyle>
      }
      if(i>19){
 80024e2:	7dfb      	ldrb	r3, [r7, #23]
 80024e4:	2b13      	cmp	r3, #19
 80024e6:	d81e      	bhi.n	8002526 <LCD_Test+0x992>
        break;
      }
    }
    if(now-progress_time>19){
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b13      	cmp	r3, #19
 80024f0:	d911      	bls.n	8002516 <LCD_Test+0x982>
      progress_time=now;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	61bb      	str	r3, [r7, #24]
      u=1;
 80024f6:	2301      	movs	r3, #1
 80024f8:	757b      	strb	r3, [r7, #21]
      if(++j>100)
 80024fa:	7dbb      	ldrb	r3, [r7, #22]
 80024fc:	3301      	adds	r3, #1
 80024fe:	75bb      	strb	r3, [r7, #22]
 8002500:	7dbb      	ldrb	r3, [r7, #22]
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d901      	bls.n	800250a <LCD_Test+0x976>
        j=0;
 8002506:	2300      	movs	r3, #0
 8002508:	75bb      	strb	r3, [r7, #22]
      UG_ProgressSetProgress(&window_1, PGB_ID_0, j);
 800250a:	7dbb      	ldrb	r3, [r7, #22]
 800250c:	461a      	mov	r2, r3
 800250e:	2100      	movs	r1, #0
 8002510:	482b      	ldr	r0, [pc, #172]	; (80025c0 <LCD_Test+0xa2c>)
 8002512:	f006 fb8e 	bl	8008c32 <UG_ProgressSetProgress>
    }
    if(u){
 8002516:	7d7b      	ldrb	r3, [r7, #21]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0c6      	beq.n	80024aa <LCD_Test+0x916>
      u=0;
 800251c:	2300      	movs	r3, #0
 800251e:	757b      	strb	r3, [r7, #21]
      UG_Update();
 8002520:	f005 f802 	bl	8007528 <UG_Update>
    now=HAL_GetTick();
 8002524:	e7c1      	b.n	80024aa <LCD_Test+0x916>
        break;
 8002526:	bf00      	nop
    }
  }
  UG_WindowHide(&window_1);
 8002528:	4825      	ldr	r0, [pc, #148]	; (80025c0 <LCD_Test+0xa2c>)
 800252a:	f005 fad1 	bl	8007ad0 <UG_WindowHide>
  UG_WindowDelete(&window_1);
 800252e:	4824      	ldr	r0, [pc, #144]	; (80025c0 <LCD_Test+0xa2c>)
 8002530:	f005 fa6a 	bl	8007a08 <UG_WindowDelete>
  UG_Update();
 8002534:	f004 fff8 	bl	8007528 <UG_Update>
  t = UG_FontGetTransparency();
 8002538:	f004 f87c 	bl	8006634 <UG_FontGetTransparency>
 800253c:	4603      	mov	r3, r0
 800253e:	72fb      	strb	r3, [r7, #11]
#if DEMO_FLASH_KB >=64
  UG_FillScreen(0x4b10);
 8002540:	f644 3010 	movw	r0, #19216	; 0x4b10
 8002544:	f003 f9c4 	bl	80058d0 <UG_FillScreen>
  clearTime();
 8002548:	f7ff fae2 	bl	8001b10 <clearTime>
  UG_DrawBMP((LCD_WIDTH-ITMLogo.width)/2, (LCD_HEIGHT-ITMLogo.height)/2, &ITMLogo);
 800254c:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <LCD_Test+0xa50>)
 800254e:	889b      	ldrh	r3, [r3, #4]
 8002550:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002554:	0fda      	lsrs	r2, r3, #31
 8002556:	4413      	add	r3, r2
 8002558:	105b      	asrs	r3, r3, #1
 800255a:	b218      	sxth	r0, r3
 800255c:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <LCD_Test+0xa50>)
 800255e:	88db      	ldrh	r3, [r3, #6]
 8002560:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002564:	0fda      	lsrs	r2, r3, #31
 8002566:	4413      	add	r3, r2
 8002568:	105b      	asrs	r3, r3, #1
 800256a:	b21b      	sxth	r3, r3
 800256c:	4a1d      	ldr	r2, [pc, #116]	; (80025e4 <LCD_Test+0xa50>)
 800256e:	4619      	mov	r1, r3
 8002570:	f005 f89a 	bl	80076a8 <UG_DrawBMP>
  UG_Update();
 8002574:	f004 ffd8 	bl	8007528 <UG_Update>
  printTime();
 8002578:	f7ff fad6 	bl	8001b28 <printTime>
  UG_FontSetTransparency(0);
 800257c:	2000      	movs	r0, #0
 800257e:	f004 f847 	bl	8006610 <UG_FontSetTransparency>
  LCD_PutStr(10, 5, "Image", DEFAULT_FONT, C_YELLOW, C_RED);
 8002582:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002586:	9301      	str	r3, [sp, #4]
 8002588:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <LCD_Test+0xa34>)
 8002590:	4a15      	ldr	r2, [pc, #84]	; (80025e8 <LCD_Test+0xa54>)
 8002592:	2105      	movs	r1, #5
 8002594:	200a      	movs	r0, #10
 8002596:	f7ff fa17 	bl	80019c8 <LCD_PutStr>
  UG_Update();
 800259a:	f004 ffc5 	bl	8007528 <UG_Update>
  UG_FontSetTransparency(t);
 800259e:	7afb      	ldrb	r3, [r7, #11]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f004 f835 	bl	8006610 <UG_FontSetTransparency>
#endif
  HAL_Delay(1000);
 80025a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025aa:	f000 f89b 	bl	80026e4 <HAL_Delay>
}
 80025ae:	bf00      	nop
 80025b0:	3734      	adds	r7, #52	; 0x34
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd90      	pop	{r4, r7, pc}
 80025b6:	bf00      	nop
 80025b8:	080025ed 	.word	0x080025ed
 80025bc:	200003a8 	.word	0x200003a8
 80025c0:	20000348 	.word	0x20000348
 80025c4:	0800d610 	.word	0x0800d610
 80025c8:	0802005c 	.word	0x0802005c
 80025cc:	2000037c 	.word	0x2000037c
 80025d0:	0800d61c 	.word	0x0800d61c
 80025d4:	20000394 	.word	0x20000394
 80025d8:	0800d624 	.word	0x0800d624
 80025dc:	200004e8 	.word	0x200004e8
 80025e0:	0800d630 	.word	0x0800d630
 80025e4:	2000001c 	.word	0x2000001c
 80025e8:	0800d638 	.word	0x0800d638

080025ec <window_1_callback>:


static void window_1_callback(UG_MESSAGE *msg)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
                }
            }
        }
    }
*/
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <HAL_Init+0x40>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <HAL_Init+0x40>)
 800260a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_Init+0x40>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <HAL_Init+0x40>)
 8002616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800261a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_Init+0x40>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a07      	ldr	r2, [pc, #28]	; (8002640 <HAL_Init+0x40>)
 8002622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002626:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002628:	2003      	movs	r0, #3
 800262a:	f000 f94f 	bl	80028cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800262e:	200f      	movs	r0, #15
 8002630:	f000 f808 	bl	8002644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002634:	f7fe fbf8 	bl	8000e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023c00 	.word	0x40023c00

08002644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_InitTick+0x54>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_InitTick+0x58>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800265a:	fbb3 f3f1 	udiv	r3, r3, r1
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f967 	bl	8002936 <HAL_SYSTICK_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e00e      	b.n	8002690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b0f      	cmp	r3, #15
 8002676:	d80a      	bhi.n	800268e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002678:	2200      	movs	r2, #0
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002680:	f000 f92f 	bl	80028e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002684:	4a06      	ldr	r2, [pc, #24]	; (80026a0 <HAL_InitTick+0x5c>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000000 	.word	0x20000000
 800269c:	20000018 	.word	0x20000018
 80026a0:	20000014 	.word	0x20000014

080026a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_IncTick+0x20>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_IncTick+0x24>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <HAL_IncTick+0x24>)
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000018 	.word	0x20000018
 80026c8:	200004f0 	.word	0x200004f0

080026cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return uwTick;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <HAL_GetTick+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	200004f0 	.word	0x200004f0

080026e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff ffee 	bl	80026cc <HAL_GetTick>
 80026f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026fc:	d005      	beq.n	800270a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_Delay+0x44>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4413      	add	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800270a:	bf00      	nop
 800270c:	f7ff ffde 	bl	80026cc <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	429a      	cmp	r2, r3
 800271a:	d8f7      	bhi.n	800270c <HAL_Delay+0x28>
  {
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000018 	.word	0x20000018

0800272c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002748:	4013      	ands	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275e:	4a04      	ldr	r2, [pc, #16]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	60d3      	str	r3, [r2, #12]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <__NVIC_GetPriorityGrouping+0x18>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f003 0307 	and.w	r3, r3, #7
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db0b      	blt.n	80027ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	4907      	ldr	r1, [pc, #28]	; (80027c8 <__NVIC_EnableIRQ+0x38>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2001      	movs	r0, #1
 80027b2:	fa00 f202 	lsl.w	r2, r0, r2
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000e100 	.word	0xe000e100

080027cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	6039      	str	r1, [r7, #0]
 80027d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db0a      	blt.n	80027f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	490c      	ldr	r1, [pc, #48]	; (8002818 <__NVIC_SetPriority+0x4c>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	0112      	lsls	r2, r2, #4
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	440b      	add	r3, r1
 80027f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f4:	e00a      	b.n	800280c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4908      	ldr	r1, [pc, #32]	; (800281c <__NVIC_SetPriority+0x50>)
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	3b04      	subs	r3, #4
 8002804:	0112      	lsls	r2, r2, #4
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	440b      	add	r3, r1
 800280a:	761a      	strb	r2, [r3, #24]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000e100 	.word	0xe000e100
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f1c3 0307 	rsb	r3, r3, #7
 800283a:	2b04      	cmp	r3, #4
 800283c:	bf28      	it	cs
 800283e:	2304      	movcs	r3, #4
 8002840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3304      	adds	r3, #4
 8002846:	2b06      	cmp	r3, #6
 8002848:	d902      	bls.n	8002850 <NVIC_EncodePriority+0x30>
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3b03      	subs	r3, #3
 800284e:	e000      	b.n	8002852 <NVIC_EncodePriority+0x32>
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	401a      	ands	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002868:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	43d9      	mvns	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	4313      	orrs	r3, r2
         );
}
 800287a:	4618      	mov	r0, r3
 800287c:	3724      	adds	r7, #36	; 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002898:	d301      	bcc.n	800289e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800289a:	2301      	movs	r3, #1
 800289c:	e00f      	b.n	80028be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <SysTick_Config+0x40>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a6:	210f      	movs	r1, #15
 80028a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028ac:	f7ff ff8e 	bl	80027cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <SysTick_Config+0x40>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <SysTick_Config+0x40>)
 80028b8:	2207      	movs	r2, #7
 80028ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	e000e010 	.word	0xe000e010

080028cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff29 	bl	800272c <__NVIC_SetPriorityGrouping>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b086      	sub	sp, #24
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	4603      	mov	r3, r0
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f4:	f7ff ff3e 	bl	8002774 <__NVIC_GetPriorityGrouping>
 80028f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	6978      	ldr	r0, [r7, #20]
 8002900:	f7ff ff8e 	bl	8002820 <NVIC_EncodePriority>
 8002904:	4602      	mov	r2, r0
 8002906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff5d 	bl	80027cc <__NVIC_SetPriority>
}
 8002912:	bf00      	nop
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff31 	bl	8002790 <__NVIC_EnableIRQ>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff ffa2 	bl	8002888 <SysTick_Config>
 8002944:	4603      	mov	r3, r0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800295c:	f7ff feb6 	bl	80026cc <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e099      	b.n	8002aa0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800298c:	e00f      	b.n	80029ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800298e:	f7ff fe9d 	bl	80026cc <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b05      	cmp	r3, #5
 800299a:	d908      	bls.n	80029ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2203      	movs	r2, #3
 80029a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e078      	b.n	8002aa0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1e8      	bne.n	800298e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	4b38      	ldr	r3, [pc, #224]	; (8002aa8 <HAL_DMA_Init+0x158>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d107      	bne.n	8002a18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	4313      	orrs	r3, r2
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f023 0307 	bic.w	r3, r3, #7
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d117      	bne.n	8002a72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00e      	beq.n	8002a72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 fb63 	bl	8003120 <DMA_CheckFifoParam>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2240      	movs	r2, #64	; 0x40
 8002a64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e016      	b.n	8002aa0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fb1a 	bl	80030b4 <DMA_CalcBaseAndBitshift>
 8002a80:	4603      	mov	r3, r0
 8002a82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a88:	223f      	movs	r2, #63	; 0x3f
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	f010803f 	.word	0xf010803f

08002aac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_DMA_Start_IT+0x26>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e040      	b.n	8002b54 <HAL_DMA_Start_IT+0xa8>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d12f      	bne.n	8002b46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 faac 	bl	8003058 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b04:	223f      	movs	r2, #63	; 0x3f
 8002b06:	409a      	lsls	r2, r3
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0216 	orr.w	r2, r2, #22
 8002b1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d007      	beq.n	8002b34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0208 	orr.w	r2, r2, #8
 8002b32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	e005      	b.n	8002b52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b6a:	f7ff fdaf 	bl	80026cc <HAL_GetTick>
 8002b6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d008      	beq.n	8002b8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2280      	movs	r2, #128	; 0x80
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e052      	b.n	8002c34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0216 	bic.w	r2, r2, #22
 8002b9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d103      	bne.n	8002bbe <HAL_DMA_Abort+0x62>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d007      	beq.n	8002bce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0208 	bic.w	r2, r2, #8
 8002bcc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0201 	bic.w	r2, r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bde:	e013      	b.n	8002c08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002be0:	f7ff fd74 	bl	80026cc <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b05      	cmp	r3, #5
 8002bec:	d90c      	bls.n	8002c08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e015      	b.n	8002c34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1e4      	bne.n	8002be0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1a:	223f      	movs	r2, #63	; 0x3f
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d004      	beq.n	8002c5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2280      	movs	r2, #128	; 0x80
 8002c54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e00c      	b.n	8002c74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2205      	movs	r2, #5
 8002c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0201 	bic.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c8c:	4b8e      	ldr	r3, [pc, #568]	; (8002ec8 <HAL_DMA_IRQHandler+0x248>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a8e      	ldr	r2, [pc, #568]	; (8002ecc <HAL_DMA_IRQHandler+0x24c>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	0a9b      	lsrs	r3, r3, #10
 8002c98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002caa:	2208      	movs	r2, #8
 8002cac:	409a      	lsls	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d01a      	beq.n	8002cec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d013      	beq.n	8002cec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0204 	bic.w	r2, r2, #4
 8002cd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd8:	2208      	movs	r2, #8
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce4:	f043 0201 	orr.w	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d012      	beq.n	8002d22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00b      	beq.n	8002d22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0e:	2201      	movs	r2, #1
 8002d10:	409a      	lsls	r2, r3
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	f043 0202 	orr.w	r2, r3, #2
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d26:	2204      	movs	r2, #4
 8002d28:	409a      	lsls	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d012      	beq.n	8002d58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00b      	beq.n	8002d58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d44:	2204      	movs	r2, #4
 8002d46:	409a      	lsls	r2, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	f043 0204 	orr.w	r2, r3, #4
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5c:	2210      	movs	r2, #16
 8002d5e:	409a      	lsls	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d043      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d03c      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7a:	2210      	movs	r2, #16
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d018      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d108      	bne.n	8002db0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d024      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	4798      	blx	r3
 8002dae:	e01f      	b.n	8002df0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d01b      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	4798      	blx	r3
 8002dc0:	e016      	b.n	8002df0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d107      	bne.n	8002de0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0208 	bic.w	r2, r2, #8
 8002dde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df4:	2220      	movs	r2, #32
 8002df6:	409a      	lsls	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 808f 	beq.w	8002f20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 8087 	beq.w	8002f20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e16:	2220      	movs	r2, #32
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b05      	cmp	r3, #5
 8002e28:	d136      	bne.n	8002e98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0216 	bic.w	r2, r2, #22
 8002e38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d103      	bne.n	8002e5a <HAL_DMA_IRQHandler+0x1da>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d007      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0208 	bic.w	r2, r2, #8
 8002e68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6e:	223f      	movs	r2, #63	; 0x3f
 8002e70:	409a      	lsls	r2, r3
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d07e      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	4798      	blx	r3
        }
        return;
 8002e96:	e079      	b.n	8002f8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d01d      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10d      	bne.n	8002ed0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d031      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	4798      	blx	r3
 8002ec4:	e02c      	b.n	8002f20 <HAL_DMA_IRQHandler+0x2a0>
 8002ec6:	bf00      	nop
 8002ec8:	20000000 	.word	0x20000000
 8002ecc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d023      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	4798      	blx	r3
 8002ee0:	e01e      	b.n	8002f20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10f      	bne.n	8002f10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0210 	bic.w	r2, r2, #16
 8002efe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d032      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d022      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2205      	movs	r2, #5
 8002f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d307      	bcc.n	8002f68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f2      	bne.n	8002f4c <HAL_DMA_IRQHandler+0x2cc>
 8002f66:	e000      	b.n	8002f6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d005      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	4798      	blx	r3
 8002f8a:	e000      	b.n	8002f8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f8c:	bf00      	nop
    }
  }
}
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_DMA_RegisterCallback+0x20>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e03d      	b.n	8003030 <HAL_DMA_RegisterCallback+0x9c>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d12c      	bne.n	8003022 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8002fc8:	7afb      	ldrb	r3, [r7, #11]
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	d826      	bhi.n	800301c <HAL_DMA_RegisterCallback+0x88>
 8002fce:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <HAL_DMA_RegisterCallback+0x40>)
 8002fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd4:	08002fed 	.word	0x08002fed
 8002fd8:	08002ff5 	.word	0x08002ff5
 8002fdc:	08002ffd 	.word	0x08002ffd
 8002fe0:	08003005 	.word	0x08003005
 8002fe4:	0800300d 	.word	0x0800300d
 8002fe8:	08003015 	.word	0x08003015
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8002ff2:	e018      	b.n	8003026 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002ffa:	e014      	b.n	8003026 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8003002:	e010      	b.n	8003026 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 800300a:	e00c      	b.n	8003026 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8003012:	e008      	b.n	8003026 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800301a:	e004      	b.n	8003026 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	75fb      	strb	r3, [r7, #23]
      break;
 8003020:	e001      	b.n	8003026 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 800302e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003030:	4618      	mov	r0, r3
 8003032:	371c      	adds	r7, #28
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800304a:	b2db      	uxtb	r3, r3
}
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003074:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b40      	cmp	r3, #64	; 0x40
 8003084:	d108      	bne.n	8003098 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003096:	e007      	b.n	80030a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	60da      	str	r2, [r3, #12]
}
 80030a8:	bf00      	nop
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	3b10      	subs	r3, #16
 80030c4:	4a14      	ldr	r2, [pc, #80]	; (8003118 <DMA_CalcBaseAndBitshift+0x64>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	091b      	lsrs	r3, r3, #4
 80030cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030ce:	4a13      	ldr	r2, [pc, #76]	; (800311c <DMA_CalcBaseAndBitshift+0x68>)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4413      	add	r3, r2
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	461a      	mov	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d909      	bls.n	80030f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030ea:	f023 0303 	bic.w	r3, r3, #3
 80030ee:	1d1a      	adds	r2, r3, #4
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	659a      	str	r2, [r3, #88]	; 0x58
 80030f4:	e007      	b.n	8003106 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030fe:	f023 0303 	bic.w	r3, r3, #3
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	aaaaaaab 	.word	0xaaaaaaab
 800311c:	0800d760 	.word	0x0800d760

08003120 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d11f      	bne.n	800317a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d856      	bhi.n	80031ee <DMA_CheckFifoParam+0xce>
 8003140:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <DMA_CheckFifoParam+0x28>)
 8003142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003146:	bf00      	nop
 8003148:	08003159 	.word	0x08003159
 800314c:	0800316b 	.word	0x0800316b
 8003150:	08003159 	.word	0x08003159
 8003154:	080031ef 	.word	0x080031ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d046      	beq.n	80031f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003168:	e043      	b.n	80031f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003172:	d140      	bne.n	80031f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003178:	e03d      	b.n	80031f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003182:	d121      	bne.n	80031c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b03      	cmp	r3, #3
 8003188:	d837      	bhi.n	80031fa <DMA_CheckFifoParam+0xda>
 800318a:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <DMA_CheckFifoParam+0x70>)
 800318c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003190:	080031a1 	.word	0x080031a1
 8003194:	080031a7 	.word	0x080031a7
 8003198:	080031a1 	.word	0x080031a1
 800319c:	080031b9 	.word	0x080031b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
      break;
 80031a4:	e030      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d025      	beq.n	80031fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b6:	e022      	b.n	80031fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031c0:	d11f      	bne.n	8003202 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031c6:	e01c      	b.n	8003202 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d903      	bls.n	80031d6 <DMA_CheckFifoParam+0xb6>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d003      	beq.n	80031dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031d4:	e018      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
      break;
 80031da:	e015      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00e      	beq.n	8003206 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
      break;
 80031ec:	e00b      	b.n	8003206 <DMA_CheckFifoParam+0xe6>
      break;
 80031ee:	bf00      	nop
 80031f0:	e00a      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;
 80031f2:	bf00      	nop
 80031f4:	e008      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;
 80031f6:	bf00      	nop
 80031f8:	e006      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;
 80031fa:	bf00      	nop
 80031fc:	e004      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;
 80031fe:	bf00      	nop
 8003200:	e002      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;   
 8003202:	bf00      	nop
 8003204:	e000      	b.n	8003208 <DMA_CheckFifoParam+0xe8>
      break;
 8003206:	bf00      	nop
    }
  } 
  
  return status; 
 8003208:	7bfb      	ldrb	r3, [r7, #15]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop

08003218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800322a:	2300      	movs	r3, #0
 800322c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800322e:	2300      	movs	r3, #0
 8003230:	61fb      	str	r3, [r7, #28]
 8003232:	e159      	b.n	80034e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003234:	2201      	movs	r2, #1
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	429a      	cmp	r2, r3
 800324e:	f040 8148 	bne.w	80034e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	2b01      	cmp	r3, #1
 800325c:	d005      	beq.n	800326a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003266:	2b02      	cmp	r3, #2
 8003268:	d130      	bne.n	80032cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	2203      	movs	r2, #3
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4013      	ands	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4313      	orrs	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032a0:	2201      	movs	r2, #1
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 0201 	and.w	r2, r3, #1
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d017      	beq.n	8003308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	2203      	movs	r2, #3
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d123      	bne.n	800335c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	08da      	lsrs	r2, r3, #3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3208      	adds	r2, #8
 800331c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	220f      	movs	r2, #15
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	08da      	lsrs	r2, r3, #3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3208      	adds	r2, #8
 8003356:	69b9      	ldr	r1, [r7, #24]
 8003358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	2203      	movs	r2, #3
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 0203 	and.w	r2, r3, #3
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80a2 	beq.w	80034e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	4b57      	ldr	r3, [pc, #348]	; (8003500 <HAL_GPIO_Init+0x2e8>)
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	4a56      	ldr	r2, [pc, #344]	; (8003500 <HAL_GPIO_Init+0x2e8>)
 80033a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ac:	6453      	str	r3, [r2, #68]	; 0x44
 80033ae:	4b54      	ldr	r3, [pc, #336]	; (8003500 <HAL_GPIO_Init+0x2e8>)
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ba:	4a52      	ldr	r2, [pc, #328]	; (8003504 <HAL_GPIO_Init+0x2ec>)
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	3302      	adds	r3, #2
 80033c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	220f      	movs	r2, #15
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4013      	ands	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a49      	ldr	r2, [pc, #292]	; (8003508 <HAL_GPIO_Init+0x2f0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d019      	beq.n	800341a <HAL_GPIO_Init+0x202>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a48      	ldr	r2, [pc, #288]	; (800350c <HAL_GPIO_Init+0x2f4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d013      	beq.n	8003416 <HAL_GPIO_Init+0x1fe>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a47      	ldr	r2, [pc, #284]	; (8003510 <HAL_GPIO_Init+0x2f8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00d      	beq.n	8003412 <HAL_GPIO_Init+0x1fa>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a46      	ldr	r2, [pc, #280]	; (8003514 <HAL_GPIO_Init+0x2fc>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d007      	beq.n	800340e <HAL_GPIO_Init+0x1f6>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a45      	ldr	r2, [pc, #276]	; (8003518 <HAL_GPIO_Init+0x300>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d101      	bne.n	800340a <HAL_GPIO_Init+0x1f2>
 8003406:	2304      	movs	r3, #4
 8003408:	e008      	b.n	800341c <HAL_GPIO_Init+0x204>
 800340a:	2307      	movs	r3, #7
 800340c:	e006      	b.n	800341c <HAL_GPIO_Init+0x204>
 800340e:	2303      	movs	r3, #3
 8003410:	e004      	b.n	800341c <HAL_GPIO_Init+0x204>
 8003412:	2302      	movs	r3, #2
 8003414:	e002      	b.n	800341c <HAL_GPIO_Init+0x204>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <HAL_GPIO_Init+0x204>
 800341a:	2300      	movs	r3, #0
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	f002 0203 	and.w	r2, r2, #3
 8003422:	0092      	lsls	r2, r2, #2
 8003424:	4093      	lsls	r3, r2
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800342c:	4935      	ldr	r1, [pc, #212]	; (8003504 <HAL_GPIO_Init+0x2ec>)
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	089b      	lsrs	r3, r3, #2
 8003432:	3302      	adds	r3, #2
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800343a:	4b38      	ldr	r3, [pc, #224]	; (800351c <HAL_GPIO_Init+0x304>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800345e:	4a2f      	ldr	r2, [pc, #188]	; (800351c <HAL_GPIO_Init+0x304>)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003464:	4b2d      	ldr	r3, [pc, #180]	; (800351c <HAL_GPIO_Init+0x304>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003488:	4a24      	ldr	r2, [pc, #144]	; (800351c <HAL_GPIO_Init+0x304>)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800348e:	4b23      	ldr	r3, [pc, #140]	; (800351c <HAL_GPIO_Init+0x304>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	43db      	mvns	r3, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4013      	ands	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034b2:	4a1a      	ldr	r2, [pc, #104]	; (800351c <HAL_GPIO_Init+0x304>)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034b8:	4b18      	ldr	r3, [pc, #96]	; (800351c <HAL_GPIO_Init+0x304>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034dc:	4a0f      	ldr	r2, [pc, #60]	; (800351c <HAL_GPIO_Init+0x304>)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3301      	adds	r3, #1
 80034e6:	61fb      	str	r3, [r7, #28]
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	2b0f      	cmp	r3, #15
 80034ec:	f67f aea2 	bls.w	8003234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034f0:	bf00      	nop
 80034f2:	bf00      	nop
 80034f4:	3724      	adds	r7, #36	; 0x24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40023800 	.word	0x40023800
 8003504:	40013800 	.word	0x40013800
 8003508:	40020000 	.word	0x40020000
 800350c:	40020400 	.word	0x40020400
 8003510:	40020800 	.word	0x40020800
 8003514:	40020c00 	.word	0x40020c00
 8003518:	40021000 	.word	0x40021000
 800351c:	40013c00 	.word	0x40013c00

08003520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	807b      	strh	r3, [r7, #2]
 800352c:	4613      	mov	r3, r2
 800352e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003530:	787b      	ldrb	r3, [r7, #1]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003536:	887a      	ldrh	r2, [r7, #2]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800353c:	e003      	b.n	8003546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800353e:	887b      	ldrh	r3, [r7, #2]
 8003540:	041a      	lsls	r2, r3, #16
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	619a      	str	r2, [r3, #24]
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003552:	b480      	push	{r7}
 8003554:	b085      	sub	sp, #20
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	460b      	mov	r3, r1
 800355c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003564:	887a      	ldrh	r2, [r7, #2]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4013      	ands	r3, r2
 800356a:	041a      	lsls	r2, r3, #16
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	43d9      	mvns	r1, r3
 8003570:	887b      	ldrh	r3, [r7, #2]
 8003572:	400b      	ands	r3, r1
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	619a      	str	r2, [r3, #24]
}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003592:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d006      	beq.n	80035ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800359e:	4a05      	ldr	r2, [pc, #20]	; (80035b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 f806 	bl	80035b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40013c00 	.word	0x40013c00

080035b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e267      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d075      	beq.n	80036da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ee:	4b88      	ldr	r3, [pc, #544]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d00c      	beq.n	8003614 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035fa:	4b85      	ldr	r3, [pc, #532]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003602:	2b08      	cmp	r3, #8
 8003604:	d112      	bne.n	800362c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003606:	4b82      	ldr	r3, [pc, #520]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003612:	d10b      	bne.n	800362c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003614:	4b7e      	ldr	r3, [pc, #504]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d05b      	beq.n	80036d8 <HAL_RCC_OscConfig+0x108>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d157      	bne.n	80036d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e242      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003634:	d106      	bne.n	8003644 <HAL_RCC_OscConfig+0x74>
 8003636:	4b76      	ldr	r3, [pc, #472]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a75      	ldr	r2, [pc, #468]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800363c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	e01d      	b.n	8003680 <HAL_RCC_OscConfig+0xb0>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800364c:	d10c      	bne.n	8003668 <HAL_RCC_OscConfig+0x98>
 800364e:	4b70      	ldr	r3, [pc, #448]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a6f      	ldr	r2, [pc, #444]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	4b6d      	ldr	r3, [pc, #436]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a6c      	ldr	r2, [pc, #432]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	e00b      	b.n	8003680 <HAL_RCC_OscConfig+0xb0>
 8003668:	4b69      	ldr	r3, [pc, #420]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a68      	ldr	r2, [pc, #416]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800366e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	4b66      	ldr	r3, [pc, #408]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a65      	ldr	r2, [pc, #404]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800367a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800367e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d013      	beq.n	80036b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7ff f820 	bl	80026cc <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003690:	f7ff f81c 	bl	80026cc <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b64      	cmp	r3, #100	; 0x64
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e207      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a2:	4b5b      	ldr	r3, [pc, #364]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f0      	beq.n	8003690 <HAL_RCC_OscConfig+0xc0>
 80036ae:	e014      	b.n	80036da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7ff f80c 	bl	80026cc <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b8:	f7ff f808 	bl	80026cc <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b64      	cmp	r3, #100	; 0x64
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e1f3      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ca:	4b51      	ldr	r3, [pc, #324]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0xe8>
 80036d6:	e000      	b.n	80036da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d063      	beq.n	80037ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036e6:	4b4a      	ldr	r3, [pc, #296]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00b      	beq.n	800370a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036f2:	4b47      	ldr	r3, [pc, #284]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d11c      	bne.n	8003738 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036fe:	4b44      	ldr	r3, [pc, #272]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d116      	bne.n	8003738 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800370a:	4b41      	ldr	r3, [pc, #260]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <HAL_RCC_OscConfig+0x152>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d001      	beq.n	8003722 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e1c7      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003722:	4b3b      	ldr	r3, [pc, #236]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4937      	ldr	r1, [pc, #220]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003732:	4313      	orrs	r3, r2
 8003734:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003736:	e03a      	b.n	80037ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d020      	beq.n	8003782 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003740:	4b34      	ldr	r3, [pc, #208]	; (8003814 <HAL_RCC_OscConfig+0x244>)
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003746:	f7fe ffc1 	bl	80026cc <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800374e:	f7fe ffbd 	bl	80026cc <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e1a8      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003760:	4b2b      	ldr	r3, [pc, #172]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376c:	4b28      	ldr	r3, [pc, #160]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4925      	ldr	r1, [pc, #148]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800377c:	4313      	orrs	r3, r2
 800377e:	600b      	str	r3, [r1, #0]
 8003780:	e015      	b.n	80037ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003782:	4b24      	ldr	r3, [pc, #144]	; (8003814 <HAL_RCC_OscConfig+0x244>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7fe ffa0 	bl	80026cc <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003790:	f7fe ff9c 	bl	80026cc <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e187      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a2:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d036      	beq.n	8003828 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d016      	beq.n	80037f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c2:	4b15      	ldr	r3, [pc, #84]	; (8003818 <HAL_RCC_OscConfig+0x248>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c8:	f7fe ff80 	bl	80026cc <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037d0:	f7fe ff7c 	bl	80026cc <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e167      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e2:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80037e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0x200>
 80037ee:	e01b      	b.n	8003828 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <HAL_RCC_OscConfig+0x248>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f6:	f7fe ff69 	bl	80026cc <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037fc:	e00e      	b.n	800381c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037fe:	f7fe ff65 	bl	80026cc <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d907      	bls.n	800381c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e150      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
 8003810:	40023800 	.word	0x40023800
 8003814:	42470000 	.word	0x42470000
 8003818:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800381c:	4b88      	ldr	r3, [pc, #544]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 800381e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1ea      	bne.n	80037fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 8097 	beq.w	8003964 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003836:	2300      	movs	r3, #0
 8003838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383a:	4b81      	ldr	r3, [pc, #516]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10f      	bne.n	8003866 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	4b7d      	ldr	r3, [pc, #500]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	4a7c      	ldr	r2, [pc, #496]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 8003850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003854:	6413      	str	r3, [r2, #64]	; 0x40
 8003856:	4b7a      	ldr	r3, [pc, #488]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003862:	2301      	movs	r3, #1
 8003864:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003866:	4b77      	ldr	r3, [pc, #476]	; (8003a44 <HAL_RCC_OscConfig+0x474>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d118      	bne.n	80038a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003872:	4b74      	ldr	r3, [pc, #464]	; (8003a44 <HAL_RCC_OscConfig+0x474>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a73      	ldr	r2, [pc, #460]	; (8003a44 <HAL_RCC_OscConfig+0x474>)
 8003878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387e:	f7fe ff25 	bl	80026cc <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003886:	f7fe ff21 	bl	80026cc <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e10c      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003898:	4b6a      	ldr	r3, [pc, #424]	; (8003a44 <HAL_RCC_OscConfig+0x474>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d106      	bne.n	80038ba <HAL_RCC_OscConfig+0x2ea>
 80038ac:	4b64      	ldr	r3, [pc, #400]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b0:	4a63      	ldr	r2, [pc, #396]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	6713      	str	r3, [r2, #112]	; 0x70
 80038b8:	e01c      	b.n	80038f4 <HAL_RCC_OscConfig+0x324>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b05      	cmp	r3, #5
 80038c0:	d10c      	bne.n	80038dc <HAL_RCC_OscConfig+0x30c>
 80038c2:	4b5f      	ldr	r3, [pc, #380]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	4a5e      	ldr	r2, [pc, #376]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038c8:	f043 0304 	orr.w	r3, r3, #4
 80038cc:	6713      	str	r3, [r2, #112]	; 0x70
 80038ce:	4b5c      	ldr	r3, [pc, #368]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d2:	4a5b      	ldr	r2, [pc, #364]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	6713      	str	r3, [r2, #112]	; 0x70
 80038da:	e00b      	b.n	80038f4 <HAL_RCC_OscConfig+0x324>
 80038dc:	4b58      	ldr	r3, [pc, #352]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	4a57      	ldr	r2, [pc, #348]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	6713      	str	r3, [r2, #112]	; 0x70
 80038e8:	4b55      	ldr	r3, [pc, #340]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ec:	4a54      	ldr	r2, [pc, #336]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038ee:	f023 0304 	bic.w	r3, r3, #4
 80038f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d015      	beq.n	8003928 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fc:	f7fe fee6 	bl	80026cc <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003902:	e00a      	b.n	800391a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003904:	f7fe fee2 	bl	80026cc <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e0cb      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391a:	4b49      	ldr	r3, [pc, #292]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0ee      	beq.n	8003904 <HAL_RCC_OscConfig+0x334>
 8003926:	e014      	b.n	8003952 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003928:	f7fe fed0 	bl	80026cc <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800392e:	e00a      	b.n	8003946 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003930:	f7fe fecc 	bl	80026cc <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e0b5      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003946:	4b3e      	ldr	r3, [pc, #248]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1ee      	bne.n	8003930 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003952:	7dfb      	ldrb	r3, [r7, #23]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d105      	bne.n	8003964 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003958:	4b39      	ldr	r3, [pc, #228]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	4a38      	ldr	r2, [pc, #224]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 800395e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003962:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80a1 	beq.w	8003ab0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800396e:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b08      	cmp	r3, #8
 8003978:	d05c      	beq.n	8003a34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d141      	bne.n	8003a06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003982:	4b31      	ldr	r3, [pc, #196]	; (8003a48 <HAL_RCC_OscConfig+0x478>)
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7fe fea0 	bl	80026cc <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003990:	f7fe fe9c 	bl	80026cc <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e087      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a2:	4b27      	ldr	r3, [pc, #156]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69da      	ldr	r2, [r3, #28]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	019b      	lsls	r3, r3, #6
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	085b      	lsrs	r3, r3, #1
 80039c6:	3b01      	subs	r3, #1
 80039c8:	041b      	lsls	r3, r3, #16
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	061b      	lsls	r3, r3, #24
 80039d2:	491b      	ldr	r1, [pc, #108]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d8:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <HAL_RCC_OscConfig+0x478>)
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039de:	f7fe fe75 	bl	80026cc <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e6:	f7fe fe71 	bl	80026cc <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e05c      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f8:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCC_OscConfig+0x416>
 8003a04:	e054      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a06:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <HAL_RCC_OscConfig+0x478>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fe fe5e 	bl	80026cc <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a14:	f7fe fe5a 	bl	80026cc <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e045      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a26:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x444>
 8003a32:	e03d      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d107      	bne.n	8003a4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e038      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
 8003a40:	40023800 	.word	0x40023800
 8003a44:	40007000 	.word	0x40007000
 8003a48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a4c:	4b1b      	ldr	r3, [pc, #108]	; (8003abc <HAL_RCC_OscConfig+0x4ec>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d028      	beq.n	8003aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d121      	bne.n	8003aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d11a      	bne.n	8003aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d111      	bne.n	8003aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	085b      	lsrs	r3, r3, #1
 8003a94:	3b01      	subs	r3, #1
 8003a96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d107      	bne.n	8003aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800

08003ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0cc      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad4:	4b68      	ldr	r3, [pc, #416]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d90c      	bls.n	8003afc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae2:	4b65      	ldr	r3, [pc, #404]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aea:	4b63      	ldr	r3, [pc, #396]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0b8      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d020      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b14:	4b59      	ldr	r3, [pc, #356]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	4a58      	ldr	r2, [pc, #352]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b2c:	4b53      	ldr	r3, [pc, #332]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	4a52      	ldr	r2, [pc, #328]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b38:	4b50      	ldr	r3, [pc, #320]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	494d      	ldr	r1, [pc, #308]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d044      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d107      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5e:	4b47      	ldr	r3, [pc, #284]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d119      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e07f      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d003      	beq.n	8003b7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d107      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7e:	4b3f      	ldr	r3, [pc, #252]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e06f      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8e:	4b3b      	ldr	r3, [pc, #236]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e067      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b9e:	4b37      	ldr	r3, [pc, #220]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 0203 	bic.w	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4934      	ldr	r1, [pc, #208]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb0:	f7fe fd8c 	bl	80026cc <HAL_GetTick>
 8003bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb8:	f7fe fd88 	bl	80026cc <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e04f      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bce:	4b2b      	ldr	r3, [pc, #172]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 020c 	and.w	r2, r3, #12
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d1eb      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003be0:	4b25      	ldr	r3, [pc, #148]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d20c      	bcs.n	8003c08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b22      	ldr	r3, [pc, #136]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf6:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d001      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e032      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c14:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4916      	ldr	r1, [pc, #88]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d009      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	490e      	ldr	r1, [pc, #56]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c46:	f000 f821 	bl	8003c8c <HAL_RCC_GetSysClockFreq>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	091b      	lsrs	r3, r3, #4
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	490a      	ldr	r1, [pc, #40]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003c58:	5ccb      	ldrb	r3, [r1, r3]
 8003c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5e:	4a09      	ldr	r2, [pc, #36]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c62:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <HAL_RCC_ClockConfig+0x1c8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe fcec 	bl	8002644 <HAL_InitTick>

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40023c00 	.word	0x40023c00
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	0800d6fc 	.word	0x0800d6fc
 8003c84:	20000000 	.word	0x20000000
 8003c88:	20000014 	.word	0x20000014

08003c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c90:	b090      	sub	sp, #64	; 0x40
 8003c92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	637b      	str	r3, [r7, #52]	; 0x34
 8003c98:	2300      	movs	r3, #0
 8003c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ca4:	4b59      	ldr	r3, [pc, #356]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 030c 	and.w	r3, r3, #12
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d00d      	beq.n	8003ccc <HAL_RCC_GetSysClockFreq+0x40>
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	f200 80a1 	bhi.w	8003df8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d003      	beq.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cbe:	e09b      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cc0:	4b53      	ldr	r3, [pc, #332]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cc2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003cc4:	e09b      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cc6:	4b53      	ldr	r3, [pc, #332]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cc8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cca:	e098      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ccc:	4b4f      	ldr	r3, [pc, #316]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cd4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cd6:	4b4d      	ldr	r3, [pc, #308]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d028      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce2:	4b4a      	ldr	r3, [pc, #296]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	099b      	lsrs	r3, r3, #6
 8003ce8:	2200      	movs	r2, #0
 8003cea:	623b      	str	r3, [r7, #32]
 8003cec:	627a      	str	r2, [r7, #36]	; 0x24
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4b47      	ldr	r3, [pc, #284]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cf8:	fb03 f201 	mul.w	r2, r3, r1
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	fb00 f303 	mul.w	r3, r0, r3
 8003d02:	4413      	add	r3, r2
 8003d04:	4a43      	ldr	r2, [pc, #268]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d06:	fba0 1202 	umull	r1, r2, r0, r2
 8003d0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d0c:	460a      	mov	r2, r1
 8003d0e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d12:	4413      	add	r3, r2
 8003d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d18:	2200      	movs	r2, #0
 8003d1a:	61bb      	str	r3, [r7, #24]
 8003d1c:	61fa      	str	r2, [r7, #28]
 8003d1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d26:	f7fc faab 	bl	8000280 <__aeabi_uldivmod>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4613      	mov	r3, r2
 8003d30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d32:	e053      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d34:	4b35      	ldr	r3, [pc, #212]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	099b      	lsrs	r3, r3, #6
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	617a      	str	r2, [r7, #20]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d46:	f04f 0b00 	mov.w	fp, #0
 8003d4a:	4652      	mov	r2, sl
 8003d4c:	465b      	mov	r3, fp
 8003d4e:	f04f 0000 	mov.w	r0, #0
 8003d52:	f04f 0100 	mov.w	r1, #0
 8003d56:	0159      	lsls	r1, r3, #5
 8003d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d5c:	0150      	lsls	r0, r2, #5
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	ebb2 080a 	subs.w	r8, r2, sl
 8003d66:	eb63 090b 	sbc.w	r9, r3, fp
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d7e:	ebb2 0408 	subs.w	r4, r2, r8
 8003d82:	eb63 0509 	sbc.w	r5, r3, r9
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	00eb      	lsls	r3, r5, #3
 8003d90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d94:	00e2      	lsls	r2, r4, #3
 8003d96:	4614      	mov	r4, r2
 8003d98:	461d      	mov	r5, r3
 8003d9a:	eb14 030a 	adds.w	r3, r4, sl
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	eb45 030b 	adc.w	r3, r5, fp
 8003da4:	607b      	str	r3, [r7, #4]
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003db2:	4629      	mov	r1, r5
 8003db4:	028b      	lsls	r3, r1, #10
 8003db6:	4621      	mov	r1, r4
 8003db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dbc:	4621      	mov	r1, r4
 8003dbe:	028a      	lsls	r2, r1, #10
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	60fa      	str	r2, [r7, #12]
 8003dcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dd0:	f7fc fa56 	bl	8000280 <__aeabi_uldivmod>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4613      	mov	r3, r2
 8003dda:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	0c1b      	lsrs	r3, r3, #16
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	3301      	adds	r3, #1
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003dec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003df6:	e002      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dfa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3740      	adds	r7, #64	; 0x40
 8003e04:	46bd      	mov	sp, r7
 8003e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	00f42400 	.word	0x00f42400
 8003e14:	017d7840 	.word	0x017d7840

08003e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e1c:	4b03      	ldr	r3, [pc, #12]	; (8003e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	20000000 	.word	0x20000000

08003e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e34:	f7ff fff0 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	0a9b      	lsrs	r3, r3, #10
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	4903      	ldr	r1, [pc, #12]	; (8003e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e46:	5ccb      	ldrb	r3, [r1, r3]
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40023800 	.word	0x40023800
 8003e54:	0800d70c 	.word	0x0800d70c

08003e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e5c:	f7ff ffdc 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e60:	4602      	mov	r2, r0
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	0b5b      	lsrs	r3, r3, #13
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	4903      	ldr	r1, [pc, #12]	; (8003e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e6e:	5ccb      	ldrb	r3, [r1, r3]
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	0800d70c 	.word	0x0800d70c

08003e80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e07b      	b.n	8003f8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d108      	bne.n	8003eac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea2:	d009      	beq.n	8003eb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	61da      	str	r2, [r3, #28]
 8003eaa:	e005      	b.n	8003eb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fc ffd4 	bl	8000e80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3c:	ea42 0103 	orr.w	r1, r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	0c1b      	lsrs	r3, r3, #16
 8003f56:	f003 0104 	and.w	r1, r3, #4
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	f003 0210 	and.w	r2, r3, #16
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b088      	sub	sp, #32
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	603b      	str	r3, [r7, #0]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_SPI_Transmit+0x22>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e126      	b.n	8004202 <HAL_SPI_Transmit+0x270>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fbc:	f7fe fb86 	bl	80026cc <HAL_GetTick>
 8003fc0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d002      	beq.n	8003fd8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fd6:	e10b      	b.n	80041f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_SPI_Transmit+0x52>
 8003fde:	88fb      	ldrh	r3, [r7, #6]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d102      	bne.n	8003fea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fe8:	e102      	b.n	80041f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2203      	movs	r2, #3
 8003fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	88fa      	ldrh	r2, [r7, #6]
 8004002:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	88fa      	ldrh	r2, [r7, #6]
 8004008:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004030:	d10f      	bne.n	8004052 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004040:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004050:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b40      	cmp	r3, #64	; 0x40
 800405e:	d007      	beq.n	8004070 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800406e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004078:	d14b      	bne.n	8004112 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <HAL_SPI_Transmit+0xf6>
 8004082:	8afb      	ldrh	r3, [r7, #22]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d13e      	bne.n	8004106 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	881a      	ldrh	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	1c9a      	adds	r2, r3, #2
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040ac:	e02b      	b.n	8004106 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d112      	bne.n	80040e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c0:	881a      	ldrh	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	1c9a      	adds	r2, r3, #2
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	86da      	strh	r2, [r3, #54]	; 0x36
 80040e0:	e011      	b.n	8004106 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040e2:	f7fe faf3 	bl	80026cc <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d803      	bhi.n	80040fa <HAL_SPI_Transmit+0x168>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040f8:	d102      	bne.n	8004100 <HAL_SPI_Transmit+0x16e>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d102      	bne.n	8004106 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004104:	e074      	b.n	80041f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1ce      	bne.n	80040ae <HAL_SPI_Transmit+0x11c>
 8004110:	e04c      	b.n	80041ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_SPI_Transmit+0x18e>
 800411a:	8afb      	ldrh	r3, [r7, #22]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d140      	bne.n	80041a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	330c      	adds	r3, #12
 800412a:	7812      	ldrb	r2, [r2, #0]
 800412c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004146:	e02c      	b.n	80041a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b02      	cmp	r3, #2
 8004154:	d113      	bne.n	800417e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	330c      	adds	r3, #12
 8004160:	7812      	ldrb	r2, [r2, #0]
 8004162:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	86da      	strh	r2, [r3, #54]	; 0x36
 800417c:	e011      	b.n	80041a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800417e:	f7fe faa5 	bl	80026cc <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d803      	bhi.n	8004196 <HAL_SPI_Transmit+0x204>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004194:	d102      	bne.n	800419c <HAL_SPI_Transmit+0x20a>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d102      	bne.n	80041a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041a0:	e026      	b.n	80041f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1cd      	bne.n	8004148 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	6839      	ldr	r1, [r7, #0]
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fa09 	bl	80045c8 <SPI_EndRxTxTransaction>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10a      	bne.n	80041e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041ca:	2300      	movs	r3, #0
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	77fb      	strb	r3, [r7, #31]
 80041ec:	e000      	b.n	80041f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80041ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004200:	7ffb      	ldrb	r3, [r7, #31]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3720      	adds	r7, #32
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	4613      	mov	r3, r2
 8004218:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_SPI_Transmit_DMA+0x20>
 8004228:	2302      	movs	r3, #2
 800422a:	e09b      	b.n	8004364 <HAL_SPI_Transmit_DMA+0x158>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	d002      	beq.n	8004246 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004240:	2302      	movs	r3, #2
 8004242:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004244:	e089      	b.n	800435a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <HAL_SPI_Transmit_DMA+0x46>
 800424c:	88fb      	ldrh	r3, [r7, #6]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d102      	bne.n	8004258 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004256:	e080      	b.n	800435a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2203      	movs	r2, #3
 800425c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	88fa      	ldrh	r2, [r7, #6]
 8004270:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	88fa      	ldrh	r2, [r7, #6]
 8004276:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800429e:	d10f      	bne.n	80042c0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c4:	4a29      	ldr	r2, [pc, #164]	; (800436c <HAL_SPI_Transmit_DMA+0x160>)
 80042c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042cc:	4a28      	ldr	r2, [pc, #160]	; (8004370 <HAL_SPI_Transmit_DMA+0x164>)
 80042ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d4:	4a27      	ldr	r2, [pc, #156]	; (8004374 <HAL_SPI_Transmit_DMA+0x168>)
 80042d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042dc:	2200      	movs	r2, #0
 80042de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	4619      	mov	r1, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	330c      	adds	r3, #12
 80042f0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80042f8:	f7fe fbd8 	bl	8002aac <HAL_DMA_Start_IT>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00c      	beq.n	800431c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004306:	f043 0210 	orr.w	r2, r3, #16
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800431a:	e01e      	b.n	800435a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004326:	2b40      	cmp	r3, #64	; 0x40
 8004328:	d007      	beq.n	800433a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004338:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0220 	orr.w	r2, r2, #32
 8004348:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0202 	orr.w	r2, r2, #2
 8004358:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004362:	7dfb      	ldrb	r3, [r7, #23]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	0800445d 	.word	0x0800445d
 8004370:	080043b5 	.word	0x080043b5
 8004374:	08004479 	.word	0x08004479

08004378 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043c2:	f7fe f983 	bl	80026cc <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d6:	d03b      	beq.n	8004450 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0220 	bic.w	r2, r2, #32
 80043e6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0202 	bic.w	r2, r2, #2
 80043f6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	2164      	movs	r1, #100	; 0x64
 80043fc:	6978      	ldr	r0, [r7, #20]
 80043fe:	f000 f8e3 	bl	80045c8 <SPI_EndRxTxTransaction>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440c:	f043 0220 	orr.w	r2, r3, #32
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10a      	bne.n	8004432 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800441c:	2300      	movs	r3, #0
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2200      	movs	r2, #0
 8004436:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004448:	6978      	ldr	r0, [r7, #20]
 800444a:	f7ff ffa9 	bl	80043a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800444e:	e002      	b.n	8004456 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004450:	6978      	ldr	r0, [r7, #20]
 8004452:	f7ff ff91 	bl	8004378 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f7ff ff8e 	bl	800438c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004470:	bf00      	nop
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0203 	bic.w	r2, r2, #3
 8004494:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449a:	f043 0210 	orr.w	r2, r3, #16
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f7ff ff78 	bl	80043a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044b0:	bf00      	nop
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044c8:	f7fe f900 	bl	80026cc <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	4413      	add	r3, r2
 80044d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044d8:	f7fe f8f8 	bl	80026cc <HAL_GetTick>
 80044dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044de:	4b39      	ldr	r3, [pc, #228]	; (80045c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	015b      	lsls	r3, r3, #5
 80044e4:	0d1b      	lsrs	r3, r3, #20
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	fb02 f303 	mul.w	r3, r2, r3
 80044ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044ee:	e054      	b.n	800459a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044f6:	d050      	beq.n	800459a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044f8:	f7fe f8e8 	bl	80026cc <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	429a      	cmp	r2, r3
 8004506:	d902      	bls.n	800450e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d13d      	bne.n	800458a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800451c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004526:	d111      	bne.n	800454c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004530:	d004      	beq.n	800453c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800453a:	d107      	bne.n	800454c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800454a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004554:	d10f      	bne.n	8004576 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004574:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e017      	b.n	80045ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	3b01      	subs	r3, #1
 8004598:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4013      	ands	r3, r2
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	bf0c      	ite	eq
 80045aa:	2301      	moveq	r3, #1
 80045ac:	2300      	movne	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d19b      	bne.n	80044f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3720      	adds	r7, #32
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000000 	.word	0x20000000

080045c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80045d4:	4b1b      	ldr	r3, [pc, #108]	; (8004644 <SPI_EndRxTxTransaction+0x7c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a1b      	ldr	r2, [pc, #108]	; (8004648 <SPI_EndRxTxTransaction+0x80>)
 80045da:	fba2 2303 	umull	r2, r3, r2, r3
 80045de:	0d5b      	lsrs	r3, r3, #21
 80045e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045e4:	fb02 f303 	mul.w	r3, r2, r3
 80045e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045f2:	d112      	bne.n	800461a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2200      	movs	r2, #0
 80045fc:	2180      	movs	r1, #128	; 0x80
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f7ff ff5a 	bl	80044b8 <SPI_WaitFlagStateUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d016      	beq.n	8004638 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460e:	f043 0220 	orr.w	r2, r3, #32
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e00f      	b.n	800463a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00a      	beq.n	8004636 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	3b01      	subs	r3, #1
 8004624:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004630:	2b80      	cmp	r3, #128	; 0x80
 8004632:	d0f2      	beq.n	800461a <SPI_EndRxTxTransaction+0x52>
 8004634:	e000      	b.n	8004638 <SPI_EndRxTxTransaction+0x70>
        break;
 8004636:	bf00      	nop
  }

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20000000 	.word	0x20000000
 8004648:	165e9f81 	.word	0x165e9f81

0800464c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e097      	b.n	8004790 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d106      	bne.n	800467a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7fc fc7d 	bl	8000f74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2202      	movs	r2, #2
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004690:	f023 0307 	bic.w	r3, r3, #7
 8004694:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3304      	adds	r3, #4
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f000 f879 	bl	8004798 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ce:	f023 0303 	bic.w	r3, r3, #3
 80046d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	021b      	lsls	r3, r3, #8
 80046de:	4313      	orrs	r3, r2
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80046ec:	f023 030c 	bic.w	r3, r3, #12
 80046f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	4313      	orrs	r3, r2
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	011a      	lsls	r2, r3, #4
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	031b      	lsls	r3, r3, #12
 800471c:	4313      	orrs	r3, r2
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800472a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004732:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	4313      	orrs	r3, r2
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a34      	ldr	r2, [pc, #208]	; (800487c <TIM_Base_SetConfig+0xe4>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d00f      	beq.n	80047d0 <TIM_Base_SetConfig+0x38>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b6:	d00b      	beq.n	80047d0 <TIM_Base_SetConfig+0x38>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a31      	ldr	r2, [pc, #196]	; (8004880 <TIM_Base_SetConfig+0xe8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d007      	beq.n	80047d0 <TIM_Base_SetConfig+0x38>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a30      	ldr	r2, [pc, #192]	; (8004884 <TIM_Base_SetConfig+0xec>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d003      	beq.n	80047d0 <TIM_Base_SetConfig+0x38>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a2f      	ldr	r2, [pc, #188]	; (8004888 <TIM_Base_SetConfig+0xf0>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d108      	bne.n	80047e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a25      	ldr	r2, [pc, #148]	; (800487c <TIM_Base_SetConfig+0xe4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d01b      	beq.n	8004822 <TIM_Base_SetConfig+0x8a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f0:	d017      	beq.n	8004822 <TIM_Base_SetConfig+0x8a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a22      	ldr	r2, [pc, #136]	; (8004880 <TIM_Base_SetConfig+0xe8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d013      	beq.n	8004822 <TIM_Base_SetConfig+0x8a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a21      	ldr	r2, [pc, #132]	; (8004884 <TIM_Base_SetConfig+0xec>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00f      	beq.n	8004822 <TIM_Base_SetConfig+0x8a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a20      	ldr	r2, [pc, #128]	; (8004888 <TIM_Base_SetConfig+0xf0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00b      	beq.n	8004822 <TIM_Base_SetConfig+0x8a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a1f      	ldr	r2, [pc, #124]	; (800488c <TIM_Base_SetConfig+0xf4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d007      	beq.n	8004822 <TIM_Base_SetConfig+0x8a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a1e      	ldr	r2, [pc, #120]	; (8004890 <TIM_Base_SetConfig+0xf8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d003      	beq.n	8004822 <TIM_Base_SetConfig+0x8a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a1d      	ldr	r2, [pc, #116]	; (8004894 <TIM_Base_SetConfig+0xfc>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d108      	bne.n	8004834 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a08      	ldr	r2, [pc, #32]	; (800487c <TIM_Base_SetConfig+0xe4>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d103      	bne.n	8004868 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	615a      	str	r2, [r3, #20]
}
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40010000 	.word	0x40010000
 8004880:	40000400 	.word	0x40000400
 8004884:	40000800 	.word	0x40000800
 8004888:	40000c00 	.word	0x40000c00
 800488c:	40014000 	.word	0x40014000
 8004890:	40014400 	.word	0x40014400
 8004894:	40014800 	.word	0x40014800

08004898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e050      	b.n	8004952 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a1c      	ldr	r2, [pc, #112]	; (8004960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d018      	beq.n	8004926 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fc:	d013      	beq.n	8004926 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a18      	ldr	r2, [pc, #96]	; (8004964 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00e      	beq.n	8004926 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a16      	ldr	r2, [pc, #88]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d009      	beq.n	8004926 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a15      	ldr	r2, [pc, #84]	; (800496c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d004      	beq.n	8004926 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a13      	ldr	r2, [pc, #76]	; (8004970 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d10c      	bne.n	8004940 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800492c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	4313      	orrs	r3, r2
 8004936:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40010000 	.word	0x40010000
 8004964:	40000400 	.word	0x40000400
 8004968:	40000800 	.word	0x40000800
 800496c:	40000c00 	.word	0x40000c00
 8004970:	40014000 	.word	0x40014000

08004974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e03f      	b.n	8004a06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7fc fb32 	bl	8001004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2224      	movs	r2, #36	; 0x24
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fc7b 	bl	80052b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695a      	ldr	r2, [r3, #20]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b0ba      	sub	sp, #232	; 0xe8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10f      	bne.n	8004a76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5a:	f003 0320 	and.w	r3, r3, #32
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d009      	beq.n	8004a76 <HAL_UART_IRQHandler+0x66>
 8004a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fb65 	bl	800513e <UART_Receive_IT>
      return;
 8004a74:	e256      	b.n	8004f24 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 80de 	beq.w	8004c3c <HAL_UART_IRQHandler+0x22c>
 8004a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d106      	bne.n	8004a9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 80d1 	beq.w	8004c3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00b      	beq.n	8004abe <HAL_UART_IRQHandler+0xae>
 8004aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	f043 0201 	orr.w	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00b      	beq.n	8004ae2 <HAL_UART_IRQHandler+0xd2>
 8004aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d005      	beq.n	8004ae2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f043 0202 	orr.w	r2, r3, #2
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00b      	beq.n	8004b06 <HAL_UART_IRQHandler+0xf6>
 8004aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d005      	beq.n	8004b06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	f043 0204 	orr.w	r2, r3, #4
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d011      	beq.n	8004b36 <HAL_UART_IRQHandler+0x126>
 8004b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d105      	bne.n	8004b2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d005      	beq.n	8004b36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	f043 0208 	orr.w	r2, r3, #8
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 81ed 	beq.w	8004f1a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d008      	beq.n	8004b5e <HAL_UART_IRQHandler+0x14e>
 8004b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 faf0 	bl	800513e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b68:	2b40      	cmp	r3, #64	; 0x40
 8004b6a:	bf0c      	ite	eq
 8004b6c:	2301      	moveq	r3, #1
 8004b6e:	2300      	movne	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d103      	bne.n	8004b8a <HAL_UART_IRQHandler+0x17a>
 8004b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d04f      	beq.n	8004c2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f9f8 	bl	8004f80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9a:	2b40      	cmp	r3, #64	; 0x40
 8004b9c:	d141      	bne.n	8004c22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3314      	adds	r3, #20
 8004ba4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3314      	adds	r3, #20
 8004bc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004be2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1d9      	bne.n	8004b9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d013      	beq.n	8004c1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf6:	4a7d      	ldr	r2, [pc, #500]	; (8004dec <HAL_UART_IRQHandler+0x3dc>)
 8004bf8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fe f81c 	bl	8002c3c <HAL_DMA_Abort_IT>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d016      	beq.n	8004c38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c14:	4610      	mov	r0, r2
 8004c16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c18:	e00e      	b.n	8004c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f99a 	bl	8004f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c20:	e00a      	b.n	8004c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f996 	bl	8004f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c28:	e006      	b.n	8004c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f992 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c36:	e170      	b.n	8004f1a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c38:	bf00      	nop
    return;
 8004c3a:	e16e      	b.n	8004f1a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	f040 814a 	bne.w	8004eda <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c4a:	f003 0310 	and.w	r3, r3, #16
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 8143 	beq.w	8004eda <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c58:	f003 0310 	and.w	r3, r3, #16
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 813c 	beq.w	8004eda <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c62:	2300      	movs	r3, #0
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60bb      	str	r3, [r7, #8]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	60bb      	str	r3, [r7, #8]
 8004c76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c82:	2b40      	cmp	r3, #64	; 0x40
 8004c84:	f040 80b4 	bne.w	8004df0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8140 	beq.w	8004f1e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	f080 8139 	bcs.w	8004f1e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cb2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cbe:	f000 8088 	beq.w	8004dd2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cd0:	e853 3f00 	ldrex	r3, [r3]
 8004cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004cee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1d9      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3314      	adds	r3, #20
 8004d14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d18:	e853 3f00 	ldrex	r3, [r3]
 8004d1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d20:	f023 0301 	bic.w	r3, r3, #1
 8004d24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3314      	adds	r3, #20
 8004d2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e1      	bne.n	8004d0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3314      	adds	r3, #20
 8004d50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d54:	e853 3f00 	ldrex	r3, [r3]
 8004d58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3314      	adds	r3, #20
 8004d6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e3      	bne.n	8004d4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	330c      	adds	r3, #12
 8004d96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9a:	e853 3f00 	ldrex	r3, [r3]
 8004d9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da2:	f023 0310 	bic.w	r3, r3, #16
 8004da6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	330c      	adds	r3, #12
 8004db0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004db4:	65ba      	str	r2, [r7, #88]	; 0x58
 8004db6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dbc:	e841 2300 	strex	r3, r2, [r1]
 8004dc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e3      	bne.n	8004d90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fd fec5 	bl	8002b5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	4619      	mov	r1, r3
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f8c0 	bl	8004f68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004de8:	e099      	b.n	8004f1e <HAL_UART_IRQHandler+0x50e>
 8004dea:	bf00      	nop
 8004dec:	08005047 	.word	0x08005047
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 808b 	beq.w	8004f22 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 8086 	beq.w	8004f22 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	330c      	adds	r3, #12
 8004e1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	330c      	adds	r3, #12
 8004e36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e3a:	647a      	str	r2, [r7, #68]	; 0x44
 8004e3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e42:	e841 2300 	strex	r3, r2, [r1]
 8004e46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1e3      	bne.n	8004e16 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3314      	adds	r3, #20
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	623b      	str	r3, [r7, #32]
   return(result);
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3314      	adds	r3, #20
 8004e6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e72:	633a      	str	r2, [r7, #48]	; 0x30
 8004e74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e3      	bne.n	8004e4e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	330c      	adds	r3, #12
 8004e9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0310 	bic.w	r3, r3, #16
 8004eaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	330c      	adds	r3, #12
 8004eb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004eb8:	61fa      	str	r2, [r7, #28]
 8004eba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	69b9      	ldr	r1, [r7, #24]
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e3      	bne.n	8004e94 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ecc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f848 	bl	8004f68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ed8:	e023      	b.n	8004f22 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d009      	beq.n	8004efa <HAL_UART_IRQHandler+0x4ea>
 8004ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f8bb 	bl	800506e <UART_Transmit_IT>
    return;
 8004ef8:	e014      	b.n	8004f24 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00e      	beq.n	8004f24 <HAL_UART_IRQHandler+0x514>
 8004f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d008      	beq.n	8004f24 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f8fb 	bl	800510e <UART_EndTransmit_IT>
    return;
 8004f18:	e004      	b.n	8004f24 <HAL_UART_IRQHandler+0x514>
    return;
 8004f1a:	bf00      	nop
 8004f1c:	e002      	b.n	8004f24 <HAL_UART_IRQHandler+0x514>
      return;
 8004f1e:	bf00      	nop
 8004f20:	e000      	b.n	8004f24 <HAL_UART_IRQHandler+0x514>
      return;
 8004f22:	bf00      	nop
  }
}
 8004f24:	37e8      	adds	r7, #232	; 0xe8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop

08004f2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b095      	sub	sp, #84	; 0x54
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	330c      	adds	r3, #12
 8004f8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f92:	e853 3f00 	ldrex	r3, [r3]
 8004f96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fa8:	643a      	str	r2, [r7, #64]	; 0x40
 8004faa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e5      	bne.n	8004f88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3314      	adds	r3, #20
 8004fc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	e853 3f00 	ldrex	r3, [r3]
 8004fca:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f023 0301 	bic.w	r3, r3, #1
 8004fd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3314      	adds	r3, #20
 8004fda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fe4:	e841 2300 	strex	r3, r2, [r1]
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e5      	bne.n	8004fbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d119      	bne.n	800502c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	330c      	adds	r3, #12
 8004ffe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	e853 3f00 	ldrex	r3, [r3]
 8005006:	60bb      	str	r3, [r7, #8]
   return(result);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f023 0310 	bic.w	r3, r3, #16
 800500e:	647b      	str	r3, [r7, #68]	; 0x44
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	330c      	adds	r3, #12
 8005016:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005018:	61ba      	str	r2, [r7, #24]
 800501a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501c:	6979      	ldr	r1, [r7, #20]
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	e841 2300 	strex	r3, r2, [r1]
 8005024:	613b      	str	r3, [r7, #16]
   return(result);
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1e5      	bne.n	8004ff8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	631a      	str	r2, [r3, #48]	; 0x30
}
 800503a:	bf00      	nop
 800503c:	3754      	adds	r7, #84	; 0x54
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f7ff ff77 	bl	8004f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005066:	bf00      	nop
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800506e:	b480      	push	{r7}
 8005070:	b085      	sub	sp, #20
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b21      	cmp	r3, #33	; 0x21
 8005080:	d13e      	bne.n	8005100 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800508a:	d114      	bne.n	80050b6 <UART_Transmit_IT+0x48>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d110      	bne.n	80050b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	461a      	mov	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	1c9a      	adds	r2, r3, #2
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	621a      	str	r2, [r3, #32]
 80050b4:	e008      	b.n	80050c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	1c59      	adds	r1, r3, #1
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6211      	str	r1, [r2, #32]
 80050c0:	781a      	ldrb	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	4619      	mov	r1, r3
 80050d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10f      	bne.n	80050fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050fc:	2300      	movs	r3, #0
 80050fe:	e000      	b.n	8005102 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005100:	2302      	movs	r3, #2
  }
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b082      	sub	sp, #8
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005124:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2220      	movs	r2, #32
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7ff fefc 	bl	8004f2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b08c      	sub	sp, #48	; 0x30
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b22      	cmp	r3, #34	; 0x22
 8005150:	f040 80ab 	bne.w	80052aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515c:	d117      	bne.n	800518e <UART_Receive_IT+0x50>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d113      	bne.n	800518e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005166:	2300      	movs	r3, #0
 8005168:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	b29b      	uxth	r3, r3
 8005178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517c:	b29a      	uxth	r2, r3
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005186:	1c9a      	adds	r2, r3, #2
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	629a      	str	r2, [r3, #40]	; 0x28
 800518c:	e026      	b.n	80051dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005194:	2300      	movs	r3, #0
 8005196:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a0:	d007      	beq.n	80051b2 <UART_Receive_IT+0x74>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10a      	bne.n	80051c0 <UART_Receive_IT+0x82>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	e008      	b.n	80051d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	4619      	mov	r1, r3
 80051ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d15a      	bne.n	80052a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0220 	bic.w	r2, r2, #32
 80051fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800520e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695a      	ldr	r2, [r3, #20]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0201 	bic.w	r2, r2, #1
 800521e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522c:	2b01      	cmp	r3, #1
 800522e:	d135      	bne.n	800529c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	330c      	adds	r3, #12
 800523c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	613b      	str	r3, [r7, #16]
   return(result);
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f023 0310 	bic.w	r3, r3, #16
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	330c      	adds	r3, #12
 8005254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005256:	623a      	str	r2, [r7, #32]
 8005258:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	69f9      	ldr	r1, [r7, #28]
 800525c:	6a3a      	ldr	r2, [r7, #32]
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	61bb      	str	r3, [r7, #24]
   return(result);
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e5      	bne.n	8005236 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0310 	and.w	r3, r3, #16
 8005274:	2b10      	cmp	r3, #16
 8005276:	d10a      	bne.n	800528e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005278:	2300      	movs	r3, #0
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005292:	4619      	mov	r1, r3
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff fe67 	bl	8004f68 <HAL_UARTEx_RxEventCallback>
 800529a:	e002      	b.n	80052a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7ff fe4f 	bl	8004f40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	e002      	b.n	80052ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	e000      	b.n	80052ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80052aa:	2302      	movs	r3, #2
  }
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3730      	adds	r7, #48	; 0x30
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052b8:	b0c0      	sub	sp, #256	; 0x100
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80052cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d0:	68d9      	ldr	r1, [r3, #12]
 80052d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	ea40 0301 	orr.w	r3, r0, r1
 80052dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	431a      	orrs	r2, r3
 80052ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	431a      	orrs	r2, r3
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800530c:	f021 010c 	bic.w	r1, r1, #12
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800531a:	430b      	orrs	r3, r1
 800531c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800531e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800532a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532e:	6999      	ldr	r1, [r3, #24]
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	ea40 0301 	orr.w	r3, r0, r1
 800533a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	4b8f      	ldr	r3, [pc, #572]	; (8005580 <UART_SetConfig+0x2cc>)
 8005344:	429a      	cmp	r2, r3
 8005346:	d005      	beq.n	8005354 <UART_SetConfig+0xa0>
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	4b8d      	ldr	r3, [pc, #564]	; (8005584 <UART_SetConfig+0x2d0>)
 8005350:	429a      	cmp	r2, r3
 8005352:	d104      	bne.n	800535e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005354:	f7fe fd80 	bl	8003e58 <HAL_RCC_GetPCLK2Freq>
 8005358:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800535c:	e003      	b.n	8005366 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800535e:	f7fe fd67 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
 8005362:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005370:	f040 810c 	bne.w	800558c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005378:	2200      	movs	r2, #0
 800537a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800537e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005382:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005386:	4622      	mov	r2, r4
 8005388:	462b      	mov	r3, r5
 800538a:	1891      	adds	r1, r2, r2
 800538c:	65b9      	str	r1, [r7, #88]	; 0x58
 800538e:	415b      	adcs	r3, r3
 8005390:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005392:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005396:	4621      	mov	r1, r4
 8005398:	eb12 0801 	adds.w	r8, r2, r1
 800539c:	4629      	mov	r1, r5
 800539e:	eb43 0901 	adc.w	r9, r3, r1
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	f04f 0300 	mov.w	r3, #0
 80053aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053b6:	4690      	mov	r8, r2
 80053b8:	4699      	mov	r9, r3
 80053ba:	4623      	mov	r3, r4
 80053bc:	eb18 0303 	adds.w	r3, r8, r3
 80053c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053c4:	462b      	mov	r3, r5
 80053c6:	eb49 0303 	adc.w	r3, r9, r3
 80053ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80053de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80053e2:	460b      	mov	r3, r1
 80053e4:	18db      	adds	r3, r3, r3
 80053e6:	653b      	str	r3, [r7, #80]	; 0x50
 80053e8:	4613      	mov	r3, r2
 80053ea:	eb42 0303 	adc.w	r3, r2, r3
 80053ee:	657b      	str	r3, [r7, #84]	; 0x54
 80053f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80053f8:	f7fa ff42 	bl	8000280 <__aeabi_uldivmod>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4b61      	ldr	r3, [pc, #388]	; (8005588 <UART_SetConfig+0x2d4>)
 8005402:	fba3 2302 	umull	r2, r3, r3, r2
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	011c      	lsls	r4, r3, #4
 800540a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800540e:	2200      	movs	r2, #0
 8005410:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005414:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005418:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800541c:	4642      	mov	r2, r8
 800541e:	464b      	mov	r3, r9
 8005420:	1891      	adds	r1, r2, r2
 8005422:	64b9      	str	r1, [r7, #72]	; 0x48
 8005424:	415b      	adcs	r3, r3
 8005426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005428:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800542c:	4641      	mov	r1, r8
 800542e:	eb12 0a01 	adds.w	sl, r2, r1
 8005432:	4649      	mov	r1, r9
 8005434:	eb43 0b01 	adc.w	fp, r3, r1
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005444:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005448:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800544c:	4692      	mov	sl, r2
 800544e:	469b      	mov	fp, r3
 8005450:	4643      	mov	r3, r8
 8005452:	eb1a 0303 	adds.w	r3, sl, r3
 8005456:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800545a:	464b      	mov	r3, r9
 800545c:	eb4b 0303 	adc.w	r3, fp, r3
 8005460:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005470:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005474:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005478:	460b      	mov	r3, r1
 800547a:	18db      	adds	r3, r3, r3
 800547c:	643b      	str	r3, [r7, #64]	; 0x40
 800547e:	4613      	mov	r3, r2
 8005480:	eb42 0303 	adc.w	r3, r2, r3
 8005484:	647b      	str	r3, [r7, #68]	; 0x44
 8005486:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800548a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800548e:	f7fa fef7 	bl	8000280 <__aeabi_uldivmod>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4611      	mov	r1, r2
 8005498:	4b3b      	ldr	r3, [pc, #236]	; (8005588 <UART_SetConfig+0x2d4>)
 800549a:	fba3 2301 	umull	r2, r3, r3, r1
 800549e:	095b      	lsrs	r3, r3, #5
 80054a0:	2264      	movs	r2, #100	; 0x64
 80054a2:	fb02 f303 	mul.w	r3, r2, r3
 80054a6:	1acb      	subs	r3, r1, r3
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80054ae:	4b36      	ldr	r3, [pc, #216]	; (8005588 <UART_SetConfig+0x2d4>)
 80054b0:	fba3 2302 	umull	r2, r3, r3, r2
 80054b4:	095b      	lsrs	r3, r3, #5
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054bc:	441c      	add	r4, r3
 80054be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80054cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80054d0:	4642      	mov	r2, r8
 80054d2:	464b      	mov	r3, r9
 80054d4:	1891      	adds	r1, r2, r2
 80054d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80054d8:	415b      	adcs	r3, r3
 80054da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054e0:	4641      	mov	r1, r8
 80054e2:	1851      	adds	r1, r2, r1
 80054e4:	6339      	str	r1, [r7, #48]	; 0x30
 80054e6:	4649      	mov	r1, r9
 80054e8:	414b      	adcs	r3, r1
 80054ea:	637b      	str	r3, [r7, #52]	; 0x34
 80054ec:	f04f 0200 	mov.w	r2, #0
 80054f0:	f04f 0300 	mov.w	r3, #0
 80054f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80054f8:	4659      	mov	r1, fp
 80054fa:	00cb      	lsls	r3, r1, #3
 80054fc:	4651      	mov	r1, sl
 80054fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005502:	4651      	mov	r1, sl
 8005504:	00ca      	lsls	r2, r1, #3
 8005506:	4610      	mov	r0, r2
 8005508:	4619      	mov	r1, r3
 800550a:	4603      	mov	r3, r0
 800550c:	4642      	mov	r2, r8
 800550e:	189b      	adds	r3, r3, r2
 8005510:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005514:	464b      	mov	r3, r9
 8005516:	460a      	mov	r2, r1
 8005518:	eb42 0303 	adc.w	r3, r2, r3
 800551c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800552c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005530:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005534:	460b      	mov	r3, r1
 8005536:	18db      	adds	r3, r3, r3
 8005538:	62bb      	str	r3, [r7, #40]	; 0x28
 800553a:	4613      	mov	r3, r2
 800553c:	eb42 0303 	adc.w	r3, r2, r3
 8005540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005542:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005546:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800554a:	f7fa fe99 	bl	8000280 <__aeabi_uldivmod>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	4b0d      	ldr	r3, [pc, #52]	; (8005588 <UART_SetConfig+0x2d4>)
 8005554:	fba3 1302 	umull	r1, r3, r3, r2
 8005558:	095b      	lsrs	r3, r3, #5
 800555a:	2164      	movs	r1, #100	; 0x64
 800555c:	fb01 f303 	mul.w	r3, r1, r3
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	3332      	adds	r3, #50	; 0x32
 8005566:	4a08      	ldr	r2, [pc, #32]	; (8005588 <UART_SetConfig+0x2d4>)
 8005568:	fba2 2303 	umull	r2, r3, r2, r3
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	f003 0207 	and.w	r2, r3, #7
 8005572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4422      	add	r2, r4
 800557a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800557c:	e105      	b.n	800578a <UART_SetConfig+0x4d6>
 800557e:	bf00      	nop
 8005580:	40011000 	.word	0x40011000
 8005584:	40011400 	.word	0x40011400
 8005588:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800558c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005590:	2200      	movs	r2, #0
 8005592:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005596:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800559a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800559e:	4642      	mov	r2, r8
 80055a0:	464b      	mov	r3, r9
 80055a2:	1891      	adds	r1, r2, r2
 80055a4:	6239      	str	r1, [r7, #32]
 80055a6:	415b      	adcs	r3, r3
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
 80055aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055ae:	4641      	mov	r1, r8
 80055b0:	1854      	adds	r4, r2, r1
 80055b2:	4649      	mov	r1, r9
 80055b4:	eb43 0501 	adc.w	r5, r3, r1
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	00eb      	lsls	r3, r5, #3
 80055c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055c6:	00e2      	lsls	r2, r4, #3
 80055c8:	4614      	mov	r4, r2
 80055ca:	461d      	mov	r5, r3
 80055cc:	4643      	mov	r3, r8
 80055ce:	18e3      	adds	r3, r4, r3
 80055d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055d4:	464b      	mov	r3, r9
 80055d6:	eb45 0303 	adc.w	r3, r5, r3
 80055da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055ee:	f04f 0200 	mov.w	r2, #0
 80055f2:	f04f 0300 	mov.w	r3, #0
 80055f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80055fa:	4629      	mov	r1, r5
 80055fc:	008b      	lsls	r3, r1, #2
 80055fe:	4621      	mov	r1, r4
 8005600:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005604:	4621      	mov	r1, r4
 8005606:	008a      	lsls	r2, r1, #2
 8005608:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800560c:	f7fa fe38 	bl	8000280 <__aeabi_uldivmod>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4b60      	ldr	r3, [pc, #384]	; (8005798 <UART_SetConfig+0x4e4>)
 8005616:	fba3 2302 	umull	r2, r3, r3, r2
 800561a:	095b      	lsrs	r3, r3, #5
 800561c:	011c      	lsls	r4, r3, #4
 800561e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005622:	2200      	movs	r2, #0
 8005624:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005628:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800562c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005630:	4642      	mov	r2, r8
 8005632:	464b      	mov	r3, r9
 8005634:	1891      	adds	r1, r2, r2
 8005636:	61b9      	str	r1, [r7, #24]
 8005638:	415b      	adcs	r3, r3
 800563a:	61fb      	str	r3, [r7, #28]
 800563c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005640:	4641      	mov	r1, r8
 8005642:	1851      	adds	r1, r2, r1
 8005644:	6139      	str	r1, [r7, #16]
 8005646:	4649      	mov	r1, r9
 8005648:	414b      	adcs	r3, r1
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	f04f 0300 	mov.w	r3, #0
 8005654:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005658:	4659      	mov	r1, fp
 800565a:	00cb      	lsls	r3, r1, #3
 800565c:	4651      	mov	r1, sl
 800565e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005662:	4651      	mov	r1, sl
 8005664:	00ca      	lsls	r2, r1, #3
 8005666:	4610      	mov	r0, r2
 8005668:	4619      	mov	r1, r3
 800566a:	4603      	mov	r3, r0
 800566c:	4642      	mov	r2, r8
 800566e:	189b      	adds	r3, r3, r2
 8005670:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005674:	464b      	mov	r3, r9
 8005676:	460a      	mov	r2, r1
 8005678:	eb42 0303 	adc.w	r3, r2, r3
 800567c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	67bb      	str	r3, [r7, #120]	; 0x78
 800568a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005698:	4649      	mov	r1, r9
 800569a:	008b      	lsls	r3, r1, #2
 800569c:	4641      	mov	r1, r8
 800569e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056a2:	4641      	mov	r1, r8
 80056a4:	008a      	lsls	r2, r1, #2
 80056a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80056aa:	f7fa fde9 	bl	8000280 <__aeabi_uldivmod>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	4b39      	ldr	r3, [pc, #228]	; (8005798 <UART_SetConfig+0x4e4>)
 80056b4:	fba3 1302 	umull	r1, r3, r3, r2
 80056b8:	095b      	lsrs	r3, r3, #5
 80056ba:	2164      	movs	r1, #100	; 0x64
 80056bc:	fb01 f303 	mul.w	r3, r1, r3
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	3332      	adds	r3, #50	; 0x32
 80056c6:	4a34      	ldr	r2, [pc, #208]	; (8005798 <UART_SetConfig+0x4e4>)
 80056c8:	fba2 2303 	umull	r2, r3, r2, r3
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056d2:	441c      	add	r4, r3
 80056d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056d8:	2200      	movs	r2, #0
 80056da:	673b      	str	r3, [r7, #112]	; 0x70
 80056dc:	677a      	str	r2, [r7, #116]	; 0x74
 80056de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80056e2:	4642      	mov	r2, r8
 80056e4:	464b      	mov	r3, r9
 80056e6:	1891      	adds	r1, r2, r2
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	415b      	adcs	r3, r3
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056f2:	4641      	mov	r1, r8
 80056f4:	1851      	adds	r1, r2, r1
 80056f6:	6039      	str	r1, [r7, #0]
 80056f8:	4649      	mov	r1, r9
 80056fa:	414b      	adcs	r3, r1
 80056fc:	607b      	str	r3, [r7, #4]
 80056fe:	f04f 0200 	mov.w	r2, #0
 8005702:	f04f 0300 	mov.w	r3, #0
 8005706:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800570a:	4659      	mov	r1, fp
 800570c:	00cb      	lsls	r3, r1, #3
 800570e:	4651      	mov	r1, sl
 8005710:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005714:	4651      	mov	r1, sl
 8005716:	00ca      	lsls	r2, r1, #3
 8005718:	4610      	mov	r0, r2
 800571a:	4619      	mov	r1, r3
 800571c:	4603      	mov	r3, r0
 800571e:	4642      	mov	r2, r8
 8005720:	189b      	adds	r3, r3, r2
 8005722:	66bb      	str	r3, [r7, #104]	; 0x68
 8005724:	464b      	mov	r3, r9
 8005726:	460a      	mov	r2, r1
 8005728:	eb42 0303 	adc.w	r3, r2, r3
 800572c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800572e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	663b      	str	r3, [r7, #96]	; 0x60
 8005738:	667a      	str	r2, [r7, #100]	; 0x64
 800573a:	f04f 0200 	mov.w	r2, #0
 800573e:	f04f 0300 	mov.w	r3, #0
 8005742:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005746:	4649      	mov	r1, r9
 8005748:	008b      	lsls	r3, r1, #2
 800574a:	4641      	mov	r1, r8
 800574c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005750:	4641      	mov	r1, r8
 8005752:	008a      	lsls	r2, r1, #2
 8005754:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005758:	f7fa fd92 	bl	8000280 <__aeabi_uldivmod>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <UART_SetConfig+0x4e4>)
 8005762:	fba3 1302 	umull	r1, r3, r3, r2
 8005766:	095b      	lsrs	r3, r3, #5
 8005768:	2164      	movs	r1, #100	; 0x64
 800576a:	fb01 f303 	mul.w	r3, r1, r3
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	3332      	adds	r3, #50	; 0x32
 8005774:	4a08      	ldr	r2, [pc, #32]	; (8005798 <UART_SetConfig+0x4e4>)
 8005776:	fba2 2303 	umull	r2, r3, r2, r3
 800577a:	095b      	lsrs	r3, r3, #5
 800577c:	f003 020f 	and.w	r2, r3, #15
 8005780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4422      	add	r2, r4
 8005788:	609a      	str	r2, [r3, #8]
}
 800578a:	bf00      	nop
 800578c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005790:	46bd      	mov	sp, r7
 8005792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005796:	bf00      	nop
 8005798:	51eb851f 	.word	0x51eb851f

0800579c <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	607a      	str	r2, [r7, #4]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 80057ae:	89fb      	ldrh	r3, [r7, #14]
 80057b0:	021b      	lsls	r3, r3, #8
 80057b2:	b21a      	sxth	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	b21b      	sxth	r3, r3
 80057ba:	4313      	orrs	r3, r2
 80057bc:	b21b      	sxth	r3, r3
 80057be:	b29b      	uxth	r3, r3
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	601a      	str	r2, [r3, #0]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
   g->console.x_pos = g->console.x_end;
   g->console.y_pos = g->console.y_end;
#endif
   g->char_h_space = 1;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   g->char_v_space = 1;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
   g->font=NULL;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	611a      	str	r2, [r3, #16]
   g->currentFont.bytes_per_char = 0;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	831a      	strh	r2, [r3, #24]
   g->currentFont.char_height = 0;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	75da      	strb	r2, [r3, #23]
   g->currentFont.char_width = 0;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	759a      	strb	r2, [r3, #22]
   g->currentFont.number_of_chars = 0;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	835a      	strh	r2, [r3, #26]
   g->currentFont.number_of_offsets = 0;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	839a      	strh	r2, [r3, #28]
   g->currentFont.widths = NULL;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	621a      	str	r2, [r3, #32]
   g->currentFont.offsets = NULL;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	625a      	str	r2, [r3, #36]	; 0x24
   g->currentFont.data = NULL;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.font = NULL;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	62da      	str	r2, [r3, #44]	; 0x2c
   g->desktop_color = C_DESKTOP_COLOR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f645 425d 	movw	r2, #23645	; 0x5c5d
 800582e:	871a      	strh	r2, [r3, #56]	; 0x38
   g->fore_color = C_WHITE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005836:	869a      	strh	r2, [r3, #52]	; 0x34
   g->back_color = C_BLACK;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	86da      	strh	r2, [r3, #54]	; 0x36
   g->next_window = NULL;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	605a      	str	r2, [r3, #4]
   g->active_window = NULL;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	609a      	str	r2, [r3, #8]
   g->last_window = NULL;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	60da      	str	r2, [r3, #12]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8005850:	2300      	movs	r3, #0
 8005852:	73fb      	strb	r3, [r7, #15]
 8005854:	e010      	b.n	8005878 <UG_Init+0xac>
   {
      g->driver[i].driver = NULL;
 8005856:	7bfb      	ldrb	r3, [r7, #15]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	3307      	adds	r3, #7
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	4413      	add	r3, r2
 8005860:	2200      	movs	r2, #0
 8005862:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	3307      	adds	r3, #7
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	4413      	add	r3, r2
 800586e:	2200      	movs	r2, #0
 8005870:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8005872:	7bfb      	ldrb	r3, [r7, #15]
 8005874:	3301      	adds	r3, #1
 8005876:	73fb      	strb	r3, [r7, #15]
 8005878:	7bfb      	ldrb	r3, [r7, #15]
 800587a:	2b03      	cmp	r3, #3
 800587c:	d9eb      	bls.n	8005856 <UG_Init+0x8a>
   }

   gui = g;
 800587e:	4a05      	ldr	r2, [pc, #20]	; (8005894 <UG_Init+0xc8>)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6013      	str	r3, [r2, #0]
   return 1;
 8005884:	2301      	movs	r3, #1
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	200004f4 	.word	0x200004f4

08005898 <UG_GetGUI>:
   gui = g;
   return 1;
}

UG_GUI* UG_GetGUI( void )
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
   return gui;
 800589c:	4b03      	ldr	r3, [pc, #12]	; (80058ac <UG_GetGUI+0x14>)
 800589e:	681b      	ldr	r3, [r3, #0]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	200004f4 	.word	0x200004f4

080058b0 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  gui->font = font;
 80058b8:	4b04      	ldr	r3, [pc, #16]	; (80058cc <UG_FontSelect+0x1c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	611a      	str	r2, [r3, #16]
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	200004f4 	.word	0x200004f4

080058d0 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af02      	add	r7, sp, #8
 80058d6:	4603      	mov	r3, r0
 80058d8:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 80058da:	4b0e      	ldr	r3, [pc, #56]	; (8005914 <UG_FillScreen+0x44>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	b21a      	sxth	r2, r3
 80058ec:	4b09      	ldr	r3, [pc, #36]	; (8005914 <UG_FillScreen+0x44>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	b219      	sxth	r1, r3
 80058fe:	88fb      	ldrh	r3, [r7, #6]
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	460b      	mov	r3, r1
 8005904:	2100      	movs	r1, #0
 8005906:	2000      	movs	r0, #0
 8005908:	f000 f806 	bl	8005918 <UG_FillFrame>
}
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	200004f4 	.word	0x200004f4

08005918 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8005918:	b5b0      	push	{r4, r5, r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af02      	add	r7, sp, #8
 800591e:	4604      	mov	r4, r0
 8005920:	4608      	mov	r0, r1
 8005922:	4611      	mov	r1, r2
 8005924:	461a      	mov	r2, r3
 8005926:	4623      	mov	r3, r4
 8005928:	80fb      	strh	r3, [r7, #6]
 800592a:	4603      	mov	r3, r0
 800592c:	80bb      	strh	r3, [r7, #4]
 800592e:	460b      	mov	r3, r1
 8005930:	807b      	strh	r3, [r7, #2]
 8005932:	4613      	mov	r3, r2
 8005934:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8005936:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800593a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800593e:	429a      	cmp	r2, r3
 8005940:	da05      	bge.n	800594e <UG_FillFrame+0x36>
     swap(x1,x2);
 8005942:	88fb      	ldrh	r3, [r7, #6]
 8005944:	817b      	strh	r3, [r7, #10]
 8005946:	887b      	ldrh	r3, [r7, #2]
 8005948:	80fb      	strh	r3, [r7, #6]
 800594a:	897b      	ldrh	r3, [r7, #10]
 800594c:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 800594e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005952:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005956:	429a      	cmp	r2, r3
 8005958:	da05      	bge.n	8005966 <UG_FillFrame+0x4e>
     swap(y1,y2);
 800595a:	88bb      	ldrh	r3, [r7, #4]
 800595c:	813b      	strh	r3, [r7, #8]
 800595e:	883b      	ldrh	r3, [r7, #0]
 8005960:	80bb      	strh	r3, [r7, #4]
 8005962:	893b      	ldrh	r3, [r7, #8]
 8005964:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8005966:	4b24      	ldr	r3, [pc, #144]	; (80059f8 <UG_FillFrame+0xe0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d012      	beq.n	800599c <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005976:	4b20      	ldr	r3, [pc, #128]	; (80059f8 <UG_FillFrame+0xe0>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597c:	461d      	mov	r5, r3
 800597e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005982:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005986:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800598a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800598e:	8c3b      	ldrh	r3, [r7, #32]
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	4623      	mov	r3, r4
 8005994:	47a8      	blx	r5
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d028      	beq.n	80059ee <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 800599c:	88bb      	ldrh	r3, [r7, #4]
 800599e:	81bb      	strh	r3, [r7, #12]
 80059a0:	e01e      	b.n	80059e0 <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 80059a2:	88fb      	ldrh	r3, [r7, #6]
 80059a4:	81fb      	strh	r3, [r7, #14]
 80059a6:	e00f      	b.n	80059c8 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 80059a8:	4b13      	ldr	r3, [pc, #76]	; (80059f8 <UG_FillFrame+0xe0>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	8c3a      	ldrh	r2, [r7, #32]
 80059b2:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80059b6:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80059ba:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 80059bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	3301      	adds	r3, #1
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	81fb      	strh	r3, [r7, #14]
 80059c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80059cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	dde9      	ble.n	80059a8 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 80059d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	3301      	adds	r3, #1
 80059dc:	b29b      	uxth	r3, r3
 80059de:	81bb      	strh	r3, [r7, #12]
 80059e0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80059e4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	ddda      	ble.n	80059a2 <UG_FillFrame+0x8a>
 80059ec:	e000      	b.n	80059f0 <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80059ee:	bf00      	nop
      }
   }
}
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bdb0      	pop	{r4, r5, r7, pc}
 80059f6:	bf00      	nop
 80059f8:	200004f4 	.word	0x200004f4

080059fc <UG_DrawMesh>:
     x++;
   }
}

void UG_DrawMesh( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_U16 spacing, UG_COLOR c )
{
 80059fc:	b590      	push	{r4, r7, lr}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af02      	add	r7, sp, #8
 8005a02:	4604      	mov	r4, r0
 8005a04:	4608      	mov	r0, r1
 8005a06:	4611      	mov	r1, r2
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4623      	mov	r3, r4
 8005a0c:	80fb      	strh	r3, [r7, #6]
 8005a0e:	4603      	mov	r3, r0
 8005a10:	80bb      	strh	r3, [r7, #4]
 8005a12:	460b      	mov	r3, r1
 8005a14:	807b      	strh	r3, [r7, #2]
 8005a16:	4613      	mov	r3, r2
 8005a18:	803b      	strh	r3, [r7, #0]
   UG_U16 p;

   if ( x2 < x1 )
 8005a1a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	da05      	bge.n	8005a32 <UG_DrawMesh+0x36>
     swap(x1,x2);
 8005a26:	88fb      	ldrh	r3, [r7, #6]
 8005a28:	81bb      	strh	r3, [r7, #12]
 8005a2a:	887b      	ldrh	r3, [r7, #2]
 8005a2c:	80fb      	strh	r3, [r7, #6]
 8005a2e:	89bb      	ldrh	r3, [r7, #12]
 8005a30:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 8005a32:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005a36:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	da05      	bge.n	8005a4a <UG_DrawMesh+0x4e>
     swap(y1,y2);
 8005a3e:	88bb      	ldrh	r3, [r7, #4]
 8005a40:	817b      	strh	r3, [r7, #10]
 8005a42:	883b      	ldrh	r3, [r7, #0]
 8005a44:	80bb      	strh	r3, [r7, #4]
 8005a46:	897b      	ldrh	r3, [r7, #10]
 8005a48:	803b      	strh	r3, [r7, #0]

   for( p=y1; p<y2; p+=spacing )
 8005a4a:	88bb      	ldrh	r3, [r7, #4]
 8005a4c:	81fb      	strh	r3, [r7, #14]
 8005a4e:	e010      	b.n	8005a72 <UG_DrawMesh+0x76>
   {
     UG_DrawLine(x1, p, x2, p, c);
 8005a50:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8005a54:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8005a58:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005a5c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005a60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	4623      	mov	r3, r4
 8005a66:	f000 fa61 	bl	8005f2c <UG_DrawLine>
   for( p=y1; p<y2; p+=spacing )
 8005a6a:	89fa      	ldrh	r2, [r7, #14]
 8005a6c:	8c3b      	ldrh	r3, [r7, #32]
 8005a6e:	4413      	add	r3, r2
 8005a70:	81fb      	strh	r3, [r7, #14]
 8005a72:	89fa      	ldrh	r2, [r7, #14]
 8005a74:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	dbe9      	blt.n	8005a50 <UG_DrawMesh+0x54>
   }
   UG_DrawLine(x1, y2, x2, y2, c);
 8005a7c:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005a80:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005a84:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005a88:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005a8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	4623      	mov	r3, r4
 8005a92:	f000 fa4b 	bl	8005f2c <UG_DrawLine>

   for( p=x1; p<x2; p+=spacing )
 8005a96:	88fb      	ldrh	r3, [r7, #6]
 8005a98:	81fb      	strh	r3, [r7, #14]
 8005a9a:	e010      	b.n	8005abe <UG_DrawMesh+0xc2>
   {
     UG_DrawLine(p, y1, p, y2, c);
 8005a9c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8005aa0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005aa4:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005aa8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005aac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	4623      	mov	r3, r4
 8005ab2:	f000 fa3b 	bl	8005f2c <UG_DrawLine>
   for( p=x1; p<x2; p+=spacing )
 8005ab6:	89fa      	ldrh	r2, [r7, #14]
 8005ab8:	8c3b      	ldrh	r3, [r7, #32]
 8005aba:	4413      	add	r3, r2
 8005abc:	81fb      	strh	r3, [r7, #14]
 8005abe:	89fa      	ldrh	r2, [r7, #14]
 8005ac0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	dbe9      	blt.n	8005a9c <UG_DrawMesh+0xa0>
   }
   UG_DrawLine(x2, y1, x2, y2, c);
 8005ac8:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005acc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005ad0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005ad4:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005ad8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	4623      	mov	r3, r4
 8005ade:	f000 fa25 	bl	8005f2c <UG_DrawLine>
}
 8005ae2:	bf00      	nop
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd90      	pop	{r4, r7, pc}

08005aea <UG_DrawFrame>:

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8005aea:	b590      	push	{r4, r7, lr}
 8005aec:	b085      	sub	sp, #20
 8005aee:	af02      	add	r7, sp, #8
 8005af0:	4604      	mov	r4, r0
 8005af2:	4608      	mov	r0, r1
 8005af4:	4611      	mov	r1, r2
 8005af6:	461a      	mov	r2, r3
 8005af8:	4623      	mov	r3, r4
 8005afa:	80fb      	strh	r3, [r7, #6]
 8005afc:	4603      	mov	r3, r0
 8005afe:	80bb      	strh	r3, [r7, #4]
 8005b00:	460b      	mov	r3, r1
 8005b02:	807b      	strh	r3, [r7, #2]
 8005b04:	4613      	mov	r3, r2
 8005b06:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 8005b08:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005b0c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005b10:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005b14:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005b18:	8b3b      	ldrh	r3, [r7, #24]
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	4623      	mov	r3, r4
 8005b1e:	f000 fa05 	bl	8005f2c <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 8005b22:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005b26:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005b2a:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005b2e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005b32:	8b3b      	ldrh	r3, [r7, #24]
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	4623      	mov	r3, r4
 8005b38:	f000 f9f8 	bl	8005f2c <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 8005b3c:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005b40:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005b44:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005b48:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005b4c:	8b3b      	ldrh	r3, [r7, #24]
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	4623      	mov	r3, r4
 8005b52:	f000 f9eb 	bl	8005f2c <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 8005b56:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005b5a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005b5e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005b62:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005b66:	8b3b      	ldrh	r3, [r7, #24]
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	4623      	mov	r3, r4
 8005b6c:	f000 f9de 	bl	8005f2c <UG_DrawLine>
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd90      	pop	{r4, r7, pc}

08005b78 <UG_DrawPixel>:
   UG_DrawArc(x1+r, y2-r, r, 0x30, c);
   UG_DrawArc(x2-r, y2-r, r, 0xC0, c);
}

void UG_DrawPixel( UG_S16 x0, UG_S16 y0, UG_COLOR c )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	80fb      	strh	r3, [r7, #6]
 8005b82:	460b      	mov	r3, r1
 8005b84:	80bb      	strh	r3, [r7, #4]
 8005b86:	4613      	mov	r3, r2
 8005b88:	807b      	strh	r3, [r7, #2]
   gui->device->pset(x0,y0,c);
 8005b8a:	4b07      	ldr	r3, [pc, #28]	; (8005ba8 <UG_DrawPixel+0x30>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	887a      	ldrh	r2, [r7, #2]
 8005b94:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005b98:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005b9c:	4798      	blx	r3
}
 8005b9e:	bf00      	nop
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	200004f4 	.word	0x200004f4

08005bac <UG_DrawCircle>:

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 8005bac:	b590      	push	{r4, r7, lr}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	4608      	mov	r0, r1
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	461a      	mov	r2, r3
 8005bba:	4623      	mov	r3, r4
 8005bbc:	80fb      	strh	r3, [r7, #6]
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	80bb      	strh	r3, [r7, #4]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	807b      	strh	r3, [r7, #2]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 8005bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f2c0 80c8 	blt.w	8005d64 <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 8005bd4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f2c0 80c5 	blt.w	8005d68 <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 8005bde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f340 80c2 	ble.w	8005d6c <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 8005be8:	887b      	ldrh	r3, [r7, #2]
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	f1c3 0301 	rsb	r3, r3, #1
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	827b      	strh	r3, [r7, #18]
   yd = 0;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	823b      	strh	r3, [r7, #16]
   e = 0;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	81fb      	strh	r3, [r7, #14]
   x = r;
 8005bfe:	887b      	ldrh	r3, [r7, #2]
 8005c00:	82fb      	strh	r3, [r7, #22]
   y = 0;
 8005c02:	2300      	movs	r3, #0
 8005c04:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 8005c06:	e0a5      	b.n	8005d54 <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 8005c08:	4b5a      	ldr	r3, [pc, #360]	; (8005d74 <UG_DrawCircle+0x1c8>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	88f9      	ldrh	r1, [r7, #6]
 8005c12:	8afa      	ldrh	r2, [r7, #22]
 8005c14:	1a8a      	subs	r2, r1, r2
 8005c16:	b292      	uxth	r2, r2
 8005c18:	b210      	sxth	r0, r2
 8005c1a:	88b9      	ldrh	r1, [r7, #4]
 8005c1c:	8aba      	ldrh	r2, [r7, #20]
 8005c1e:	440a      	add	r2, r1
 8005c20:	b292      	uxth	r2, r2
 8005c22:	b211      	sxth	r1, r2
 8005c24:	883a      	ldrh	r2, [r7, #0]
 8005c26:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 8005c28:	4b52      	ldr	r3, [pc, #328]	; (8005d74 <UG_DrawCircle+0x1c8>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	88f9      	ldrh	r1, [r7, #6]
 8005c32:	8afa      	ldrh	r2, [r7, #22]
 8005c34:	1a8a      	subs	r2, r1, r2
 8005c36:	b292      	uxth	r2, r2
 8005c38:	b210      	sxth	r0, r2
 8005c3a:	88b9      	ldrh	r1, [r7, #4]
 8005c3c:	8aba      	ldrh	r2, [r7, #20]
 8005c3e:	1a8a      	subs	r2, r1, r2
 8005c40:	b292      	uxth	r2, r2
 8005c42:	b211      	sxth	r1, r2
 8005c44:	883a      	ldrh	r2, [r7, #0]
 8005c46:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 8005c48:	4b4a      	ldr	r3, [pc, #296]	; (8005d74 <UG_DrawCircle+0x1c8>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	88f9      	ldrh	r1, [r7, #6]
 8005c52:	8afa      	ldrh	r2, [r7, #22]
 8005c54:	440a      	add	r2, r1
 8005c56:	b292      	uxth	r2, r2
 8005c58:	b210      	sxth	r0, r2
 8005c5a:	88b9      	ldrh	r1, [r7, #4]
 8005c5c:	8aba      	ldrh	r2, [r7, #20]
 8005c5e:	440a      	add	r2, r1
 8005c60:	b292      	uxth	r2, r2
 8005c62:	b211      	sxth	r1, r2
 8005c64:	883a      	ldrh	r2, [r7, #0]
 8005c66:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 8005c68:	4b42      	ldr	r3, [pc, #264]	; (8005d74 <UG_DrawCircle+0x1c8>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	88f9      	ldrh	r1, [r7, #6]
 8005c72:	8afa      	ldrh	r2, [r7, #22]
 8005c74:	440a      	add	r2, r1
 8005c76:	b292      	uxth	r2, r2
 8005c78:	b210      	sxth	r0, r2
 8005c7a:	88b9      	ldrh	r1, [r7, #4]
 8005c7c:	8aba      	ldrh	r2, [r7, #20]
 8005c7e:	1a8a      	subs	r2, r1, r2
 8005c80:	b292      	uxth	r2, r2
 8005c82:	b211      	sxth	r1, r2
 8005c84:	883a      	ldrh	r2, [r7, #0]
 8005c86:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 8005c88:	4b3a      	ldr	r3, [pc, #232]	; (8005d74 <UG_DrawCircle+0x1c8>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	88f9      	ldrh	r1, [r7, #6]
 8005c92:	8aba      	ldrh	r2, [r7, #20]
 8005c94:	1a8a      	subs	r2, r1, r2
 8005c96:	b292      	uxth	r2, r2
 8005c98:	b210      	sxth	r0, r2
 8005c9a:	88b9      	ldrh	r1, [r7, #4]
 8005c9c:	8afa      	ldrh	r2, [r7, #22]
 8005c9e:	440a      	add	r2, r1
 8005ca0:	b292      	uxth	r2, r2
 8005ca2:	b211      	sxth	r1, r2
 8005ca4:	883a      	ldrh	r2, [r7, #0]
 8005ca6:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 8005ca8:	4b32      	ldr	r3, [pc, #200]	; (8005d74 <UG_DrawCircle+0x1c8>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	88f9      	ldrh	r1, [r7, #6]
 8005cb2:	8aba      	ldrh	r2, [r7, #20]
 8005cb4:	1a8a      	subs	r2, r1, r2
 8005cb6:	b292      	uxth	r2, r2
 8005cb8:	b210      	sxth	r0, r2
 8005cba:	88b9      	ldrh	r1, [r7, #4]
 8005cbc:	8afa      	ldrh	r2, [r7, #22]
 8005cbe:	1a8a      	subs	r2, r1, r2
 8005cc0:	b292      	uxth	r2, r2
 8005cc2:	b211      	sxth	r1, r2
 8005cc4:	883a      	ldrh	r2, [r7, #0]
 8005cc6:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 8005cc8:	4b2a      	ldr	r3, [pc, #168]	; (8005d74 <UG_DrawCircle+0x1c8>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	88f9      	ldrh	r1, [r7, #6]
 8005cd2:	8aba      	ldrh	r2, [r7, #20]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	b292      	uxth	r2, r2
 8005cd8:	b210      	sxth	r0, r2
 8005cda:	88b9      	ldrh	r1, [r7, #4]
 8005cdc:	8afa      	ldrh	r2, [r7, #22]
 8005cde:	440a      	add	r2, r1
 8005ce0:	b292      	uxth	r2, r2
 8005ce2:	b211      	sxth	r1, r2
 8005ce4:	883a      	ldrh	r2, [r7, #0]
 8005ce6:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 8005ce8:	4b22      	ldr	r3, [pc, #136]	; (8005d74 <UG_DrawCircle+0x1c8>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	88f9      	ldrh	r1, [r7, #6]
 8005cf2:	8aba      	ldrh	r2, [r7, #20]
 8005cf4:	440a      	add	r2, r1
 8005cf6:	b292      	uxth	r2, r2
 8005cf8:	b210      	sxth	r0, r2
 8005cfa:	88b9      	ldrh	r1, [r7, #4]
 8005cfc:	8afa      	ldrh	r2, [r7, #22]
 8005cfe:	1a8a      	subs	r2, r1, r2
 8005d00:	b292      	uxth	r2, r2
 8005d02:	b211      	sxth	r1, r2
 8005d04:	883a      	ldrh	r2, [r7, #0]
 8005d06:	4798      	blx	r3

      y++;
 8005d08:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	3301      	adds	r3, #1
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	82bb      	strh	r3, [r7, #20]
      e += yd;
 8005d14:	89fa      	ldrh	r2, [r7, #14]
 8005d16:	8a3b      	ldrh	r3, [r7, #16]
 8005d18:	4413      	add	r3, r2
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 8005d1e:	8a3b      	ldrh	r3, [r7, #16]
 8005d20:	3302      	adds	r3, #2
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 8005d26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d2a:	005a      	lsls	r2, r3, #1
 8005d2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d30:	4413      	add	r3, r2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	dd0e      	ble.n	8005d54 <UG_DrawCircle+0x1a8>
      {
         x--;
 8005d36:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	82fb      	strh	r3, [r7, #22]
         e += xd;
 8005d42:	89fa      	ldrh	r2, [r7, #14]
 8005d44:	8a7b      	ldrh	r3, [r7, #18]
 8005d46:	4413      	add	r3, r2
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 8005d4c:	8a7b      	ldrh	r3, [r7, #18]
 8005d4e:	3302      	adds	r3, #2
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 8005d54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005d58:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	f6bf af53 	bge.w	8005c08 <UG_DrawCircle+0x5c>
 8005d62:	e004      	b.n	8005d6e <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 8005d64:	bf00      	nop
 8005d66:	e002      	b.n	8005d6e <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 8005d68:	bf00      	nop
 8005d6a:	e000      	b.n	8005d6e <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 8005d6c:	bf00      	nop
      }
   }
}
 8005d6e:	371c      	adds	r7, #28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd90      	pop	{r4, r7, pc}
 8005d74:	200004f4 	.word	0x200004f4

08005d78 <UG_FillCircle>:

void UG_FillCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 8005d78:	b590      	push	{r4, r7, lr}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	4604      	mov	r4, r0
 8005d80:	4608      	mov	r0, r1
 8005d82:	4611      	mov	r1, r2
 8005d84:	461a      	mov	r2, r3
 8005d86:	4623      	mov	r3, r4
 8005d88:	80fb      	strh	r3, [r7, #6]
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	80bb      	strh	r3, [r7, #4]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	807b      	strh	r3, [r7, #2]
 8005d92:	4613      	mov	r3, r2
 8005d94:	803b      	strh	r3, [r7, #0]
   UG_S16  x,y,xd;

   if ( x0<0 ) return;
 8005d96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f2c0 80bd 	blt.w	8005f1a <UG_FillCircle+0x1a2>
   if ( y0<0 ) return;
 8005da0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f2c0 80ba 	blt.w	8005f1e <UG_FillCircle+0x1a6>
   if ( r<=0 ) return;
 8005daa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f340 80b7 	ble.w	8005f22 <UG_FillCircle+0x1aa>

   xd = 3 - (r << 1);
 8005db4:	887b      	ldrh	r3, [r7, #2]
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	f1c3 0303 	rsb	r3, r3, #3
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	817b      	strh	r3, [r7, #10]
   x = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	81fb      	strh	r3, [r7, #14]
   y = r;
 8005dc6:	887b      	ldrh	r3, [r7, #2]
 8005dc8:	81bb      	strh	r3, [r7, #12]

   while ( x <= y )
 8005dca:	e095      	b.n	8005ef8 <UG_FillCircle+0x180>
   {
     if( y > 0 )
 8005dcc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	dd33      	ble.n	8005e3c <UG_FillCircle+0xc4>
     {
        UG_DrawLine(x0 - x, y0 - y,x0 - x, y0 + y, c);
 8005dd4:	88fa      	ldrh	r2, [r7, #6]
 8005dd6:	89fb      	ldrh	r3, [r7, #14]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	b218      	sxth	r0, r3
 8005dde:	88ba      	ldrh	r2, [r7, #4]
 8005de0:	89bb      	ldrh	r3, [r7, #12]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	b219      	sxth	r1, r3
 8005de8:	88fa      	ldrh	r2, [r7, #6]
 8005dea:	89fb      	ldrh	r3, [r7, #14]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	b21c      	sxth	r4, r3
 8005df2:	88ba      	ldrh	r2, [r7, #4]
 8005df4:	89bb      	ldrh	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	b21a      	sxth	r2, r3
 8005dfc:	883b      	ldrh	r3, [r7, #0]
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	4613      	mov	r3, r2
 8005e02:	4622      	mov	r2, r4
 8005e04:	f000 f892 	bl	8005f2c <UG_DrawLine>
        UG_DrawLine(x0 + x, y0 - y,x0 + x, y0 + y, c);
 8005e08:	88fa      	ldrh	r2, [r7, #6]
 8005e0a:	89fb      	ldrh	r3, [r7, #14]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	b218      	sxth	r0, r3
 8005e12:	88ba      	ldrh	r2, [r7, #4]
 8005e14:	89bb      	ldrh	r3, [r7, #12]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	b219      	sxth	r1, r3
 8005e1c:	88fa      	ldrh	r2, [r7, #6]
 8005e1e:	89fb      	ldrh	r3, [r7, #14]
 8005e20:	4413      	add	r3, r2
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	b21c      	sxth	r4, r3
 8005e26:	88ba      	ldrh	r2, [r7, #4]
 8005e28:	89bb      	ldrh	r3, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	b21a      	sxth	r2, r3
 8005e30:	883b      	ldrh	r3, [r7, #0]
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	4613      	mov	r3, r2
 8005e36:	4622      	mov	r2, r4
 8005e38:	f000 f878 	bl	8005f2c <UG_DrawLine>
     }
     if( x > 0 )
 8005e3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	dd33      	ble.n	8005eac <UG_FillCircle+0x134>
     {
        UG_DrawLine(x0 - y, y0 - x,x0 - y, y0 + x, c);
 8005e44:	88fa      	ldrh	r2, [r7, #6]
 8005e46:	89bb      	ldrh	r3, [r7, #12]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	b218      	sxth	r0, r3
 8005e4e:	88ba      	ldrh	r2, [r7, #4]
 8005e50:	89fb      	ldrh	r3, [r7, #14]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	b219      	sxth	r1, r3
 8005e58:	88fa      	ldrh	r2, [r7, #6]
 8005e5a:	89bb      	ldrh	r3, [r7, #12]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	b21c      	sxth	r4, r3
 8005e62:	88ba      	ldrh	r2, [r7, #4]
 8005e64:	89fb      	ldrh	r3, [r7, #14]
 8005e66:	4413      	add	r3, r2
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	b21a      	sxth	r2, r3
 8005e6c:	883b      	ldrh	r3, [r7, #0]
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	4613      	mov	r3, r2
 8005e72:	4622      	mov	r2, r4
 8005e74:	f000 f85a 	bl	8005f2c <UG_DrawLine>
        UG_DrawLine(x0 + y, y0 - x,x0 + y, y0 + x, c);
 8005e78:	88fa      	ldrh	r2, [r7, #6]
 8005e7a:	89bb      	ldrh	r3, [r7, #12]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	b218      	sxth	r0, r3
 8005e82:	88ba      	ldrh	r2, [r7, #4]
 8005e84:	89fb      	ldrh	r3, [r7, #14]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	b219      	sxth	r1, r3
 8005e8c:	88fa      	ldrh	r2, [r7, #6]
 8005e8e:	89bb      	ldrh	r3, [r7, #12]
 8005e90:	4413      	add	r3, r2
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	b21c      	sxth	r4, r3
 8005e96:	88ba      	ldrh	r2, [r7, #4]
 8005e98:	89fb      	ldrh	r3, [r7, #14]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	b21a      	sxth	r2, r3
 8005ea0:	883b      	ldrh	r3, [r7, #0]
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	4622      	mov	r2, r4
 8005ea8:	f000 f840 	bl	8005f2c <UG_DrawLine>
     }
     if ( xd < 0 )
 8005eac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	da09      	bge.n	8005ec8 <UG_FillCircle+0x150>
     {
        xd += (x << 2) + 6;
 8005eb4:	89fb      	ldrh	r3, [r7, #14]
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	897b      	ldrh	r3, [r7, #10]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	3306      	adds	r3, #6
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	817b      	strh	r3, [r7, #10]
 8005ec6:	e011      	b.n	8005eec <UG_FillCircle+0x174>
     }
     else
     {
        xd += ((x - y) << 2) + 10;
 8005ec8:	89fa      	ldrh	r2, [r7, #14]
 8005eca:	89bb      	ldrh	r3, [r7, #12]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	897b      	ldrh	r3, [r7, #10]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	330a      	adds	r3, #10
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	817b      	strh	r3, [r7, #10]
        y--;
 8005ee0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	81bb      	strh	r3, [r7, #12]
     }
     x++;
 8005eec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	81fb      	strh	r3, [r7, #14]
   while ( x <= y )
 8005ef8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005efc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	f77f af63 	ble.w	8005dcc <UG_FillCircle+0x54>
   }
   UG_DrawCircle(x0, y0, r,c);
 8005f06:	883b      	ldrh	r3, [r7, #0]
 8005f08:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005f0c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005f10:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005f14:	f7ff fe4a 	bl	8005bac <UG_DrawCircle>
 8005f18:	e004      	b.n	8005f24 <UG_FillCircle+0x1ac>
   if ( x0<0 ) return;
 8005f1a:	bf00      	nop
 8005f1c:	e002      	b.n	8005f24 <UG_FillCircle+0x1ac>
   if ( y0<0 ) return;
 8005f1e:	bf00      	nop
 8005f20:	e000      	b.n	8005f24 <UG_FillCircle+0x1ac>
   if ( r<=0 ) return;
 8005f22:	bf00      	nop
}
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd90      	pop	{r4, r7, pc}
	...

08005f2c <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8005f2c:	b5b0      	push	{r4, r5, r7, lr}
 8005f2e:	b08a      	sub	sp, #40	; 0x28
 8005f30:	af02      	add	r7, sp, #8
 8005f32:	4604      	mov	r4, r0
 8005f34:	4608      	mov	r0, r1
 8005f36:	4611      	mov	r1, r2
 8005f38:	461a      	mov	r2, r3
 8005f3a:	4623      	mov	r3, r4
 8005f3c:	80fb      	strh	r3, [r7, #6]
 8005f3e:	4603      	mov	r3, r0
 8005f40:	80bb      	strh	r3, [r7, #4]
 8005f42:	460b      	mov	r3, r1
 8005f44:	807b      	strh	r3, [r7, #2]
 8005f46:	4613      	mov	r3, r2
 8005f48:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8005f4a:	4b67      	ldr	r3, [pc, #412]	; (80060e8 <UG_DrawLine+0x1bc>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d013      	beq.n	8005f82 <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005f5a:	4b63      	ldr	r3, [pc, #396]	; (80060e8 <UG_DrawLine+0x1bc>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f60:	461d      	mov	r5, r3
 8005f62:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005f66:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005f6a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005f6e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005f72:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	4623      	mov	r3, r4
 8005f78:	47a8      	blx	r5
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 80ae 	beq.w	80060de <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 8005f82:	887a      	ldrh	r2, [r7, #2]
 8005f84:	88fb      	ldrh	r3, [r7, #6]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 8005f8c:	883a      	ldrh	r2, [r7, #0]
 8005f8e:	88bb      	ldrh	r3, [r7, #4]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 8005f96:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	bfb8      	it	lt
 8005f9e:	425b      	neglt	r3, r3
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8005fa4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	bfb8      	it	lt
 8005fac:	425b      	neglt	r3, r3
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 8005fb2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	dd01      	ble.n	8005fbe <UG_DrawLine+0x92>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e001      	b.n	8005fc2 <UG_DrawLine+0x96>
 8005fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fc2:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8005fc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	dd01      	ble.n	8005fd0 <UG_DrawLine+0xa4>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e001      	b.n	8005fd4 <UG_DrawLine+0xa8>
 8005fd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fd4:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8005fd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005fda:	105b      	asrs	r3, r3, #1
 8005fdc:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 8005fde:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005fe2:	105b      	asrs	r3, r3, #1
 8005fe4:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8005fe6:	88fb      	ldrh	r3, [r7, #6]
 8005fe8:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8005fea:	88bb      	ldrh	r3, [r7, #4]
 8005fec:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8005fee:	4b3e      	ldr	r3, [pc, #248]	; (80060e8 <UG_DrawLine+0x1bc>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005ff8:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005ffc:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8006000:	4798      	blx	r3

   if( dxabs >= dyabs )
 8006002:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006006:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800600a:	429a      	cmp	r2, r3
 800600c:	db33      	blt.n	8006076 <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 800600e:	2300      	movs	r3, #0
 8006010:	83fb      	strh	r3, [r7, #30]
 8006012:	e029      	b.n	8006068 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 8006014:	8b7a      	ldrh	r2, [r7, #26]
 8006016:	89fb      	ldrh	r3, [r7, #14]
 8006018:	4413      	add	r3, r2
 800601a:	b29b      	uxth	r3, r3
 800601c:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 800601e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006022:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006026:	429a      	cmp	r2, r3
 8006028:	db09      	blt.n	800603e <UG_DrawLine+0x112>
         {
            y -= dxabs;
 800602a:	8b7a      	ldrh	r2, [r7, #26]
 800602c:	8a3b      	ldrh	r3, [r7, #16]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	b29b      	uxth	r3, r3
 8006032:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 8006034:	8afa      	ldrh	r2, [r7, #22]
 8006036:	897b      	ldrh	r3, [r7, #10]
 8006038:	4413      	add	r3, r2
 800603a:	b29b      	uxth	r3, r3
 800603c:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 800603e:	8b3a      	ldrh	r2, [r7, #24]
 8006040:	89bb      	ldrh	r3, [r7, #12]
 8006042:	4413      	add	r3, r2
 8006044:	b29b      	uxth	r3, r3
 8006046:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 8006048:	4b27      	ldr	r3, [pc, #156]	; (80060e8 <UG_DrawLine+0x1bc>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006052:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8006056:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800605a:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 800605c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006060:	b29b      	uxth	r3, r3
 8006062:	3301      	adds	r3, #1
 8006064:	b29b      	uxth	r3, r3
 8006066:	83fb      	strh	r3, [r7, #30]
 8006068:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800606c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006070:	429a      	cmp	r2, r3
 8006072:	dbcf      	blt.n	8006014 <UG_DrawLine+0xe8>
 8006074:	e034      	b.n	80060e0 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 8006076:	2300      	movs	r3, #0
 8006078:	83fb      	strh	r3, [r7, #30]
 800607a:	e029      	b.n	80060d0 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 800607c:	8bba      	ldrh	r2, [r7, #28]
 800607e:	8a3b      	ldrh	r3, [r7, #16]
 8006080:	4413      	add	r3, r2
 8006082:	b29b      	uxth	r3, r3
 8006084:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 8006086:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800608a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800608e:	429a      	cmp	r2, r3
 8006090:	db09      	blt.n	80060a6 <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 8006092:	8bba      	ldrh	r2, [r7, #28]
 8006094:	89fb      	ldrh	r3, [r7, #14]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	b29b      	uxth	r3, r3
 800609a:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 800609c:	8b3a      	ldrh	r2, [r7, #24]
 800609e:	89bb      	ldrh	r3, [r7, #12]
 80060a0:	4413      	add	r3, r2
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 80060a6:	8afa      	ldrh	r2, [r7, #22]
 80060a8:	897b      	ldrh	r3, [r7, #10]
 80060aa:	4413      	add	r3, r2
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 80060b0:	4b0d      	ldr	r3, [pc, #52]	; (80060e8 <UG_DrawLine+0x1bc>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80060ba:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80060be:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80060c2:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 80060c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	3301      	adds	r3, #1
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	83fb      	strh	r3, [r7, #30]
 80060d0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80060d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80060d8:	429a      	cmp	r2, r3
 80060da:	dbcf      	blt.n	800607c <UG_DrawLine+0x150>
 80060dc:	e000      	b.n	80060e0 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80060de:	bf00      	nop
      }
   }  
}
 80060e0:	3720      	adds	r7, #32
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bdb0      	pop	{r4, r5, r7, pc}
 80060e6:	bf00      	nop
 80060e8:	200004f4 	.word	0x200004f4

080060ec <UG_DrawTriangle>:


/* Draw a triangle */
void UG_DrawTriangle( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_S16 x3, UG_S16 y3, UG_COLOR c ){
 80060ec:	b590      	push	{r4, r7, lr}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	4604      	mov	r4, r0
 80060f4:	4608      	mov	r0, r1
 80060f6:	4611      	mov	r1, r2
 80060f8:	461a      	mov	r2, r3
 80060fa:	4623      	mov	r3, r4
 80060fc:	80fb      	strh	r3, [r7, #6]
 80060fe:	4603      	mov	r3, r0
 8006100:	80bb      	strh	r3, [r7, #4]
 8006102:	460b      	mov	r3, r1
 8006104:	807b      	strh	r3, [r7, #2]
 8006106:	4613      	mov	r3, r2
 8006108:	803b      	strh	r3, [r7, #0]
  UG_DrawLine(x1, y1, x2, y2, c);
 800610a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800610e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006112:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006116:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800611a:	8c3b      	ldrh	r3, [r7, #32]
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	4623      	mov	r3, r4
 8006120:	f7ff ff04 	bl	8005f2c <UG_DrawLine>
  UG_DrawLine(x2, y2, x3, y3, c);
 8006124:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8006128:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800612c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8006130:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8006134:	8c3b      	ldrh	r3, [r7, #32]
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	4623      	mov	r3, r4
 800613a:	f7ff fef7 	bl	8005f2c <UG_DrawLine>
  UG_DrawLine(x3, y3, x1, y1, c);
 800613e:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006142:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006146:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800614a:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800614e:	8c3b      	ldrh	r3, [r7, #32]
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	4623      	mov	r3, r4
 8006154:	f7ff feea 	bl	8005f2c <UG_DrawLine>
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	bd90      	pop	{r4, r7, pc}

08006160 <UG_FillTriangle>:

/* Fill a triangle */
void UG_FillTriangle( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_S16 x3, UG_S16 y3, UG_COLOR c ){
 8006160:	b590      	push	{r4, r7, lr}
 8006162:	b08f      	sub	sp, #60	; 0x3c
 8006164:	af02      	add	r7, sp, #8
 8006166:	4604      	mov	r4, r0
 8006168:	4608      	mov	r0, r1
 800616a:	4611      	mov	r1, r2
 800616c:	461a      	mov	r2, r3
 800616e:	4623      	mov	r3, r4
 8006170:	80fb      	strh	r3, [r7, #6]
 8006172:	4603      	mov	r3, r0
 8006174:	80bb      	strh	r3, [r7, #4]
 8006176:	460b      	mov	r3, r1
 8006178:	807b      	strh	r3, [r7, #2]
 800617a:	4613      	mov	r3, r2
 800617c:	803b      	strh	r3, [r7, #0]

  UG_S16 a, b, y, last;

  /* Sort coordinates by Y order (y3 >= y2 >= y1) */
  if (y1 > y2) {
 800617e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006182:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006186:	429a      	cmp	r2, r3
 8006188:	dd0b      	ble.n	80061a2 <UG_FillTriangle+0x42>
    swap(y1, y2); swap(x1, x2);
 800618a:	88bb      	ldrh	r3, [r7, #4]
 800618c:	847b      	strh	r3, [r7, #34]	; 0x22
 800618e:	883b      	ldrh	r3, [r7, #0]
 8006190:	80bb      	strh	r3, [r7, #4]
 8006192:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006194:	803b      	strh	r3, [r7, #0]
 8006196:	88fb      	ldrh	r3, [r7, #6]
 8006198:	843b      	strh	r3, [r7, #32]
 800619a:	887b      	ldrh	r3, [r7, #2]
 800619c:	80fb      	strh	r3, [r7, #6]
 800619e:	8c3b      	ldrh	r3, [r7, #32]
 80061a0:	807b      	strh	r3, [r7, #2]
  }
  if (y2 > y3) {
 80061a2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80061a6:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80061aa:	429a      	cmp	r2, r3
 80061ac:	dd0f      	ble.n	80061ce <UG_FillTriangle+0x6e>
    swap(y3, y2); swap(x3, x2);
 80061ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80061b2:	83fb      	strh	r3, [r7, #30]
 80061b4:	883b      	ldrh	r3, [r7, #0]
 80061b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80061ba:	8bfb      	ldrh	r3, [r7, #30]
 80061bc:	803b      	strh	r3, [r7, #0]
 80061be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80061c2:	83bb      	strh	r3, [r7, #28]
 80061c4:	887b      	ldrh	r3, [r7, #2]
 80061c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80061ca:	8bbb      	ldrh	r3, [r7, #28]
 80061cc:	807b      	strh	r3, [r7, #2]
  }
  if (y1 > y2) {
 80061ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80061d2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	dd0b      	ble.n	80061f2 <UG_FillTriangle+0x92>
    swap(y1, y2); swap(x1, x2);
 80061da:	88bb      	ldrh	r3, [r7, #4]
 80061dc:	837b      	strh	r3, [r7, #26]
 80061de:	883b      	ldrh	r3, [r7, #0]
 80061e0:	80bb      	strh	r3, [r7, #4]
 80061e2:	8b7b      	ldrh	r3, [r7, #26]
 80061e4:	803b      	strh	r3, [r7, #0]
 80061e6:	88fb      	ldrh	r3, [r7, #6]
 80061e8:	833b      	strh	r3, [r7, #24]
 80061ea:	887b      	ldrh	r3, [r7, #2]
 80061ec:	80fb      	strh	r3, [r7, #6]
 80061ee:	8b3b      	ldrh	r3, [r7, #24]
 80061f0:	807b      	strh	r3, [r7, #2]
  }

  /* Handle awkward all-on-same-line case as its own thing */
  if (y1 == y3) {
 80061f2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80061f6:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d138      	bne.n	8006270 <UG_FillTriangle+0x110>
    a = b = x1;
 80061fe:	88fb      	ldrh	r3, [r7, #6]
 8006200:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006202:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006204:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (x2 < a) {
 8006206:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800620a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800620e:	429a      	cmp	r2, r3
 8006210:	da02      	bge.n	8006218 <UG_FillTriangle+0xb8>
      a = x2;
 8006212:	887b      	ldrh	r3, [r7, #2]
 8006214:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006216:	e007      	b.n	8006228 <UG_FillTriangle+0xc8>
    } else if (x2 > b) {
 8006218:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800621c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006220:	429a      	cmp	r2, r3
 8006222:	dd01      	ble.n	8006228 <UG_FillTriangle+0xc8>
      b = x2;
 8006224:	887b      	ldrh	r3, [r7, #2]
 8006226:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    if (x3 < a) {
 8006228:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 800622c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8006230:	429a      	cmp	r2, r3
 8006232:	da03      	bge.n	800623c <UG_FillTriangle+0xdc>
      a = x3;
 8006234:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006238:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800623a:	e008      	b.n	800624e <UG_FillTriangle+0xee>
    } else if (x3 > b) {
 800623c:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8006240:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006244:	429a      	cmp	r2, r3
 8006246:	dd02      	ble.n	800624e <UG_FillTriangle+0xee>
      b = x3;
 8006248:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800624c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    UG_DrawLine(a, y1, b + 1, y1, c);
 800624e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006250:	3301      	adds	r3, #1
 8006252:	b29b      	uxth	r3, r3
 8006254:	b21a      	sxth	r2, r3
 8006256:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800625a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800625e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006262:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	4623      	mov	r3, r4
 800626a:	f7ff fe5f 	bl	8005f2c <UG_DrawLine>
    return;
 800626e:	e0dc      	b.n	800642a <UG_FillTriangle+0x2ca>
  }

  UG_S16
  dx01 = x2 - x1,
 8006270:	887a      	ldrh	r2, [r7, #2]
 8006272:	88fb      	ldrh	r3, [r7, #6]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	b29b      	uxth	r3, r3
 8006278:	82fb      	strh	r3, [r7, #22]
  dy01 = y2 - y1,
 800627a:	883a      	ldrh	r2, [r7, #0]
 800627c:	88bb      	ldrh	r3, [r7, #4]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	b29b      	uxth	r3, r3
 8006282:	82bb      	strh	r3, [r7, #20]
  dx02 = x3 - x1,
 8006284:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006288:	88fb      	ldrh	r3, [r7, #6]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	b29b      	uxth	r3, r3
 800628e:	827b      	strh	r3, [r7, #18]
  dy02 = y3 - y1,
 8006290:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8006294:	88bb      	ldrh	r3, [r7, #4]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	b29b      	uxth	r3, r3
 800629a:	823b      	strh	r3, [r7, #16]
  dx12 = x3 - x2,
 800629c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80062a0:	887b      	ldrh	r3, [r7, #2]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	81fb      	strh	r3, [r7, #14]
  dy12 = y3 - y2,
 80062a8:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80062ac:	883b      	ldrh	r3, [r7, #0]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	81bb      	strh	r3, [r7, #12]
  sa   = 0,
 80062b4:	2300      	movs	r3, #0
 80062b6:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb   = 0;
 80062b8:	2300      	movs	r3, #0
 80062ba:	84bb      	strh	r3, [r7, #36]	; 0x24
   * is included here (and second loop will be skipped, avoiding a /0
   * error there), otherwise scanline y2 is skipped here and handled
   * in the second loop...which also avoids a /0 error here if y1=y2
   * (flat-topped triangle).
   */
  if (y2 == y3) {
 80062bc:	f9b7 2000 	ldrsh.w	r2, [r7]
 80062c0:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d102      	bne.n	80062ce <UG_FillTriangle+0x16e>
    last = y2;   /* Include y2 scanline */
 80062c8:	883b      	ldrh	r3, [r7, #0]
 80062ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80062cc:	e003      	b.n	80062d6 <UG_FillTriangle+0x176>
  } else {
    last = y2 - 1; /* Skip it */
 80062ce:	883b      	ldrh	r3, [r7, #0]
 80062d0:	3b01      	subs	r3, #1
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	853b      	strh	r3, [r7, #40]	; 0x28
  }

  for (y = y1; y <= last; y++) {
 80062d6:	88bb      	ldrh	r3, [r7, #4]
 80062d8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80062da:	e041      	b.n	8006360 <UG_FillTriangle+0x200>
    a   = x1 + sa / dy01;
 80062dc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80062e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80062e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	88fb      	ldrh	r3, [r7, #6]
 80062ec:	4413      	add	r3, r2
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x1 + sb / dy02;
 80062f2:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80062f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80062fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80062fe:	b29a      	uxth	r2, r3
 8006300:	88fb      	ldrh	r3, [r7, #6]
 8006302:	4413      	add	r3, r2
 8006304:	b29b      	uxth	r3, r3
 8006306:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx01;
 8006308:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800630a:	8afb      	ldrh	r3, [r7, #22]
 800630c:	4413      	add	r3, r2
 800630e:	b29b      	uxth	r3, r3
 8006310:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 8006312:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006314:	8a7b      	ldrh	r3, [r7, #18]
 8006316:	4413      	add	r3, r2
 8006318:	b29b      	uxth	r3, r3
 800631a:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* longhand:
       a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
       b = x1 + (x3 - x1) * (y - y1) / (y3 - y1);
       */
    if (a > b) {
 800631c:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8006320:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006324:	429a      	cmp	r2, r3
 8006326:	dd05      	ble.n	8006334 <UG_FillTriangle+0x1d4>
      swap(a, b);
 8006328:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800632a:	813b      	strh	r3, [r7, #8]
 800632c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800632e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006330:	893b      	ldrh	r3, [r7, #8]
 8006332:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    UG_DrawLine(a, y, b + 1, y, c);
 8006334:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006336:	3301      	adds	r3, #1
 8006338:	b29b      	uxth	r3, r3
 800633a:	b21a      	sxth	r2, r3
 800633c:	f9b7 402a 	ldrsh.w	r4, [r7, #42]	; 0x2a
 8006340:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8006344:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006348:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	4623      	mov	r3, r4
 8006350:	f7ff fdec 	bl	8005f2c <UG_DrawLine>
  for (y = y1; y <= last; y++) {
 8006354:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006358:	b29b      	uxth	r3, r3
 800635a:	3301      	adds	r3, #1
 800635c:	b29b      	uxth	r3, r3
 800635e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006360:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8006364:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006368:	429a      	cmp	r2, r3
 800636a:	ddb7      	ble.n	80062dc <UG_FillTriangle+0x17c>
  }

  /* For lower part of triangle, find scanline crossings for segments
   * 0-2 and 1-2.  This loop is skipped if y2=y3.
   */
  sa = dx12 * (y - y2);
 800636c:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8006370:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	b29a      	uxth	r2, r3
 8006378:	89fb      	ldrh	r3, [r7, #14]
 800637a:	fb12 f303 	smulbb	r3, r2, r3
 800637e:	b29b      	uxth	r3, r3
 8006380:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb = dx02 * (y - y1);
 8006382:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8006386:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	b29a      	uxth	r2, r3
 800638e:	8a7b      	ldrh	r3, [r7, #18]
 8006390:	fb12 f303 	smulbb	r3, r2, r3
 8006394:	b29b      	uxth	r3, r3
 8006396:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (; y <= y3; y++) {
 8006398:	e041      	b.n	800641e <UG_FillTriangle+0x2be>
    a   = x2 + sa / dy12;
 800639a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800639e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80063a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	887b      	ldrh	r3, [r7, #2]
 80063aa:	4413      	add	r3, r2
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x1 + sb / dy02;
 80063b0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80063b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80063b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80063bc:	b29a      	uxth	r2, r3
 80063be:	88fb      	ldrh	r3, [r7, #6]
 80063c0:	4413      	add	r3, r2
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx12;
 80063c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80063c8:	89fb      	ldrh	r3, [r7, #14]
 80063ca:	4413      	add	r3, r2
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 80063d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80063d2:	8a7b      	ldrh	r3, [r7, #18]
 80063d4:	4413      	add	r3, r2
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* longhand:
       a = x2 + (x3 - x2) * (y - y2) / (y3 - y2);
       b = x1 + (x3 - x1) * (y - y1) / (y3 - y1);
       */
    if (a > b) {
 80063da:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80063de:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80063e2:	429a      	cmp	r2, r3
 80063e4:	dd05      	ble.n	80063f2 <UG_FillTriangle+0x292>
      swap(a, b);
 80063e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80063e8:	817b      	strh	r3, [r7, #10]
 80063ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80063ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80063ee:	897b      	ldrh	r3, [r7, #10]
 80063f0:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    UG_DrawLine(a, y, b + 1, y, c);
 80063f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80063f4:	3301      	adds	r3, #1
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	b21a      	sxth	r2, r3
 80063fa:	f9b7 402a 	ldrsh.w	r4, [r7, #42]	; 0x2a
 80063fe:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8006402:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006406:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	4623      	mov	r3, r4
 800640e:	f7ff fd8d 	bl	8005f2c <UG_DrawLine>
  for (; y <= y3; y++) {
 8006412:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006416:	b29b      	uxth	r3, r3
 8006418:	3301      	adds	r3, #1
 800641a:	b29b      	uxth	r3, r3
 800641c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800641e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8006422:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8006426:	429a      	cmp	r2, r3
 8006428:	ddb7      	ble.n	800639a <UG_FillTriangle+0x23a>
  }
}
 800642a:	3734      	adds	r7, #52	; 0x34
 800642c:	46bd      	mov	sp, r7
 800642e:	bd90      	pop	{r4, r7, pc}

08006430 <UG_PutString>:

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8006430:	b590      	push	{r4, r7, lr}
 8006432:	b087      	sub	sp, #28
 8006434:	af02      	add	r7, sp, #8
 8006436:	4603      	mov	r3, r0
 8006438:	603a      	str	r2, [r7, #0]
 800643a:	80fb      	strh	r3, [r7, #6]
 800643c:	460b      	mov	r3, r1
 800643e:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8006440:	88fb      	ldrh	r3, [r7, #6]
 8006442:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8006444:	88bb      	ldrh	r3, [r7, #4]
 8006446:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 8006448:	4b3c      	ldr	r3, [pc, #240]	; (800653c <UG_PutString+0x10c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fa4e 	bl	80068f0 <_UG_FontSelect>
   while ( *str != 0 )
 8006454:	e054      	b.n	8006500 <UG_PutString+0xd0>
      }
      else{
         chr = *str++;
      }
      #else
      chr = *str++;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	1c5a      	adds	r2, r3, #1
 800645a:	603a      	str	r2, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	72fb      	strb	r3, [r7, #11]
      #endif

      if ( chr == '\n' )
 8006460:	7afb      	ldrb	r3, [r7, #11]
 8006462:	2b0a      	cmp	r3, #10
 8006464:	d105      	bne.n	8006472 <UG_PutString+0x42>
      {
         xp = gui->device->x_dim;
 8006466:	4b35      	ldr	r3, [pc, #212]	; (800653c <UG_PutString+0x10c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	81fb      	strh	r3, [r7, #14]
         continue;
 8006470:	e046      	b.n	8006500 <UG_PutString+0xd0>
      }
      cw = _UG_GetCharData(chr,NULL);
 8006472:	7afb      	ldrb	r3, [r7, #11]
 8006474:	2100      	movs	r1, #0
 8006476:	4618      	mov	r0, r3
 8006478:	f000 f8ea 	bl	8006650 <_UG_GetCharData>
 800647c:	4603      	mov	r3, r0
 800647e:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 8006480:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006488:	d100      	bne.n	800648c <UG_PutString+0x5c>
 800648a:	e039      	b.n	8006500 <UG_PutString+0xd0>
      if ( xp + cw > gui->device->x_dim - 1 )
 800648c:	4b2b      	ldr	r3, [pc, #172]	; (800653c <UG_PutString+0x10c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006496:	4619      	mov	r1, r3
 8006498:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800649c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80064a0:	4413      	add	r3, r2
 80064a2:	4299      	cmp	r1, r3
 80064a4:	dc11      	bgt.n	80064ca <UG_PutString+0x9a>
      {
         xp = x;
 80064a6:	88fb      	ldrh	r3, [r7, #6]
 80064a8:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 80064aa:	4b24      	ldr	r3, [pc, #144]	; (800653c <UG_PutString+0x10c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	7ddb      	ldrb	r3, [r3, #23]
 80064b0:	b21a      	sxth	r2, r3
 80064b2:	4b22      	ldr	r3, [pc, #136]	; (800653c <UG_PutString+0x10c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 80064ba:	b21b      	sxth	r3, r3
 80064bc:	4413      	add	r3, r2
 80064be:	b21b      	sxth	r3, r3
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	89bb      	ldrh	r3, [r7, #12]
 80064c4:	4413      	add	r3, r2
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 80064ca:	4b1c      	ldr	r3, [pc, #112]	; (800653c <UG_PutString+0x10c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
 80064d0:	4b1a      	ldr	r3, [pc, #104]	; (800653c <UG_PutString+0x10c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80064da:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80064de:	7af8      	ldrb	r0, [r7, #11]
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	4623      	mov	r3, r4
 80064e4:	f000 fa82 	bl	80069ec <_UG_PutChar>

      xp += cw + gui->char_h_space;
 80064e8:	4b14      	ldr	r3, [pc, #80]	; (800653c <UG_PutString+0x10c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	893b      	ldrh	r3, [r7, #8]
 80064f4:	4413      	add	r3, r2
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	89fb      	ldrh	r3, [r7, #14]
 80064fa:	4413      	add	r3, r2
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1a6      	bne.n	8006456 <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8006508:	4b0c      	ldr	r3, [pc, #48]	; (800653c <UG_PutString+0x10c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00c      	beq.n	8006532 <UG_PutString+0x102>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8006518:	4b08      	ldr	r3, [pc, #32]	; (800653c <UG_PutString+0x10c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800651e:	461c      	mov	r4, r3
 8006520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006528:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800652c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006530:	47a0      	blx	r4
}
 8006532:	bf00      	nop
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	bd90      	pop	{r4, r7, pc}
 800653a:	bf00      	nop
 800653c:	200004f4 	.word	0x200004f4

08006540 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	4603      	mov	r3, r0
 8006548:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 800654a:	4b05      	ldr	r3, [pc, #20]	; (8006560 <UG_SetForecolor+0x20>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	88fa      	ldrh	r2, [r7, #6]
 8006550:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8006552:	bf00      	nop
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	200004f4 	.word	0x200004f4

08006564 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	4603      	mov	r3, r0
 800656c:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 800656e:	4b05      	ldr	r3, [pc, #20]	; (8006584 <UG_SetBackcolor+0x20>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	88fa      	ldrh	r2, [r7, #6]
 8006574:	86da      	strh	r2, [r3, #54]	; 0x36
}
 8006576:	bf00      	nop
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	200004f4 	.word	0x200004f4

08006588 <UG_GetXDim>:

UG_S16 UG_GetXDim( void )
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
   return gui->device->x_dim;
 800658c:	4b04      	ldr	r3, [pc, #16]	; (80065a0 <UG_GetXDim+0x18>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8006596:	4618      	mov	r0, r3
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	200004f4 	.word	0x200004f4

080065a4 <UG_GetYDim>:

UG_S16 UG_GetYDim( void )
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0
   return gui->device->y_dim;
 80065a8:	4b04      	ldr	r3, [pc, #16]	; (80065bc <UG_GetYDim+0x18>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	200004f4 	.word	0x200004f4

080065c0 <UG_FontSetHSpace>:

void UG_FontSetHSpace( UG_U16 s )
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	4603      	mov	r3, r0
 80065c8:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 80065ca:	4b06      	ldr	r3, [pc, #24]	; (80065e4 <UG_FontSetHSpace+0x24>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	88fa      	ldrh	r2, [r7, #6]
 80065d0:	b252      	sxtb	r2, r2
 80065d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 80065d6:	bf00      	nop
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	200004f4 	.word	0x200004f4

080065e8 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	4603      	mov	r3, r0
 80065f0:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 80065f2:	4b06      	ldr	r3, [pc, #24]	; (800660c <UG_FontSetVSpace+0x24>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	88fa      	ldrh	r2, [r7, #6]
 80065f8:	b252      	sxtb	r2, r2
 80065fa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	200004f4 	.word	0x200004f4

08006610 <UG_FontSetTransparency>:

void UG_FontSetTransparency( UG_U8 t )
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	4603      	mov	r3, r0
 8006618:	71fb      	strb	r3, [r7, #7]
  gui->transparent_font=t;
 800661a:	4b05      	ldr	r3, [pc, #20]	; (8006630 <UG_FontSetTransparency+0x20>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	79fa      	ldrb	r2, [r7, #7]
 8006620:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	200004f4 	.word	0x200004f4

08006634 <UG_FontGetTransparency>:

UG_U8 UG_FontGetTransparency( void )
{
 8006634:	b480      	push	{r7}
 8006636:	af00      	add	r7, sp, #0
  return gui->transparent_font;
 8006638:	4b04      	ldr	r3, [pc, #16]	; (800664c <UG_FontGetTransparency+0x18>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 8006640:	4618      	mov	r0, r3
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	200004f4 	.word	0x200004f4

08006650 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	4603      	mov	r3, r0
 8006658:	6039      	str	r1, [r7, #0]
 800665a:	71fb      	strb	r3, [r7, #7]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 800665c:	2300      	movs	r3, #0
 800665e:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 8006660:	2300      	movs	r3, #0
 8006662:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8006664:	2300      	movs	r3, #0
 8006666:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8006668:	2300      	movs	r3, #0
 800666a:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 800666c:	2300      	movs	r3, #0
 800666e:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8006670:	4b9a      	ldr	r3, [pc, #616]	; (80068dc <_UG_GetCharData+0x28c>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006676:	4b9a      	ldr	r3, [pc, #616]	; (80068e0 <_UG_GetCharData+0x290>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	429a      	cmp	r2, r3
 800667c:	d10f      	bne.n	800669e <_UG_GetCharData+0x4e>
 800667e:	4b99      	ldr	r3, [pc, #612]	; (80068e4 <_UG_GetCharData+0x294>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	79fa      	ldrb	r2, [r7, #7]
 8006684:	429a      	cmp	r2, r3
 8006686:	d10a      	bne.n	800669e <_UG_GetCharData+0x4e>
    if(p){
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 800668e:	4b96      	ldr	r3, [pc, #600]	; (80068e8 <_UG_GetCharData+0x298>)
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8006696:	4b95      	ldr	r3, [pc, #596]	; (80068ec <_UG_GetCharData+0x29c>)
 8006698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800669c:	e119      	b.n	80068d2 <_UG_GetCharData+0x282>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 800669e:	4b8f      	ldr	r3, [pc, #572]	; (80068dc <_UG_GetCharData+0x28c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	7d5b      	ldrb	r3, [r3, #21]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d07d      	beq.n	80067a4 <_UG_GetCharData+0x154>
    switch ( encoding )
 80066a8:	79fb      	ldrb	r3, [r7, #7]
 80066aa:	2bfc      	cmp	r3, #252	; 0xfc
 80066ac:	f300 80ce 	bgt.w	800684c <_UG_GetCharData+0x1fc>
 80066b0:	2bd6      	cmp	r3, #214	; 0xd6
 80066b2:	da09      	bge.n	80066c8 <_UG_GetCharData+0x78>
 80066b4:	2bc4      	cmp	r3, #196	; 0xc4
 80066b6:	d06c      	beq.n	8006792 <_UG_GetCharData+0x142>
 80066b8:	2bc4      	cmp	r3, #196	; 0xc4
 80066ba:	f300 80c7 	bgt.w	800684c <_UG_GetCharData+0x1fc>
 80066be:	2bb0      	cmp	r3, #176	; 0xb0
 80066c0:	d06d      	beq.n	800679e <_UG_GetCharData+0x14e>
 80066c2:	2bb5      	cmp	r3, #181	; 0xb5
 80066c4:	d068      	beq.n	8006798 <_UG_GetCharData+0x148>
 80066c6:	e06e      	b.n	80067a6 <_UG_GetCharData+0x156>
 80066c8:	3bd6      	subs	r3, #214	; 0xd6
 80066ca:	2b26      	cmp	r3, #38	; 0x26
 80066cc:	f200 80be 	bhi.w	800684c <_UG_GetCharData+0x1fc>
 80066d0:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <_UG_GetCharData+0x88>)
 80066d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d6:	bf00      	nop
 80066d8:	0800677b 	.word	0x0800677b
 80066dc:	0800684d 	.word	0x0800684d
 80066e0:	0800684d 	.word	0x0800684d
 80066e4:	0800684d 	.word	0x0800684d
 80066e8:	0800684d 	.word	0x0800684d
 80066ec:	0800684d 	.word	0x0800684d
 80066f0:	08006787 	.word	0x08006787
 80066f4:	0800684d 	.word	0x0800684d
 80066f8:	0800684d 	.word	0x0800684d
 80066fc:	0800684d 	.word	0x0800684d
 8006700:	0800684d 	.word	0x0800684d
 8006704:	0800684d 	.word	0x0800684d
 8006708:	0800684d 	.word	0x0800684d
 800670c:	0800684d 	.word	0x0800684d
 8006710:	0800678d 	.word	0x0800678d
 8006714:	0800684d 	.word	0x0800684d
 8006718:	0800684d 	.word	0x0800684d
 800671c:	0800684d 	.word	0x0800684d
 8006720:	0800684d 	.word	0x0800684d
 8006724:	0800684d 	.word	0x0800684d
 8006728:	0800684d 	.word	0x0800684d
 800672c:	0800684d 	.word	0x0800684d
 8006730:	0800684d 	.word	0x0800684d
 8006734:	0800684d 	.word	0x0800684d
 8006738:	0800684d 	.word	0x0800684d
 800673c:	0800684d 	.word	0x0800684d
 8006740:	0800684d 	.word	0x0800684d
 8006744:	0800684d 	.word	0x0800684d
 8006748:	0800684d 	.word	0x0800684d
 800674c:	0800684d 	.word	0x0800684d
 8006750:	0800684d 	.word	0x0800684d
 8006754:	0800684d 	.word	0x0800684d
 8006758:	08006775 	.word	0x08006775
 800675c:	0800684d 	.word	0x0800684d
 8006760:	0800684d 	.word	0x0800684d
 8006764:	0800684d 	.word	0x0800684d
 8006768:	0800684d 	.word	0x0800684d
 800676c:	0800684d 	.word	0x0800684d
 8006770:	08006781 	.word	0x08006781
    {
       case 0xF6: encoding = 0x94; break; // ö
 8006774:	2394      	movs	r3, #148	; 0x94
 8006776:	71fb      	strb	r3, [r7, #7]
 8006778:	e015      	b.n	80067a6 <_UG_GetCharData+0x156>
       case 0xD6: encoding = 0x99; break; // Ö
 800677a:	2399      	movs	r3, #153	; 0x99
 800677c:	71fb      	strb	r3, [r7, #7]
 800677e:	e012      	b.n	80067a6 <_UG_GetCharData+0x156>
       case 0xFC: encoding = 0x81; break; // ü
 8006780:	2381      	movs	r3, #129	; 0x81
 8006782:	71fb      	strb	r3, [r7, #7]
 8006784:	e00f      	b.n	80067a6 <_UG_GetCharData+0x156>
       case 0xDC: encoding = 0x9A; break; // Ü
 8006786:	239a      	movs	r3, #154	; 0x9a
 8006788:	71fb      	strb	r3, [r7, #7]
 800678a:	e00c      	b.n	80067a6 <_UG_GetCharData+0x156>
       case 0xE4: encoding = 0x84; break; // ä
 800678c:	2384      	movs	r3, #132	; 0x84
 800678e:	71fb      	strb	r3, [r7, #7]
 8006790:	e009      	b.n	80067a6 <_UG_GetCharData+0x156>
       case 0xC4: encoding = 0x8E; break; // Ä
 8006792:	238e      	movs	r3, #142	; 0x8e
 8006794:	71fb      	strb	r3, [r7, #7]
 8006796:	e006      	b.n	80067a6 <_UG_GetCharData+0x156>
       case 0xB5: encoding = 0xE6; break; // µ
 8006798:	23e6      	movs	r3, #230	; 0xe6
 800679a:	71fb      	strb	r3, [r7, #7]
 800679c:	e003      	b.n	80067a6 <_UG_GetCharData+0x156>
       case 0xB0: encoding = 0xF8; break; // °
 800679e:	23f8      	movs	r3, #248	; 0xf8
 80067a0:	71fb      	strb	r3, [r7, #7]
 80067a2:	e000      	b.n	80067a6 <_UG_GetCharData+0x156>
    }
  }
 80067a4:	bf00      	nop

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80067a6:	e051      	b.n	800684c <_UG_GetCharData+0x1fc>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 80067a8:	4b4c      	ldr	r3, [pc, #304]	; (80068dc <_UG_GetCharData+0x28c>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	8a7a      	ldrh	r2, [r7, #18]
 80067b0:	0052      	lsls	r2, r2, #1
 80067b2:	4413      	add	r3, r2
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7fe fff1 	bl	800579c <ptr_8to16>
 80067ba:	4603      	mov	r3, r0
 80067bc:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 80067be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	da06      	bge.n	80067d4 <_UG_GetCharData+0x184>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 80067c6:	89fb      	ldrh	r3, [r7, #14]
 80067c8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80067cc:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 80067ce:	2301      	movs	r3, #1
 80067d0:	747b      	strb	r3, [r7, #17]
 80067d2:	e038      	b.n	8006846 <_UG_GetCharData+0x1f6>
    }
    else if(range)                                                  // If range previously set, this is the range end
 80067d4:	7c7b      	ldrb	r3, [r7, #17]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d025      	beq.n	8006826 <_UG_GetCharData+0x1d6>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 80067da:	79fb      	ldrb	r3, [r7, #7]
 80067dc:	b29b      	uxth	r3, r3
 80067de:	8afa      	ldrh	r2, [r7, #22]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d80f      	bhi.n	8006804 <_UG_GetCharData+0x1b4>
 80067e4:	79fb      	ldrb	r3, [r7, #7]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	89fa      	ldrh	r2, [r7, #14]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d30a      	bcc.n	8006804 <_UG_GetCharData+0x1b4>
      {
        skip += (encoding-start);                             // Calculate the skip value
 80067ee:	79fb      	ldrb	r3, [r7, #7]
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	8afb      	ldrh	r3, [r7, #22]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	8abb      	ldrh	r3, [r7, #20]
 80067fa:	4413      	add	r3, r2
 80067fc:	82bb      	strh	r3, [r7, #20]
        found=1;
 80067fe:	2301      	movs	r3, #1
 8006800:	743b      	strb	r3, [r7, #16]
        break;
 8006802:	e02d      	b.n	8006860 <_UG_GetCharData+0x210>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 8006804:	79fb      	ldrb	r3, [r7, #7]
 8006806:	b29b      	uxth	r3, r3
 8006808:	8afa      	ldrh	r2, [r7, #22]
 800680a:	429a      	cmp	r2, r3
 800680c:	d825      	bhi.n	800685a <_UG_GetCharData+0x20a>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 800680e:	89fa      	ldrh	r2, [r7, #14]
 8006810:	8afb      	ldrh	r3, [r7, #22]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	b29a      	uxth	r2, r3
 8006816:	8abb      	ldrh	r3, [r7, #20]
 8006818:	4413      	add	r3, r2
 800681a:	b29b      	uxth	r3, r3
 800681c:	3301      	adds	r3, #1
 800681e:	82bb      	strh	r3, [r7, #20]
      range=0;
 8006820:	2300      	movs	r3, #0
 8006822:	747b      	strb	r3, [r7, #17]
 8006824:	e00f      	b.n	8006846 <_UG_GetCharData+0x1f6>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 8006826:	79fb      	ldrb	r3, [r7, #7]
 8006828:	b29b      	uxth	r3, r3
 800682a:	89fa      	ldrh	r2, [r7, #14]
 800682c:	429a      	cmp	r2, r3
 800682e:	d102      	bne.n	8006836 <_UG_GetCharData+0x1e6>
      {
        found=1;
 8006830:	2301      	movs	r3, #1
 8006832:	743b      	strb	r3, [r7, #16]
        break;
 8006834:	e014      	b.n	8006860 <_UG_GetCharData+0x210>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8006836:	79fb      	ldrb	r3, [r7, #7]
 8006838:	b29b      	uxth	r3, r3
 800683a:	89fa      	ldrh	r2, [r7, #14]
 800683c:	429a      	cmp	r2, r3
 800683e:	d80e      	bhi.n	800685e <_UG_GetCharData+0x20e>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8006840:	8abb      	ldrh	r3, [r7, #20]
 8006842:	3301      	adds	r3, #1
 8006844:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8006846:	8a7b      	ldrh	r3, [r7, #18]
 8006848:	3301      	adds	r3, #1
 800684a:	827b      	strh	r3, [r7, #18]
 800684c:	4b23      	ldr	r3, [pc, #140]	; (80068dc <_UG_GetCharData+0x28c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	8b9b      	ldrh	r3, [r3, #28]
 8006852:	8a7a      	ldrh	r2, [r7, #18]
 8006854:	429a      	cmp	r2, r3
 8006856:	d3a7      	bcc.n	80067a8 <_UG_GetCharData+0x158>
 8006858:	e002      	b.n	8006860 <_UG_GetCharData+0x210>
        break;
 800685a:	bf00      	nop
 800685c:	e000      	b.n	8006860 <_UG_GetCharData+0x210>
        break;
 800685e:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8006860:	7c3b      	ldrb	r3, [r7, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d033      	beq.n	80068ce <_UG_GetCharData+0x27e>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8006866:	4b1d      	ldr	r3, [pc, #116]	; (80068dc <_UG_GetCharData+0x28c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	4a1c      	ldr	r2, [pc, #112]	; (80068e0 <_UG_GetCharData+0x290>)
 800686e:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8006870:	4a1c      	ldr	r2, [pc, #112]	; (80068e4 <_UG_GetCharData+0x294>)
 8006872:	79fb      	ldrb	r3, [r7, #7]
 8006874:	7013      	strb	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8006876:	4b19      	ldr	r3, [pc, #100]	; (80068dc <_UG_GetCharData+0x28c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687c:	8aba      	ldrh	r2, [r7, #20]
 800687e:	4917      	ldr	r1, [pc, #92]	; (80068dc <_UG_GetCharData+0x28c>)
 8006880:	6809      	ldr	r1, [r1, #0]
 8006882:	8b09      	ldrh	r1, [r1, #24]
 8006884:	fb01 f202 	mul.w	r2, r1, r2
 8006888:	4413      	add	r3, r2
 800688a:	4a17      	ldr	r2, [pc, #92]	; (80068e8 <_UG_GetCharData+0x298>)
 800688c:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 800688e:	4b13      	ldr	r3, [pc, #76]	; (80068dc <_UG_GetCharData+0x28c>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d009      	beq.n	80068ac <_UG_GetCharData+0x25c>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8006898:	4b10      	ldr	r3, [pc, #64]	; (80068dc <_UG_GetCharData+0x28c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6a1a      	ldr	r2, [r3, #32]
 800689e:	8abb      	ldrh	r3, [r7, #20]
 80068a0:	4413      	add	r3, r2
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	b21a      	sxth	r2, r3
 80068a6:	4b11      	ldr	r3, [pc, #68]	; (80068ec <_UG_GetCharData+0x29c>)
 80068a8:	801a      	strh	r2, [r3, #0]
 80068aa:	e005      	b.n	80068b8 <_UG_GetCharData+0x268>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 80068ac:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <_UG_GetCharData+0x28c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	7d9b      	ldrb	r3, [r3, #22]
 80068b2:	b21a      	sxth	r2, r3
 80068b4:	4b0d      	ldr	r3, [pc, #52]	; (80068ec <_UG_GetCharData+0x29c>)
 80068b6:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <_UG_GetCharData+0x276>
      *p=last_p;                                                    // Load char bitmap address
 80068be:	4b0a      	ldr	r3, [pc, #40]	; (80068e8 <_UG_GetCharData+0x298>)
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 80068c6:	4b09      	ldr	r3, [pc, #36]	; (80068ec <_UG_GetCharData+0x29c>)
 80068c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068cc:	e001      	b.n	80068d2 <_UG_GetCharData+0x282>
  }
  return -1;                                                        // -1 = char not found
 80068ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3718      	adds	r7, #24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	200004f4 	.word	0x200004f4
 80068e0:	200004f8 	.word	0x200004f8
 80068e4:	200004fc 	.word	0x200004fc
 80068e8:	20000500 	.word	0x20000500
 80068ec:	20000504 	.word	0x20000504

080068f0 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 80068f0:	b590      	push	{r4, r7, lr}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 80068f8:	4b3b      	ldr	r3, [pc, #236]	; (80069e8 <_UG_FontSelect+0xf8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	429a      	cmp	r2, r3
 8006902:	d06c      	beq.n	80069de <_UG_FontSelect+0xee>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8006904:	4b38      	ldr	r3, [pc, #224]	; (80069e8 <_UG_FontSelect+0xf8>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	62da      	str	r2, [r3, #44]	; 0x2c
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	781a      	ldrb	r2, [r3, #0]
 8006910:	4b35      	ldr	r3, [pc, #212]	; (80069e8 <_UG_FontSelect+0xf8>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006918:	b2d2      	uxtb	r2, r2
 800691a:	751a      	strb	r2, [r3, #20]
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	607a      	str	r2, [r7, #4]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	b25b      	sxtb	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	da01      	bge.n	800692e <_UG_FontSelect+0x3e>
 800692a:	2201      	movs	r2, #1
 800692c:	e000      	b.n	8006930 <_UG_FontSelect+0x40>
 800692e:	2200      	movs	r2, #0
 8006930:	4b2d      	ldr	r3, [pc, #180]	; (80069e8 <_UG_FontSelect+0xf8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	755a      	strb	r2, [r3, #21]
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	607a      	str	r2, [r7, #4]
 800693e:	4a2a      	ldr	r2, [pc, #168]	; (80069e8 <_UG_FontSelect+0xf8>)
 8006940:	6812      	ldr	r2, [r2, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	7593      	strb	r3, [r2, #22]
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	607a      	str	r2, [r7, #4]
 800694c:	4a26      	ldr	r2, [pc, #152]	; (80069e8 <_UG_FontSelect+0xf8>)
 800694e:	6812      	ldr	r2, [r2, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	75d3      	strb	r3, [r2, #23]
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8006954:	4b24      	ldr	r3, [pc, #144]	; (80069e8 <_UG_FontSelect+0xf8>)
 8006956:	681c      	ldr	r4, [r3, #0]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7fe ff1f 	bl	800579c <ptr_8to16>
 800695e:	4603      	mov	r3, r0
 8006960:	8363      	strh	r3, [r4, #26]
  font+=2;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	3302      	adds	r3, #2
 8006966:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8006968:	4b1f      	ldr	r3, [pc, #124]	; (80069e8 <_UG_FontSelect+0xf8>)
 800696a:	681c      	ldr	r4, [r3, #0]
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7fe ff15 	bl	800579c <ptr_8to16>
 8006972:	4603      	mov	r3, r0
 8006974:	83a3      	strh	r3, [r4, #28]
  font+=2;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	3302      	adds	r3, #2
 800697a:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 800697c:	4b1a      	ldr	r3, [pc, #104]	; (80069e8 <_UG_FontSelect+0xf8>)
 800697e:	681c      	ldr	r4, [r3, #0]
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7fe ff0b 	bl	800579c <ptr_8to16>
 8006986:	4603      	mov	r3, r0
 8006988:	8323      	strh	r3, [r4, #24]
  font+=2;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	3302      	adds	r3, #2
 800698e:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	1c5a      	adds	r2, r3, #1
 8006994:	607a      	str	r2, [r7, #4]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00b      	beq.n	80069b4 <_UG_FontSelect+0xc4>
     gui->currentFont.widths = font;                      // Save pointer to width table
 800699c:	4b12      	ldr	r3, [pc, #72]	; (80069e8 <_UG_FontSelect+0xf8>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	621a      	str	r2, [r3, #32]
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 80069a4:	4b10      	ldr	r3, [pc, #64]	; (80069e8 <_UG_FontSelect+0xf8>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	8b5b      	ldrh	r3, [r3, #26]
 80069aa:	461a      	mov	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4413      	add	r3, r2
 80069b0:	607b      	str	r3, [r7, #4]
 80069b2:	e003      	b.n	80069bc <_UG_FontSelect+0xcc>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 80069b4:	4b0c      	ldr	r3, [pc, #48]	; (80069e8 <_UG_FontSelect+0xf8>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2200      	movs	r2, #0
 80069ba:	621a      	str	r2, [r3, #32]
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 80069bc:	4b0a      	ldr	r3, [pc, #40]	; (80069e8 <_UG_FontSelect+0xf8>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	625a      	str	r2, [r3, #36]	; 0x24
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 80069c4:	4b08      	ldr	r3, [pc, #32]	; (80069e8 <_UG_FontSelect+0xf8>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	8b9b      	ldrh	r3, [r3, #28]
 80069ca:	005b      	lsls	r3, r3, #1
 80069cc:	461a      	mov	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4413      	add	r3, r2
 80069d2:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 80069d4:	4b04      	ldr	r3, [pc, #16]	; (80069e8 <_UG_FontSelect+0xf8>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	629a      	str	r2, [r3, #40]	; 0x28
 80069dc:	e000      	b.n	80069e0 <_UG_FontSelect+0xf0>
    return;
 80069de:	bf00      	nop
}
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd90      	pop	{r4, r7, pc}
 80069e6:	bf00      	nop
 80069e8:	200004f4 	.word	0x200004f4

080069ec <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 80069ec:	b5b0      	push	{r4, r5, r7, lr}
 80069ee:	b08c      	sub	sp, #48	; 0x30
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	4604      	mov	r4, r0
 80069f4:	4608      	mov	r0, r1
 80069f6:	4611      	mov	r1, r2
 80069f8:	461a      	mov	r2, r3
 80069fa:	4623      	mov	r3, r4
 80069fc:	71fb      	strb	r3, [r7, #7]
 80069fe:	4603      	mov	r3, r0
 8006a00:	80bb      	strh	r3, [r7, #4]
 8006a02:	460b      	mov	r3, r1
 8006a04:	807b      	strh	r3, [r7, #2]
 8006a06:	4613      	mov	r3, r2
 8006a08:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006a0e:	2300      	movs	r3, #0
 8006a10:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006a12:	2300      	movs	r3, #0
 8006a14:	847b      	strh	r3, [r7, #34]	; 0x22
 8006a16:	2300      	movs	r3, #0
 8006a18:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8006a1a:	4b8a      	ldr	r3, [pc, #552]	; (8006c44 <_UG_PutChar+0x258>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a22:	75fb      	strb	r3, [r7, #23]
 8006a24:	4b87      	ldr	r3, [pc, #540]	; (8006c44 <_UG_PutChar+0x258>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 8006a32:	2300      	movs	r3, #0
 8006a34:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8006a36:	f107 0208 	add.w	r2, r7, #8
 8006a3a:	79fb      	ldrb	r3, [r7, #7]
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7ff fe06 	bl	8006650 <_UG_GetCharData>
 8006a44:	4603      	mov	r3, r0
 8006a46:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8006a48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a50:	d102      	bne.n	8006a58 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 8006a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a56:	e21e      	b.n	8006e96 <_UG_PutChar+0x4aa>

   bn =  gui->currentFont.char_width;
 8006a58:	4b7a      	ldr	r3, [pc, #488]	; (8006c44 <_UG_PutChar+0x258>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	7d9b      	ldrb	r3, [r3, #22]
 8006a5e:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 8006a60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <_UG_PutChar+0x7e>
     return 0;
 8006a66:	2300      	movs	r3, #0
 8006a68:	e215      	b.n	8006e96 <_UG_PutChar+0x4aa>
   }
   bn >>= 3;
 8006a6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a6c:	08db      	lsrs	r3, r3, #3
 8006a6e:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 8006a70:	4b74      	ldr	r3, [pc, #464]	; (8006c44 <_UG_PutChar+0x258>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	7d9b      	ldrb	r3, [r3, #22]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <_UG_PutChar+0x9a>
 8006a80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a82:	3301      	adds	r3, #1
 8006a84:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8006a86:	7dbb      	ldrb	r3, [r7, #22]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d01c      	beq.n	8006ac6 <_UG_PutChar+0xda>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8006a8c:	4b6d      	ldr	r3, [pc, #436]	; (8006c44 <_UG_PutChar+0x258>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a92:	461d      	mov	r5, r3
 8006a94:	88ba      	ldrh	r2, [r7, #4]
 8006a96:	8abb      	ldrh	r3, [r7, #20]
 8006a98:	4413      	add	r3, r2
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	b21c      	sxth	r4, r3
 8006aa2:	4b68      	ldr	r3, [pc, #416]	; (8006c44 <_UG_PutChar+0x258>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	7ddb      	ldrb	r3, [r3, #23]
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	887b      	ldrh	r3, [r7, #2]
 8006aac:	4413      	add	r3, r2
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	b21b      	sxth	r3, r3
 8006ab6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8006aba:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8006abe:	4622      	mov	r2, r4
 8006ac0:	47a8      	blx	r5
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8006ac6:	4b5f      	ldr	r3, [pc, #380]	; (8006c44 <_UG_PutChar+0x258>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	7d1b      	ldrb	r3, [r3, #20]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f040 8171 	bne.w	8006db4 <_UG_PutChar+0x3c8>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	853b      	strh	r3, [r7, #40]	; 0x28
 8006ad6:	e0ec      	b.n	8006cb2 <_UG_PutChar+0x2c6>
     {
       c=0;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8006adc:	2300      	movs	r3, #0
 8006ade:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006ae0:	e0df      	b.n	8006ca2 <_UG_PutChar+0x2b6>
       {
         b = *data++;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	60ba      	str	r2, [r7, #8]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8006aec:	2300      	movs	r3, #0
 8006aee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006af0:	e0ca      	b.n	8006c88 <_UG_PutChar+0x29c>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8006af2:	7f7b      	ldrb	r3, [r7, #29]
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d033      	beq.n	8006b64 <_UG_PutChar+0x178>
           {
             if(driver)
 8006afc:	7dbb      	ldrb	r3, [r7, #22]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d01f      	beq.n	8006b42 <_UG_PutChar+0x156>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8006b02:	8c3b      	ldrh	r3, [r7, #32]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <_UG_PutChar+0x132>
 8006b08:	7dfb      	ldrb	r3, [r7, #23]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d107      	bne.n	8006b1e <_UG_PutChar+0x132>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8006b0e:	8c3a      	ldrh	r2, [r7, #32]
 8006b10:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	4610      	mov	r0, r2
 8006b18:	4798      	blx	r3
                 bpixels=0;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8006b1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10a      	bne.n	8006b3a <_UG_PutChar+0x14e>
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d007      	beq.n	8006b3a <_UG_PutChar+0x14e>
               {
                 x0=x+c;
 8006b2a:	88ba      	ldrh	r2, [r7, #4]
 8006b2c:	8bfb      	ldrh	r3, [r7, #30]
 8006b2e:	4413      	add	r3, r2
 8006b30:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 8006b32:	887a      	ldrh	r2, [r7, #2]
 8006b34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b36:	4413      	add	r3, r2
 8006b38:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8006b3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006b40:	e096      	b.n	8006c70 <_UG_PutChar+0x284>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8006b42:	4b40      	ldr	r3, [pc, #256]	; (8006c44 <_UG_PutChar+0x258>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	88b9      	ldrh	r1, [r7, #4]
 8006b4c:	8bfa      	ldrh	r2, [r7, #30]
 8006b4e:	440a      	add	r2, r1
 8006b50:	b292      	uxth	r2, r2
 8006b52:	b210      	sxth	r0, r2
 8006b54:	8879      	ldrh	r1, [r7, #2]
 8006b56:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006b58:	440a      	add	r2, r1
 8006b5a:	b292      	uxth	r2, r2
 8006b5c:	b211      	sxth	r1, r2
 8006b5e:	883a      	ldrh	r2, [r7, #0]
 8006b60:	4798      	blx	r3
 8006b62:	e085      	b.n	8006c70 <_UG_PutChar+0x284>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8006b64:	7dbb      	ldrb	r3, [r7, #22]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d06e      	beq.n	8006c48 <_UG_PutChar+0x25c>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8006b6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d064      	beq.n	8006c3a <_UG_PutChar+0x24e>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d15e      	bne.n	8006c34 <_UG_PutChar+0x248>
                 {
                   push_pixels(fpixels,fc);
 8006b76:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006b78:	8839      	ldrh	r1, [r7, #0]
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	4798      	blx	r3
                   fpixels=0;
 8006b80:	2300      	movs	r3, #0
 8006b82:	847b      	strh	r3, [r7, #34]	; 0x22
 8006b84:	e059      	b.n	8006c3a <_UG_PutChar+0x24e>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8006b86:	88ba      	ldrh	r2, [r7, #4]
 8006b88:	8abb      	ldrh	r3, [r7, #20]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8006b94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d003      	beq.n	8006ba6 <_UG_PutChar+0x1ba>
 8006b9e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006ba0:	89fb      	ldrh	r3, [r7, #14]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d224      	bcs.n	8006bf0 <_UG_PutChar+0x204>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8006ba6:	4b27      	ldr	r3, [pc, #156]	; (8006c44 <_UG_PutChar+0x258>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bac:	461d      	mov	r5, r3
 8006bae:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006bb2:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006bb6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006bb8:	89fb      	ldrh	r3, [r7, #14]
 8006bba:	4413      	add	r3, r2
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	b21c      	sxth	r4, r3
 8006bc4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006bc6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006bca:	fb92 f3f3 	sdiv	r3, r2, r3
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006bd2:	4413      	add	r3, r2
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	b21b      	sxth	r3, r3
 8006bd8:	4622      	mov	r2, r4
 8006bda:	47a8      	blx	r5
 8006bdc:	4603      	mov	r3, r0
 8006bde:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8006be0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006be2:	8839      	ldrh	r1, [r7, #0]
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	4610      	mov	r0, r2
 8006be8:	4798      	blx	r3
                       fpixels=0;
 8006bea:	2300      	movs	r3, #0
 8006bec:	847b      	strh	r3, [r7, #34]	; 0x22
 8006bee:	e021      	b.n	8006c34 <_UG_PutChar+0x248>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8006bf0:	4b14      	ldr	r3, [pc, #80]	; (8006c44 <_UG_PutChar+0x258>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf6:	461c      	mov	r4, r3
 8006bf8:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006bfc:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006c00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006c02:	89fb      	ldrh	r3, [r7, #14]
 8006c04:	4413      	add	r3, r2
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	b21a      	sxth	r2, r3
 8006c0e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006c12:	47a0      	blx	r4
 8006c14:	4603      	mov	r3, r0
 8006c16:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8006c18:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006c1a:	8839      	ldrh	r1, [r7, #0]
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	4610      	mov	r0, r2
 8006c20:	4798      	blx	r3
                       fpixels -= width;
 8006c22:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006c24:	89fb      	ldrh	r3, [r7, #14]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 8006c2a:	88bb      	ldrh	r3, [r7, #4]
 8006c2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 8006c2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c30:	3301      	adds	r3, #1
 8006c32:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 8006c34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1a5      	bne.n	8006b86 <_UG_PutChar+0x19a>
                     }
                   }
                 }
               }
               bpixels++;
 8006c3a:	8c3b      	ldrh	r3, [r7, #32]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	843b      	strh	r3, [r7, #32]
 8006c40:	e016      	b.n	8006c70 <_UG_PutChar+0x284>
 8006c42:	bf00      	nop
 8006c44:	200004f4 	.word	0x200004f4
             }
             else if(!trans)                           // Not accelerated output
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d110      	bne.n	8006c70 <_UG_PutChar+0x284>
             {
               gui->device->pset(x+c,y+j,bc);
 8006c4e:	4b94      	ldr	r3, [pc, #592]	; (8006ea0 <_UG_PutChar+0x4b4>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	88b9      	ldrh	r1, [r7, #4]
 8006c58:	8bfa      	ldrh	r2, [r7, #30]
 8006c5a:	440a      	add	r2, r1
 8006c5c:	b292      	uxth	r2, r2
 8006c5e:	b210      	sxth	r0, r2
 8006c60:	8879      	ldrh	r1, [r7, #2]
 8006c62:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006c64:	440a      	add	r2, r1
 8006c66:	b292      	uxth	r2, r2
 8006c68:	b211      	sxth	r1, r2
 8006c6a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006c6e:	4798      	blx	r3
             }
           }
           b >>= 1;
 8006c70:	7f7b      	ldrb	r3, [r7, #29]
 8006c72:	085b      	lsrs	r3, r3, #1
 8006c74:	777b      	strb	r3, [r7, #29]
           c++;
 8006c76:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8006c82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c84:	3301      	adds	r3, #1
 8006c86:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006c88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c8a:	2b07      	cmp	r3, #7
 8006c8c:	d806      	bhi.n	8006c9c <_UG_PutChar+0x2b0>
 8006c8e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8006c92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	f6ff af2b 	blt.w	8006af2 <_UG_PutChar+0x106>
       for( i=0;i<bn;i++ )
 8006c9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006ca2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006ca4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	f4ff af1b 	bcc.w	8006ae2 <_UG_PutChar+0xf6>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006cac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006cae:	3301      	adds	r3, #1
 8006cb0:	853b      	strh	r3, [r7, #40]	; 0x28
 8006cb2:	4b7b      	ldr	r3, [pc, #492]	; (8006ea0 <_UG_PutChar+0x4b4>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	7ddb      	ldrb	r3, [r3, #23]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	f4ff af0b 	bcc.w	8006ad8 <_UG_PutChar+0xec>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8006cc2:	7dbb      	ldrb	r3, [r7, #22]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 80e4 	beq.w	8006e92 <_UG_PutChar+0x4a6>
       if(bpixels && !trans)
 8006cca:	8c3b      	ldrh	r3, [r7, #32]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d009      	beq.n	8006ce4 <_UG_PutChar+0x2f8>
 8006cd0:	7dfb      	ldrb	r3, [r7, #23]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d106      	bne.n	8006ce4 <_UG_PutChar+0x2f8>
       {
         push_pixels(bpixels,bc);
 8006cd6:	8c3a      	ldrh	r2, [r7, #32]
 8006cd8:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	4610      	mov	r0, r2
 8006ce0:	4798      	blx	r3
 8006ce2:	e0d6      	b.n	8006e92 <_UG_PutChar+0x4a6>
       }
       else if(fpixels)
 8006ce4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 80d3 	beq.w	8006e92 <_UG_PutChar+0x4a6>
       {
         if(!trans)
 8006cec:	7dfb      	ldrb	r3, [r7, #23]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d15c      	bne.n	8006dac <_UG_PutChar+0x3c0>
         {
           push_pixels(fpixels,fc);
 8006cf2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006cf4:	8839      	ldrh	r1, [r7, #0]
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	4798      	blx	r3
 8006cfc:	e0c9      	b.n	8006e92 <_UG_PutChar+0x4a6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8006cfe:	88ba      	ldrh	r2, [r7, #4]
 8006d00:	8abb      	ldrh	r3, [r7, #20]
 8006d02:	4413      	add	r3, r2
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 8006d0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006d0e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d003      	beq.n	8006d1e <_UG_PutChar+0x332>
 8006d16:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006d18:	8a3b      	ldrh	r3, [r7, #16]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d224      	bcs.n	8006d68 <_UG_PutChar+0x37c>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8006d1e:	4b60      	ldr	r3, [pc, #384]	; (8006ea0 <_UG_PutChar+0x4b4>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d24:	461d      	mov	r5, r3
 8006d26:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006d2a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006d2e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006d30:	8a3b      	ldrh	r3, [r7, #16]
 8006d32:	4413      	add	r3, r2
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	3b01      	subs	r3, #1
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	b21c      	sxth	r4, r3
 8006d3c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006d3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006d42:	fb92 f3f3 	sdiv	r3, r2, r3
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d4a:	4413      	add	r3, r2
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	b21b      	sxth	r3, r3
 8006d50:	4622      	mov	r2, r4
 8006d52:	47a8      	blx	r5
 8006d54:	4603      	mov	r3, r0
 8006d56:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8006d58:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006d5a:	8839      	ldrh	r1, [r7, #0]
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	4610      	mov	r0, r2
 8006d60:	4798      	blx	r3
               fpixels=0;
 8006d62:	2300      	movs	r3, #0
 8006d64:	847b      	strh	r3, [r7, #34]	; 0x22
 8006d66:	e021      	b.n	8006dac <_UG_PutChar+0x3c0>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8006d68:	4b4d      	ldr	r3, [pc, #308]	; (8006ea0 <_UG_PutChar+0x4b4>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d6e:	461c      	mov	r4, r3
 8006d70:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006d74:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006d78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006d7a:	8a3b      	ldrh	r3, [r7, #16]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	3b01      	subs	r3, #1
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	b21a      	sxth	r2, r3
 8006d86:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006d8a:	47a0      	blx	r4
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8006d90:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006d92:	8839      	ldrh	r1, [r7, #0]
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	4610      	mov	r0, r2
 8006d98:	4798      	blx	r3
               fpixels -= width;
 8006d9a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006d9c:	8a3b      	ldrh	r3, [r7, #16]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 8006da2:	88bb      	ldrh	r3, [r7, #4]
 8006da4:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 8006da6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006da8:	3301      	adds	r3, #1
 8006daa:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 8006dac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1a5      	bne.n	8006cfe <_UG_PutChar+0x312>
 8006db2:	e06e      	b.n	8006e92 <_UG_PutChar+0x4a6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8006db4:	4b3a      	ldr	r3, [pc, #232]	; (8006ea0 <_UG_PutChar+0x4b4>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	7d1b      	ldrb	r3, [r3, #20]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d169      	bne.n	8006e92 <_UG_PutChar+0x4a6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	853b      	strh	r3, [r7, #40]	; 0x28
 8006dc2:	e05f      	b.n	8006e84 <_UG_PutChar+0x498>
     {
       for( i=0;i<actual_char_width;i++ )
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006dc8:	e04a      	b.n	8006e60 <_UG_PutChar+0x474>
       {
         b = *data++;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	1c5a      	adds	r2, r3, #1
 8006dce:	60ba      	str	r2, [r7, #8]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8006dd4:	883b      	ldrh	r3, [r7, #0]
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	7f7a      	ldrb	r2, [r7, #29]
 8006dda:	fb03 f202 	mul.w	r2, r3, r2
 8006dde:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	7f79      	ldrb	r1, [r7, #29]
 8006de6:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8006dea:	fb01 f303 	mul.w	r3, r1, r3
 8006dee:	4413      	add	r3, r2
 8006df0:	121b      	asrs	r3, r3, #8
 8006df2:	b21b      	sxth	r3, r3
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8006df8:	883b      	ldrh	r3, [r7, #0]
 8006dfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006dfe:	7f79      	ldrb	r1, [r7, #29]
 8006e00:	fb03 f101 	mul.w	r1, r3, r1
 8006e04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006e0c:	7f78      	ldrb	r0, [r7, #29]
 8006e0e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8006e12:	fb00 f303 	mul.w	r3, r0, r3
 8006e16:	440b      	add	r3, r1
 8006e18:	121b      	asrs	r3, r3, #8
 8006e1a:	b21b      	sxth	r3, r3
 8006e1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006e20:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8006e22:	4313      	orrs	r3, r2
 8006e24:	b21b      	sxth	r3, r3
 8006e26:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8006e28:	7dbb      	ldrb	r3, [r7, #22]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d005      	beq.n	8006e3a <_UG_PutChar+0x44e>
         {
           push_pixels(1,color);                                                          // Accelerated output
 8006e2e:	8a7a      	ldrh	r2, [r7, #18]
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	4611      	mov	r1, r2
 8006e34:	2001      	movs	r0, #1
 8006e36:	4798      	blx	r3
 8006e38:	e00f      	b.n	8006e5a <_UG_PutChar+0x46e>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8006e3a:	4b19      	ldr	r3, [pc, #100]	; (8006ea0 <_UG_PutChar+0x4b4>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	88b9      	ldrh	r1, [r7, #4]
 8006e44:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006e46:	440a      	add	r2, r1
 8006e48:	b292      	uxth	r2, r2
 8006e4a:	b210      	sxth	r0, r2
 8006e4c:	8879      	ldrh	r1, [r7, #2]
 8006e4e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006e50:	440a      	add	r2, r1
 8006e52:	b292      	uxth	r2, r2
 8006e54:	b211      	sxth	r1, r2
 8006e56:	8a7a      	ldrh	r2, [r7, #18]
 8006e58:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8006e5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006e60:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006e62:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	dbaf      	blt.n	8006dca <_UG_PutChar+0x3de>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	4a0c      	ldr	r2, [pc, #48]	; (8006ea0 <_UG_PutChar+0x4b4>)
 8006e6e:	6812      	ldr	r2, [r2, #0]
 8006e70:	7d92      	ldrb	r2, [r2, #22]
 8006e72:	4611      	mov	r1, r2
 8006e74:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006e78:	1a8a      	subs	r2, r1, r2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006e7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006e80:	3301      	adds	r3, #1
 8006e82:	853b      	strh	r3, [r7, #40]	; 0x28
 8006e84:	4b06      	ldr	r3, [pc, #24]	; (8006ea0 <_UG_PutChar+0x4b4>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	7ddb      	ldrb	r3, [r3, #23]
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d398      	bcc.n	8006dc4 <_UG_PutChar+0x3d8>
     }
   }
   #endif
   return (actual_char_width);
 8006e92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3730      	adds	r7, #48	; 0x30
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	200004f4 	.word	0x200004f4

08006ea4 <_UG_UpdateObjects>:
   }
}
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	82fb      	strh	r3, [r7, #22]
 8006eb6:	e01f      	b.n	8006ef8 <_UG_UpdateObjects+0x54>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	8afb      	ldrh	r3, [r7, #22]
 8006ebe:	015b      	lsls	r3, r3, #5
 8006ec0:	4413      	add	r3, r2
 8006ec2:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10e      	bne.n	8006ef2 <_UG_UpdateObjects+0x4e>
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
 8006ed6:	f003 0302 	and.w	r3, r3, #2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d009      	beq.n	8006ef2 <_UG_UpdateObjects+0x4e>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
 8006ee0:	f003 0320 	and.w	r3, r3, #32
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d004      	beq.n	8006ef2 <_UG_UpdateObjects+0x4e>
         {
            obj->update(wnd,obj);
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	6939      	ldr	r1, [r7, #16]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8006ef2:	8afb      	ldrh	r3, [r7, #22]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	82fb      	strh	r3, [r7, #22]
 8006ef8:	8afa      	ldrh	r2, [r7, #22]
 8006efa:	8abb      	ldrh	r3, [r7, #20]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d3db      	bcc.n	8006eb8 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8006f00:	bf00      	nop
 8006f02:	bf00      	nop
 8006f04:	3718      	adds	r7, #24
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
	...

08006f0c <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8006f14:	4b22      	ldr	r3, [pc, #136]	; (8006fa0 <_UG_HandleEvents+0x94>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8006f1a:	4b21      	ldr	r3, [pc, #132]	; (8006fa0 <_UG_HandleEvents+0x94>)
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8006f26:	2300      	movs	r3, #0
 8006f28:	82fb      	strh	r3, [r7, #22]
 8006f2a:	e02f      	b.n	8006f8c <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	8afb      	ldrh	r3, [r7, #22]
 8006f32:	015b      	lsls	r3, r3, #5
 8006f34:	4413      	add	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d11e      	bne.n	8006f86 <_UG_HandleEvents+0x7a>
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d019      	beq.n	8006f86 <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	7e9b      	ldrb	r3, [r3, #26]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d015      	beq.n	8006f86 <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 8006f5a:	4a11      	ldr	r2, [pc, #68]	; (8006fa0 <_UG_HandleEvents+0x94>)
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	7e1a      	ldrb	r2, [r3, #24]
 8006f64:	4b0e      	ldr	r3, [pc, #56]	; (8006fa0 <_UG_HandleEvents+0x94>)
 8006f66:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	7e5a      	ldrb	r2, [r3, #25]
 8006f6c:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <_UG_HandleEvents+0x94>)
 8006f6e:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	7e9a      	ldrb	r2, [r3, #26]
 8006f74:	4b0a      	ldr	r3, [pc, #40]	; (8006fa0 <_UG_HandleEvents+0x94>)
 8006f76:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7c:	4808      	ldr	r0, [pc, #32]	; (8006fa0 <_UG_HandleEvents+0x94>)
 8006f7e:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	2200      	movs	r2, #0
 8006f84:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8006f86:	8afb      	ldrh	r3, [r7, #22]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	82fb      	strh	r3, [r7, #22]
 8006f8c:	8afa      	ldrh	r2, [r7, #22]
 8006f8e:	8abb      	ldrh	r3, [r7, #20]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d3cb      	bcc.n	8006f2c <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20000508 	.word	0x20000508

08006fa4 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8006fa4:	b590      	push	{r4, r7, lr}
 8006fa6:	b08f      	sub	sp, #60	; 0x3c
 8006fa8:	af02      	add	r7, sp, #8
 8006faa:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 8102 	beq.w	80071ba <_UG_PutText+0x216>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 80fd 	beq.w	80071ba <_UG_PutText+0x216>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	89db      	ldrh	r3, [r3, #14]
 8006fc4:	837b      	strh	r3, [r7, #26]
   UG_S16 ys=txt->a.ys;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	895b      	ldrh	r3, [r3, #10]
 8006fca:	833b      	strh	r3, [r7, #24]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	3302      	adds	r3, #2
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	82fb      	strh	r3, [r7, #22]

   if ( (ye - ys) < char_height ){
 8006fd6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006fda:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006fde:	1ad2      	subs	r2, r2, r3
 8006fe0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	f2c0 80ea 	blt.w	80071be <_UG_PutText+0x21a>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	891b      	ldrh	r3, [r3, #8]
 8006fee:	82bb      	strh	r3, [r7, #20]
   UG_S16 xe=txt->a.xe;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	899b      	ldrh	r3, [r3, #12]
 8006ff4:	827b      	strh	r3, [r7, #18]
   UG_U8  align=txt->align;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	7d1b      	ldrb	r3, [r3, #20]
 8006ffa:	747b      	strb	r3, [r7, #17]
   UG_S16 char_h_space=txt->h_space;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	8adb      	ldrh	r3, [r3, #22]
 8007000:	81fb      	strh	r3, [r7, #14]
   UG_S16 char_v_space=txt->v_space;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	8b1b      	ldrh	r3, [r3, #24]
 8007006:	81bb      	strh	r3, [r7, #12]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	623b      	str	r3, [r7, #32]
   char* c = str;
 800700e:	6a3b      	ldr	r3, [r7, #32]
 8007010:	61fb      	str	r3, [r7, #28]

   _UG_FontSelect(txt->font);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	4618      	mov	r0, r3
 8007018:	f7ff fc6a 	bl	80068f0 <_UG_FontSelect>

   rc=1;
 800701c:	2301      	movs	r3, #1
 800701e:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	61fb      	str	r3, [r7, #28]
     }
     else{
       chr = *c++;
     }
     #else
     chr = *c++;
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	1c5a      	adds	r2, r3, #1
 8007028:	61fa      	str	r2, [r7, #28]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	72fb      	strb	r3, [r7, #11]
     #endif
     if(!chr) break;
 800702e:	7afb      	ldrb	r3, [r7, #11]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d006      	beq.n	8007042 <_UG_PutText+0x9e>
     if ( chr == '\n' ) rc++;
 8007034:	7afb      	ldrb	r3, [r7, #11]
 8007036:	2b0a      	cmp	r3, #10
 8007038:	d1f4      	bne.n	8007024 <_UG_PutText+0x80>
 800703a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800703c:	3301      	adds	r3, #1
 800703e:	85bb      	strh	r3, [r7, #44]	; 0x2c
     chr = *c++;
 8007040:	e7f0      	b.n	8007024 <_UG_PutText+0x80>
     if(!chr) break;
 8007042:	bf00      	nop
   }

   yp = 0;
 8007044:	2300      	movs	r3, #0
 8007046:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8007048:	7c7b      	ldrb	r3, [r7, #17]
 800704a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800704e:	2b00      	cmp	r3, #0
 8007050:	d01f      	beq.n	8007092 <_UG_PutText+0xee>
   {
      yp = ye - ys + 1;
 8007052:	8b7a      	ldrh	r2, [r7, #26]
 8007054:	8b3b      	ldrh	r3, [r7, #24]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	b29b      	uxth	r3, r3
 800705a:	3301      	adds	r3, #1
 800705c:	b29b      	uxth	r3, r3
 800705e:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8007060:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007062:	8afb      	ldrh	r3, [r7, #22]
 8007064:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8007066:	fb11 f303 	smulbb	r3, r1, r3
 800706a:	b29b      	uxth	r3, r3
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	b29b      	uxth	r3, r3
 8007070:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8007072:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007074:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007076:	3b01      	subs	r3, #1
 8007078:	b299      	uxth	r1, r3
 800707a:	89bb      	ldrh	r3, [r7, #12]
 800707c:	fb11 f303 	smulbb	r3, r1, r3
 8007080:	b29b      	uxth	r3, r3
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	b29b      	uxth	r3, r3
 8007086:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8007088:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800708c:	2b00      	cmp	r3, #0
 800708e:	f2c0 8098 	blt.w	80071c2 <_UG_PutText+0x21e>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8007092:	7c7b      	ldrb	r3, [r7, #17]
 8007094:	f003 0310 	and.w	r3, r3, #16
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <_UG_PutText+0x100>
 800709c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80070a0:	105b      	asrs	r3, r3, #1
 80070a2:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 80070a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80070a6:	8b3b      	ldrh	r3, [r7, #24]
 80070a8:	4413      	add	r3, r2
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 80070ae:	2300      	movs	r3, #0
 80070b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	61fb      	str	r3, [r7, #28]
      wl = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	857b      	strh	r3, [r7, #42]	; 0x2a
        }
        else{
          chr = *c++;
        }
        #else
        chr = *c++;
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	1c5a      	adds	r2, r3, #1
 80070be:	61fa      	str	r2, [r7, #28]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	72fb      	strb	r3, [r7, #11]
        #endif
        if( chr == 0 || chr == '\n'){
 80070c4:	7afb      	ldrb	r3, [r7, #11]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d01b      	beq.n	8007102 <_UG_PutText+0x15e>
 80070ca:	7afb      	ldrb	r3, [r7, #11]
 80070cc:	2b0a      	cmp	r3, #10
 80070ce:	d018      	beq.n	8007102 <_UG_PutText+0x15e>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 80070d0:	7afb      	ldrb	r3, [r7, #11]
 80070d2:	2100      	movs	r1, #0
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7ff fabb 	bl	8006650 <_UG_GetCharData>
 80070da:	4603      	mov	r3, r0
 80070dc:	813b      	strh	r3, [r7, #8]
         if (w == -1){continue;}
 80070de:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80070e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070e6:	d00a      	beq.n	80070fe <_UG_PutText+0x15a>
         sl++;
 80070e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80070ea:	3301      	adds	r3, #1
 80070ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 80070ee:	893a      	ldrh	r2, [r7, #8]
 80070f0:	89fb      	ldrh	r3, [r7, #14]
 80070f2:	4413      	add	r3, r2
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80070f8:	4413      	add	r3, r2
 80070fa:	857b      	strh	r3, [r7, #42]	; 0x2a
 80070fc:	e7dd      	b.n	80070ba <_UG_PutText+0x116>
         if (w == -1){continue;}
 80070fe:	bf00      	nop
        chr = *c++;
 8007100:	e7db      	b.n	80070ba <_UG_PutText+0x116>
      }
      wl -= char_h_space;
 8007102:	89fb      	ldrh	r3, [r7, #14]
 8007104:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 800710a:	8a7a      	ldrh	r2, [r7, #18]
 800710c:	8abb      	ldrh	r3, [r7, #20]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	b29b      	uxth	r3, r3
 8007112:	3301      	adds	r3, #1
 8007114:	b29b      	uxth	r3, r3
 8007116:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 8007118:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800711a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	b29b      	uxth	r3, r3
 8007120:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 8007122:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8007126:	2b00      	cmp	r3, #0
 8007128:	db4d      	blt.n	80071c6 <_UG_PutText+0x222>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 800712a:	7c7b      	ldrb	r3, [r7, #17]
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	2b00      	cmp	r3, #0
 8007132:	d002      	beq.n	800713a <_UG_PutText+0x196>
 8007134:	2300      	movs	r3, #0
 8007136:	853b      	strh	r3, [r7, #40]	; 0x28
 8007138:	e008      	b.n	800714c <_UG_PutText+0x1a8>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 800713a:	7c7b      	ldrb	r3, [r7, #17]
 800713c:	f003 0302 	and.w	r3, r3, #2
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <_UG_PutText+0x1a8>
 8007144:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8007148:	105b      	asrs	r3, r3, #1
 800714a:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 800714c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800714e:	8abb      	ldrh	r3, [r7, #20]
 8007150:	4413      	add	r3, r2
 8007152:	b29b      	uxth	r3, r3
 8007154:	853b      	strh	r3, [r7, #40]	; 0x28
         }
         else{
           chr = *str++;
         }
         #else
         chr = *str++;
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	623a      	str	r2, [r7, #32]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	72fb      	strb	r3, [r7, #11]
         #endif
         if ( chr == 0 ){
 8007160:	7afb      	ldrb	r3, [r7, #11]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d031      	beq.n	80071ca <_UG_PutText+0x226>
           return;
         }
         else if(chr=='\n'){
 8007166:	7afb      	ldrb	r3, [r7, #11]
 8007168:	2b0a      	cmp	r3, #10
 800716a:	d01c      	beq.n	80071a6 <_UG_PutText+0x202>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	8a1c      	ldrh	r4, [r3, #16]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	8a5b      	ldrh	r3, [r3, #18]
 8007174:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8007178:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 800717c:	7af8      	ldrb	r0, [r7, #11]
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	4623      	mov	r3, r4
 8007182:	f7ff fc33 	bl	80069ec <_UG_PutChar>
 8007186:	4603      	mov	r3, r0
 8007188:	813b      	strh	r3, [r7, #8]
         if(w!=-1)
 800718a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800718e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007192:	d0e0      	beq.n	8007156 <_UG_PutText+0x1b2>
           xp += w + char_h_space;
 8007194:	893a      	ldrh	r2, [r7, #8]
 8007196:	89fb      	ldrh	r3, [r7, #14]
 8007198:	4413      	add	r3, r2
 800719a:	b29a      	uxth	r2, r3
 800719c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800719e:	4413      	add	r3, r2
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	853b      	strh	r3, [r7, #40]	; 0x28
         chr = *str++;
 80071a4:	e7d7      	b.n	8007156 <_UG_PutText+0x1b2>
           break;
 80071a6:	bf00      	nop
      }
      yp += char_height + char_v_space;
 80071a8:	8afa      	ldrh	r2, [r7, #22]
 80071aa:	89bb      	ldrh	r3, [r7, #12]
 80071ac:	4413      	add	r3, r2
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80071b2:	4413      	add	r3, r2
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 80071b8:	e779      	b.n	80070ae <_UG_PutText+0x10a>
     return;
 80071ba:	bf00      	nop
 80071bc:	e006      	b.n	80071cc <_UG_PutText+0x228>
     return;
 80071be:	bf00      	nop
 80071c0:	e004      	b.n	80071cc <_UG_PutText+0x228>
        return;
 80071c2:	bf00      	nop
 80071c4:	e002      	b.n	80071cc <_UG_PutText+0x228>
      if ( xp < 0 ) break;
 80071c6:	bf00      	nop
 80071c8:	e000      	b.n	80071cc <_UG_PutText+0x228>
           return;
 80071ca:	bf00      	nop
   }
}
 80071cc:	3734      	adds	r7, #52	; 0x34
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd90      	pop	{r4, r7, pc}

080071d2 <_UG_SearchObject>:

UG_OBJECT* _UG_SearchObject( UG_WINDOW* wnd, UG_U8 type, UG_U8 id )
{
 80071d2:	b480      	push	{r7}
 80071d4:	b085      	sub	sp, #20
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	460b      	mov	r3, r1
 80071dc:	70fb      	strb	r3, [r7, #3]
 80071de:	4613      	mov	r3, r2
 80071e0:	70bb      	strb	r3, [r7, #2]
   UG_U8 i;
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	60bb      	str	r3, [r7, #8]

   for(i=0;i<wnd->objcnt;i++)
 80071e8:	2300      	movs	r3, #0
 80071ea:	73fb      	strb	r3, [r7, #15]
 80071ec:	e020      	b.n	8007230 <_UG_SearchObject+0x5e>
   {
      obj = (UG_OBJECT*)(&wnd->objlst[i]);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
 80071f4:	015b      	lsls	r3, r3, #5
 80071f6:	4413      	add	r3, r2
 80071f8:	60bb      	str	r3, [r7, #8]
      if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d111      	bne.n	800722a <_UG_SearchObject+0x58>
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00b      	beq.n	800722a <_UG_SearchObject+0x58>
      {
         if ( (obj->type == type) && (obj->id == id) )
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	7e1b      	ldrb	r3, [r3, #24]
 8007216:	78fa      	ldrb	r2, [r7, #3]
 8007218:	429a      	cmp	r2, r3
 800721a:	d106      	bne.n	800722a <_UG_SearchObject+0x58>
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	7e5b      	ldrb	r3, [r3, #25]
 8007220:	78ba      	ldrb	r2, [r7, #2]
 8007222:	429a      	cmp	r2, r3
 8007224:	d101      	bne.n	800722a <_UG_SearchObject+0x58>
         {
            /* Requested object found! */
            return obj;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	e008      	b.n	800723c <_UG_SearchObject+0x6a>
   for(i=0;i<wnd->objcnt;i++)
 800722a:	7bfb      	ldrb	r3, [r7, #15]
 800722c:	3301      	adds	r3, #1
 800722e:	73fb      	strb	r3, [r7, #15]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	7bfa      	ldrb	r2, [r7, #15]
 8007236:	429a      	cmp	r2, r3
 8007238:	d3d9      	bcc.n	80071ee <_UG_SearchObject+0x1c>
         }
      }
   }
   return NULL;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <_UG_DrawObjectFrame>:

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8007248:	b5b0      	push	{r4, r5, r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af02      	add	r7, sp, #8
 800724e:	4604      	mov	r4, r0
 8007250:	4608      	mov	r0, r1
 8007252:	4611      	mov	r1, r2
 8007254:	461a      	mov	r2, r3
 8007256:	4623      	mov	r3, r4
 8007258:	80fb      	strh	r3, [r7, #6]
 800725a:	4603      	mov	r3, r0
 800725c:	80bb      	strh	r3, [r7, #4]
 800725e:	460b      	mov	r3, r1
 8007260:	807b      	strh	r3, [r7, #2]
 8007262:	4613      	mov	r3, r2
 8007264:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8007266:	887b      	ldrh	r3, [r7, #2]
 8007268:	3b01      	subs	r3, #1
 800726a:	b29b      	uxth	r3, r3
 800726c:	b21c      	sxth	r4, r3
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	1c9a      	adds	r2, r3, #2
 8007272:	61ba      	str	r2, [r7, #24]
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800727a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800727e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	4613      	mov	r3, r2
 8007286:	4622      	mov	r2, r4
 8007288:	f7fe fe50 	bl	8005f2c <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 800728c:	88bb      	ldrh	r3, [r7, #4]
 800728e:	3301      	adds	r3, #1
 8007290:	b29b      	uxth	r3, r3
 8007292:	b219      	sxth	r1, r3
 8007294:	883b      	ldrh	r3, [r7, #0]
 8007296:	3b01      	subs	r3, #1
 8007298:	b29b      	uxth	r3, r3
 800729a:	b21c      	sxth	r4, r3
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	1c9a      	adds	r2, r3, #2
 80072a0:	61ba      	str	r2, [r7, #24]
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80072a8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	4623      	mov	r3, r4
 80072b0:	f7fe fe3c 	bl	8005f2c <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	1c9a      	adds	r2, r3, #2
 80072b8:	61ba      	str	r2, [r7, #24]
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	f9b7 4000 	ldrsh.w	r4, [r7]
 80072c0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80072c4:	f9b7 1000 	ldrsh.w	r1, [r7]
 80072c8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	4623      	mov	r3, r4
 80072d0:	f7fe fe2c 	bl	8005f2c <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 80072d4:	883b      	ldrh	r3, [r7, #0]
 80072d6:	3b01      	subs	r3, #1
 80072d8:	b29b      	uxth	r3, r3
 80072da:	b21c      	sxth	r4, r3
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	1c9a      	adds	r2, r3, #2
 80072e0:	61ba      	str	r2, [r7, #24]
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80072e8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80072ec:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	4623      	mov	r3, r4
 80072f4:	f7fe fe1a 	bl	8005f2c <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 80072f8:	88fb      	ldrh	r3, [r7, #6]
 80072fa:	3301      	adds	r3, #1
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	b218      	sxth	r0, r3
 8007300:	88bb      	ldrh	r3, [r7, #4]
 8007302:	3301      	adds	r3, #1
 8007304:	b29b      	uxth	r3, r3
 8007306:	b219      	sxth	r1, r3
 8007308:	887b      	ldrh	r3, [r7, #2]
 800730a:	3b02      	subs	r3, #2
 800730c:	b29b      	uxth	r3, r3
 800730e:	b21c      	sxth	r4, r3
 8007310:	88bb      	ldrh	r3, [r7, #4]
 8007312:	3301      	adds	r3, #1
 8007314:	b29b      	uxth	r3, r3
 8007316:	b21d      	sxth	r5, r3
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	1c9a      	adds	r2, r3, #2
 800731c:	61ba      	str	r2, [r7, #24]
 800731e:	881b      	ldrh	r3, [r3, #0]
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	462b      	mov	r3, r5
 8007324:	4622      	mov	r2, r4
 8007326:	f7fe fe01 	bl	8005f2c <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 800732a:	88fb      	ldrh	r3, [r7, #6]
 800732c:	3301      	adds	r3, #1
 800732e:	b29b      	uxth	r3, r3
 8007330:	b218      	sxth	r0, r3
 8007332:	88bb      	ldrh	r3, [r7, #4]
 8007334:	3302      	adds	r3, #2
 8007336:	b29b      	uxth	r3, r3
 8007338:	b219      	sxth	r1, r3
 800733a:	88fb      	ldrh	r3, [r7, #6]
 800733c:	3301      	adds	r3, #1
 800733e:	b29b      	uxth	r3, r3
 8007340:	b21c      	sxth	r4, r3
 8007342:	883b      	ldrh	r3, [r7, #0]
 8007344:	3b02      	subs	r3, #2
 8007346:	b29b      	uxth	r3, r3
 8007348:	b21d      	sxth	r5, r3
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	1c9a      	adds	r2, r3, #2
 800734e:	61ba      	str	r2, [r7, #24]
 8007350:	881b      	ldrh	r3, [r3, #0]
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	462b      	mov	r3, r5
 8007356:	4622      	mov	r2, r4
 8007358:	f7fe fde8 	bl	8005f2c <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 800735c:	88fb      	ldrh	r3, [r7, #6]
 800735e:	3301      	adds	r3, #1
 8007360:	b29b      	uxth	r3, r3
 8007362:	b218      	sxth	r0, r3
 8007364:	883b      	ldrh	r3, [r7, #0]
 8007366:	3b01      	subs	r3, #1
 8007368:	b29b      	uxth	r3, r3
 800736a:	b219      	sxth	r1, r3
 800736c:	887b      	ldrh	r3, [r7, #2]
 800736e:	3b01      	subs	r3, #1
 8007370:	b29b      	uxth	r3, r3
 8007372:	b21c      	sxth	r4, r3
 8007374:	883b      	ldrh	r3, [r7, #0]
 8007376:	3b01      	subs	r3, #1
 8007378:	b29b      	uxth	r3, r3
 800737a:	b21d      	sxth	r5, r3
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	1c9a      	adds	r2, r3, #2
 8007380:	61ba      	str	r2, [r7, #24]
 8007382:	881b      	ldrh	r3, [r3, #0]
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	462b      	mov	r3, r5
 8007388:	4622      	mov	r2, r4
 800738a:	f7fe fdcf 	bl	8005f2c <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 800738e:	887b      	ldrh	r3, [r7, #2]
 8007390:	3b01      	subs	r3, #1
 8007392:	b29b      	uxth	r3, r3
 8007394:	b218      	sxth	r0, r3
 8007396:	88bb      	ldrh	r3, [r7, #4]
 8007398:	3301      	adds	r3, #1
 800739a:	b29b      	uxth	r3, r3
 800739c:	b219      	sxth	r1, r3
 800739e:	887b      	ldrh	r3, [r7, #2]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	b21c      	sxth	r4, r3
 80073a6:	883b      	ldrh	r3, [r7, #0]
 80073a8:	3b02      	subs	r3, #2
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	b21d      	sxth	r5, r3
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	1c9a      	adds	r2, r3, #2
 80073b2:	61ba      	str	r2, [r7, #24]
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	462b      	mov	r3, r5
 80073ba:	4622      	mov	r2, r4
 80073bc:	f7fe fdb6 	bl	8005f2c <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 80073c0:	88fb      	ldrh	r3, [r7, #6]
 80073c2:	3302      	adds	r3, #2
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	b218      	sxth	r0, r3
 80073c8:	88bb      	ldrh	r3, [r7, #4]
 80073ca:	3302      	adds	r3, #2
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	b219      	sxth	r1, r3
 80073d0:	887b      	ldrh	r3, [r7, #2]
 80073d2:	3b03      	subs	r3, #3
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	b21c      	sxth	r4, r3
 80073d8:	88bb      	ldrh	r3, [r7, #4]
 80073da:	3302      	adds	r3, #2
 80073dc:	b29b      	uxth	r3, r3
 80073de:	b21d      	sxth	r5, r3
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	1c9a      	adds	r2, r3, #2
 80073e4:	61ba      	str	r2, [r7, #24]
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	462b      	mov	r3, r5
 80073ec:	4622      	mov	r2, r4
 80073ee:	f7fe fd9d 	bl	8005f2c <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 80073f2:	88fb      	ldrh	r3, [r7, #6]
 80073f4:	3302      	adds	r3, #2
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	b218      	sxth	r0, r3
 80073fa:	88bb      	ldrh	r3, [r7, #4]
 80073fc:	3303      	adds	r3, #3
 80073fe:	b29b      	uxth	r3, r3
 8007400:	b219      	sxth	r1, r3
 8007402:	88fb      	ldrh	r3, [r7, #6]
 8007404:	3302      	adds	r3, #2
 8007406:	b29b      	uxth	r3, r3
 8007408:	b21c      	sxth	r4, r3
 800740a:	883b      	ldrh	r3, [r7, #0]
 800740c:	3b03      	subs	r3, #3
 800740e:	b29b      	uxth	r3, r3
 8007410:	b21d      	sxth	r5, r3
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	1c9a      	adds	r2, r3, #2
 8007416:	61ba      	str	r2, [r7, #24]
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	462b      	mov	r3, r5
 800741e:	4622      	mov	r2, r4
 8007420:	f7fe fd84 	bl	8005f2c <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8007424:	88fb      	ldrh	r3, [r7, #6]
 8007426:	3302      	adds	r3, #2
 8007428:	b29b      	uxth	r3, r3
 800742a:	b218      	sxth	r0, r3
 800742c:	883b      	ldrh	r3, [r7, #0]
 800742e:	3b02      	subs	r3, #2
 8007430:	b29b      	uxth	r3, r3
 8007432:	b219      	sxth	r1, r3
 8007434:	887b      	ldrh	r3, [r7, #2]
 8007436:	3b02      	subs	r3, #2
 8007438:	b29b      	uxth	r3, r3
 800743a:	b21c      	sxth	r4, r3
 800743c:	883b      	ldrh	r3, [r7, #0]
 800743e:	3b02      	subs	r3, #2
 8007440:	b29b      	uxth	r3, r3
 8007442:	b21d      	sxth	r5, r3
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	1c9a      	adds	r2, r3, #2
 8007448:	61ba      	str	r2, [r7, #24]
 800744a:	881b      	ldrh	r3, [r3, #0]
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	462b      	mov	r3, r5
 8007450:	4622      	mov	r2, r4
 8007452:	f7fe fd6b 	bl	8005f2c <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8007456:	887b      	ldrh	r3, [r7, #2]
 8007458:	3b02      	subs	r3, #2
 800745a:	b29b      	uxth	r3, r3
 800745c:	b218      	sxth	r0, r3
 800745e:	88bb      	ldrh	r3, [r7, #4]
 8007460:	3302      	adds	r3, #2
 8007462:	b29b      	uxth	r3, r3
 8007464:	b219      	sxth	r1, r3
 8007466:	887b      	ldrh	r3, [r7, #2]
 8007468:	3b02      	subs	r3, #2
 800746a:	b29b      	uxth	r3, r3
 800746c:	b21a      	sxth	r2, r3
 800746e:	883b      	ldrh	r3, [r7, #0]
 8007470:	3b03      	subs	r3, #3
 8007472:	b29b      	uxth	r3, r3
 8007474:	b21c      	sxth	r4, r3
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	4623      	mov	r3, r4
 800747e:	f7fe fd55 	bl	8005f2c <UG_DrawLine>
}
 8007482:	bf00      	nop
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bdb0      	pop	{r4, r5, r7, pc}

0800748a <_UG_GetFreeObject>:

UG_OBJECT* _UG_GetFreeObject( UG_WINDOW* wnd )
{
 800748a:	b480      	push	{r7}
 800748c:	b085      	sub	sp, #20
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
   UG_U8 i;
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	60bb      	str	r3, [r7, #8]

   for(i=0;i<wnd->objcnt;i++)
 8007498:	2300      	movs	r3, #0
 800749a:	73fb      	strb	r3, [r7, #15]
 800749c:	e016      	b.n	80074cc <_UG_GetFreeObject+0x42>
   {
      obj = (UG_OBJECT*)(&wnd->objlst[i]);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	015b      	lsls	r3, r3, #5
 80074a6:	4413      	add	r3, r2
 80074a8:	60bb      	str	r3, [r7, #8]
      if ( (obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d007      	beq.n	80074c6 <_UG_GetFreeObject+0x3c>
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	f003 0302 	and.w	r3, r3, #2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <_UG_GetFreeObject+0x3c>
      {
         /* Free object found! */
         return obj;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	e008      	b.n	80074d8 <_UG_GetFreeObject+0x4e>
   for(i=0;i<wnd->objcnt;i++)
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
 80074c8:	3301      	adds	r3, #1
 80074ca:	73fb      	strb	r3, [r7, #15]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	7bfa      	ldrb	r2, [r7, #15]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d3e3      	bcc.n	800749e <_UG_GetFreeObject+0x14>
      }
   }
   return NULL;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	4603      	mov	r3, r0
 80074ec:	6039      	str	r1, [r7, #0]
 80074ee:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80074f0:	79fb      	ldrb	r3, [r7, #7]
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	d810      	bhi.n	8007518 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 80074f6:	4b0b      	ldr	r3, [pc, #44]	; (8007524 <UG_DriverRegister+0x40>)
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	79fb      	ldrb	r3, [r7, #7]
 80074fc:	3307      	adds	r3, #7
 80074fe:	00db      	lsls	r3, r3, #3
 8007500:	4413      	add	r3, r2
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8007506:	4b07      	ldr	r3, [pc, #28]	; (8007524 <UG_DriverRegister+0x40>)
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	79fb      	ldrb	r3, [r7, #7]
 800750c:	3307      	adds	r3, #7
 800750e:	00db      	lsls	r3, r3, #3
 8007510:	4413      	add	r3, r2
 8007512:	2203      	movs	r2, #3
 8007514:	721a      	strb	r2, [r3, #8]
 8007516:	e000      	b.n	800751a <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8007518:	bf00      	nop
}
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	200004f4 	.word	0x200004f4

08007528 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 800752e:	4b5d      	ldr	r3, [pc, #372]	; (80076a4 <UG_Update+0x17c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <UG_Update+0x2c>
 800753e:	4b59      	ldr	r3, [pc, #356]	; (80076a4 <UG_Update+0x17c>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8007546:	4b57      	ldr	r3, [pc, #348]	; (80076a4 <UG_Update+0x17c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f022 0201 	bic.w	r2, r2, #1
 800754e:	b2d2      	uxtb	r2, r2
 8007550:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8007554:	4b53      	ldr	r3, [pc, #332]	; (80076a4 <UG_Update+0x17c>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	4b52      	ldr	r3, [pc, #328]	; (80076a4 <UG_Update+0x17c>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	429a      	cmp	r2, r3
 8007562:	d071      	beq.n	8007648 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8007564:	4b4f      	ldr	r3, [pc, #316]	; (80076a4 <UG_Update+0x17c>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d06c      	beq.n	8007648 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 800756e:	4b4d      	ldr	r3, [pc, #308]	; (80076a4 <UG_Update+0x17c>)
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	4b4c      	ldr	r3, [pc, #304]	; (80076a4 <UG_Update+0x17c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6892      	ldr	r2, [r2, #8]
 8007578:	60da      	str	r2, [r3, #12]
         gui->active_window = gui->next_window;
 800757a:	4b4a      	ldr	r3, [pc, #296]	; (80076a4 <UG_Update+0x17c>)
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	4b49      	ldr	r3, [pc, #292]	; (80076a4 <UG_Update+0x17c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6852      	ldr	r2, [r2, #4]
 8007584:	609a      	str	r2, [r3, #8]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8007586:	4b47      	ldr	r3, [pc, #284]	; (80076a4 <UG_Update+0x17c>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d045      	beq.n	800761c <UG_Update+0xf4>
 8007590:	4b44      	ldr	r3, [pc, #272]	; (80076a4 <UG_Update+0x17c>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	7d9b      	ldrb	r3, [r3, #22]
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d03d      	beq.n	800761c <UG_Update+0xf4>
 80075a0:	4b40      	ldr	r3, [pc, #256]	; (80076a4 <UG_Update+0x17c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	7a1b      	ldrb	r3, [r3, #8]
 80075a8:	f003 0308 	and.w	r3, r3, #8
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d035      	beq.n	800761c <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 80075b0:	4b3c      	ldr	r3, [pc, #240]	; (80076a4 <UG_Update+0x17c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80075ba:	4b3a      	ldr	r3, [pc, #232]	; (80076a4 <UG_Update+0x17c>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d123      	bne.n	8007610 <UG_Update+0xe8>
 80075c8:	4b36      	ldr	r3, [pc, #216]	; (80076a4 <UG_Update+0x17c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80075d2:	4b34      	ldr	r3, [pc, #208]	; (80076a4 <UG_Update+0x17c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d117      	bne.n	8007610 <UG_Update+0xe8>
 80075e0:	4b30      	ldr	r3, [pc, #192]	; (80076a4 <UG_Update+0x17c>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80075ea:	4b2e      	ldr	r3, [pc, #184]	; (80076a4 <UG_Update+0x17c>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d10b      	bne.n	8007610 <UG_Update+0xe8>
 80075f8:	4b2a      	ldr	r3, [pc, #168]	; (80076a4 <UG_Update+0x17c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8007602:	4b28      	ldr	r3, [pc, #160]	; (80076a4 <UG_Update+0x17c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800760c:	429a      	cmp	r2, r3
 800760e:	d005      	beq.n	800761c <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8007610:	4b24      	ldr	r3, [pc, #144]	; (80076a4 <UG_Update+0x17c>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	4618      	mov	r0, r3
 8007618:	f000 fd78 	bl	800810c <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 800761c:	4b21      	ldr	r3, [pc, #132]	; (80076a4 <UG_Update+0x17c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	7a1a      	ldrb	r2, [r3, #8]
 8007624:	4b1f      	ldr	r3, [pc, #124]	; (80076a4 <UG_Update+0x17c>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800762e:	b2d2      	uxtb	r2, r2
 8007630:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8007632:	4b1c      	ldr	r3, [pc, #112]	; (80076a4 <UG_Update+0x17c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	7a1a      	ldrb	r2, [r3, #8]
 800763a:	4b1a      	ldr	r3, [pc, #104]	; (80076a4 <UG_Update+0x17c>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8007644:	b2d2      	uxtb	r2, r2
 8007646:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8007648:	4b16      	ldr	r3, [pc, #88]	; (80076a4 <UG_Update+0x17c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d018      	beq.n	8007684 <UG_Update+0x15c>
   {
      wnd = gui->active_window;
 8007652:	4b14      	ldr	r3, [pc, #80]	; (80076a4 <UG_Update+0x17c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	7a1b      	ldrb	r3, [r3, #8]
 800765e:	f003 0320 	and.w	r3, r3, #32
 8007662:	2b00      	cmp	r3, #0
 8007664:	d002      	beq.n	800766c <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fdfa 	bl	8008260 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	7a1b      	ldrb	r3, [r3, #8]
 8007670:	f003 0308 	and.w	r3, r3, #8
 8007674:	2b00      	cmp	r3, #0
 8007676:	d005      	beq.n	8007684 <UG_Update+0x15c>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
         #endif
         _UG_UpdateObjects( wnd );
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7ff fc13 	bl	8006ea4 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7ff fc44 	bl	8006f0c <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8007684:	4b07      	ldr	r3, [pc, #28]	; (80076a4 <UG_Update+0x17c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d004      	beq.n	800769a <UG_Update+0x172>
     gui->device->flush();
 8007690:	4b04      	ldr	r3, [pc, #16]	; (80076a4 <UG_Update+0x17c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	4798      	blx	r3
   }
}
 800769a:	bf00      	nop
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	200004f4 	.word	0x200004f4

080076a8 <UG_DrawBMP>:
   while ( (UG_U8)gui->state & UG_STATUS_WAIT_FOR_UPDATE ){};
   #endif    
}

void UG_DrawBMP( UG_S16 xp, UG_S16 yp, UG_BMP* bmp )
{
 80076a8:	b5b0      	push	{r4, r5, r7, lr}
 80076aa:	b08a      	sub	sp, #40	; 0x28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	4603      	mov	r3, r0
 80076b0:	603a      	str	r2, [r7, #0]
 80076b2:	80fb      	strh	r3, [r7, #6]
 80076b4:	460b      	mov	r3, r1
 80076b6:	80bb      	strh	r3, [r7, #4]
   UG_COLOR c;
   UG_S16 x,y;

   if ( bmp->p == NULL ) return;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 810c 	beq.w	80078da <UG_DrawBMP+0x232>

   if ( bmp->bpp == BMP_BPP_1){
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	7a1b      	ldrb	r3, [r3, #8]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d164      	bne.n	8007794 <UG_DrawBMP+0xec>
     UG_U8 xx,yy,b;
     const UG_U8* p = (UG_U8*)bmp->p;         // This is untested !
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	613b      	str	r3, [r7, #16]
      for(y=0;y<bmp->height;y++)
 80076d0:	2300      	movs	r3, #0
 80076d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80076d4:	e057      	b.n	8007786 <UG_DrawBMP+0xde>
      {
         for(x=0;x<bmp->width;x++)
 80076d6:	2300      	movs	r3, #0
 80076d8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80076da:	e048      	b.n	800776e <UG_DrawBMP+0xc6>
         {
            yy = y / 8 ;
 80076dc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	da00      	bge.n	80076e6 <UG_DrawBMP+0x3e>
 80076e4:	3307      	adds	r3, #7
 80076e6:	10db      	asrs	r3, r3, #3
 80076e8:	b21b      	sxth	r3, r3
 80076ea:	73fb      	strb	r3, [r7, #15]
            xx = y % 8;
 80076ec:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80076f0:	425a      	negs	r2, r3
 80076f2:	f003 0307 	and.w	r3, r3, #7
 80076f6:	f002 0207 	and.w	r2, r2, #7
 80076fa:	bf58      	it	pl
 80076fc:	4253      	negpl	r3, r2
 80076fe:	b21b      	sxth	r3, r3
 8007700:	73bb      	strb	r3, [r7, #14]
            b = p[x + yy * bmp->width];
 8007702:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	8889      	ldrh	r1, [r1, #4]
 800770c:	fb01 f303 	mul.w	r3, r1, r3
 8007710:	4413      	add	r3, r2
 8007712:	461a      	mov	r2, r3
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	4413      	add	r3, r2
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	737b      	strb	r3, [r7, #13]
            xx = 1 << xx;
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	2201      	movs	r2, #1
 8007720:	fa02 f303 	lsl.w	r3, r2, r3
 8007724:	73bb      	strb	r3, [r7, #14]
            xx = xx & b;
 8007726:	7bba      	ldrb	r2, [r7, #14]
 8007728:	7b7b      	ldrb	r3, [r7, #13]
 800772a:	4013      	ands	r3, r2
 800772c:	73bb      	strb	r3, [r7, #14]
            if(xx) c = gui->fore_color;
 800772e:	7bbb      	ldrb	r3, [r7, #14]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d004      	beq.n	800773e <UG_DrawBMP+0x96>
 8007734:	4b6b      	ldr	r3, [pc, #428]	; (80078e4 <UG_DrawBMP+0x23c>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800773a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800773c:	e003      	b.n	8007746 <UG_DrawBMP+0x9e>
            else c = gui->back_color;
 800773e:	4b69      	ldr	r3, [pc, #420]	; (80078e4 <UG_DrawBMP+0x23c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007744:	84fb      	strh	r3, [r7, #38]	; 0x26
            UG_DrawPixel( x + xp , y + yp , c );
 8007746:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007748:	88fb      	ldrh	r3, [r7, #6]
 800774a:	4413      	add	r3, r2
 800774c:	b29b      	uxth	r3, r3
 800774e:	b218      	sxth	r0, r3
 8007750:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007752:	88bb      	ldrh	r3, [r7, #4]
 8007754:	4413      	add	r3, r2
 8007756:	b29b      	uxth	r3, r3
 8007758:	b21b      	sxth	r3, r3
 800775a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800775c:	4619      	mov	r1, r3
 800775e:	f7fe fa0b 	bl	8005b78 <UG_DrawPixel>
         for(x=0;x<bmp->width;x++)
 8007762:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007766:	b29b      	uxth	r3, r3
 8007768:	3301      	adds	r3, #1
 800776a:	b29b      	uxth	r3, r3
 800776c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800776e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	8892      	ldrh	r2, [r2, #4]
 8007776:	4293      	cmp	r3, r2
 8007778:	dbb0      	blt.n	80076dc <UG_DrawBMP+0x34>
      for(y=0;y<bmp->height;y++)
 800777a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800777e:	b29b      	uxth	r3, r3
 8007780:	3301      	adds	r3, #1
 8007782:	b29b      	uxth	r3, r3
 8007784:	847b      	strh	r3, [r7, #34]	; 0x22
 8007786:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	88d2      	ldrh	r2, [r2, #6]
 800778e:	4293      	cmp	r3, r2
 8007790:	dba1      	blt.n	80076d6 <UG_DrawBMP+0x2e>
         }
      }
     return;
 8007792:	e0a3      	b.n	80078dc <UG_DrawBMP+0x234>
   }
   #if defined UGUI_USE_COLOR_RGB888 || defined UGUI_USE_COLOR_RGB565
   else if ( bmp->bpp == BMP_BPP_16){
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	7a1b      	ldrb	r3, [r3, #8]
 8007798:	2b10      	cmp	r3, #16
 800779a:	f040 809f 	bne.w	80078dc <UG_DrawBMP+0x234>

     /* Is hardware acceleration available? */

      if ( gui->driver[DRIVER_DRAW_BMP].state & DRIVER_ENABLED)
 800779e:	4b51      	ldr	r3, [pc, #324]	; (80078e4 <UG_DrawBMP+0x23c>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00b      	beq.n	80077c6 <UG_DrawBMP+0x11e>
      {
        ((void(*)(UG_S16, UG_S16, UG_BMP* bmp))gui->driver[DRIVER_DRAW_BMP].driver)(xp,yp, bmp);
 80077ae:	4b4d      	ldr	r3, [pc, #308]	; (80078e4 <UG_DrawBMP+0x23c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b4:	461c      	mov	r4, r3
 80077b6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80077ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	4618      	mov	r0, r3
 80077c2:	47a0      	blx	r4
        return;
 80077c4:	e08a      	b.n	80078dc <UG_DrawBMP+0x234>
      }
      else if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED)
 80077c6:	4b47      	ldr	r3, [pc, #284]	; (80078e4 <UG_DrawBMP+0x23c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d04b      	beq.n	800786e <UG_DrawBMP+0x1c6>
      {
         void(*push_pixels)(UG_U16, UG_COLOR) = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(xp,yp,xp+bmp->width-1,yp+bmp->height-1);
 80077d6:	4b43      	ldr	r3, [pc, #268]	; (80078e4 <UG_DrawBMP+0x23c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077dc:	461d      	mov	r5, r3
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	889a      	ldrh	r2, [r3, #4]
 80077e2:	88fb      	ldrh	r3, [r7, #6]
 80077e4:	4413      	add	r3, r2
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	3b01      	subs	r3, #1
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	b21c      	sxth	r4, r3
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	88da      	ldrh	r2, [r3, #6]
 80077f2:	88bb      	ldrh	r3, [r7, #4]
 80077f4:	4413      	add	r3, r2
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	3b01      	subs	r3, #1
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	b21b      	sxth	r3, r3
 80077fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007802:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007806:	4622      	mov	r2, r4
 8007808:	47a8      	blx	r5
 800780a:	4603      	mov	r3, r0
 800780c:	617b      	str	r3, [r7, #20]
         UG_U16 *p = (UG_U16*)bmp->p;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	61fb      	str	r3, [r7, #28]
         for(y=0;y<bmp->height;y++)
 8007814:	2300      	movs	r3, #0
 8007816:	847b      	strh	r3, [r7, #34]	; 0x22
 8007818:	e022      	b.n	8007860 <UG_DrawBMP+0x1b8>
         {
           for(x=0;x<bmp->width;x++)
 800781a:	2300      	movs	r3, #0
 800781c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800781e:	e00d      	b.n	800783c <UG_DrawBMP+0x194>
           {
             #ifdef UGUI_USE_COLOR_RGB888
             push_pixels(1, _UG_ConvertRGB565ToRGB888(*p++)); /* Convert RGB565 to RGB888 */
             #elif defined UGUI_USE_COLOR_RGB565
             push_pixels(1, *p++);
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	1c9a      	adds	r2, r3, #2
 8007824:	61fa      	str	r2, [r7, #28]
 8007826:	881a      	ldrh	r2, [r3, #0]
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	4611      	mov	r1, r2
 800782c:	2001      	movs	r0, #1
 800782e:	4798      	blx	r3
           for(x=0;x<bmp->width;x++)
 8007830:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007834:	b29b      	uxth	r3, r3
 8007836:	3301      	adds	r3, #1
 8007838:	b29b      	uxth	r3, r3
 800783a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800783c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007840:	683a      	ldr	r2, [r7, #0]
 8007842:	8892      	ldrh	r2, [r2, #4]
 8007844:	4293      	cmp	r3, r2
 8007846:	dbeb      	blt.n	8007820 <UG_DrawBMP+0x178>
             #endif
           }
           yp++;
 8007848:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800784c:	b29b      	uxth	r3, r3
 800784e:	3301      	adds	r3, #1
 8007850:	b29b      	uxth	r3, r3
 8007852:	80bb      	strh	r3, [r7, #4]
         for(y=0;y<bmp->height;y++)
 8007854:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007858:	b29b      	uxth	r3, r3
 800785a:	3301      	adds	r3, #1
 800785c:	b29b      	uxth	r3, r3
 800785e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007860:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	88d2      	ldrh	r2, [r2, #6]
 8007868:	4293      	cmp	r3, r2
 800786a:	dbd6      	blt.n	800781a <UG_DrawBMP+0x172>
         }
         return;
 800786c:	e036      	b.n	80078dc <UG_DrawBMP+0x234>
      }

     UG_U16 *p = (UG_U16*)bmp->p;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	61bb      	str	r3, [r7, #24]
     for(y=0;y<bmp->height;y++)
 8007874:	2300      	movs	r3, #0
 8007876:	847b      	strh	r3, [r7, #34]	; 0x22
 8007878:	e028      	b.n	80078cc <UG_DrawBMP+0x224>
     {
        for(x=0;x<bmp->width;x++)
 800787a:	2300      	movs	r3, #0
 800787c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800787e:	e013      	b.n	80078a8 <UG_DrawBMP+0x200>
        {
          #ifdef UGUI_USE_COLOR_RGB888
           UG_DrawPixel( xp+x , yp , _UG_ConvertRGB565ToRGB888(*p++) ); /* Convert RGB565 to RGB888 */
          #elif defined UGUI_USE_COLOR_RGB565
           UG_DrawPixel( xp+x , yp , *p++ );
 8007880:	88fa      	ldrh	r2, [r7, #6]
 8007882:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007884:	4413      	add	r3, r2
 8007886:	b29b      	uxth	r3, r3
 8007888:	b218      	sxth	r0, r3
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	1c9a      	adds	r2, r3, #2
 800788e:	61ba      	str	r2, [r7, #24]
 8007890:	881a      	ldrh	r2, [r3, #0]
 8007892:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007896:	4619      	mov	r1, r3
 8007898:	f7fe f96e 	bl	8005b78 <UG_DrawPixel>
        for(x=0;x<bmp->width;x++)
 800789c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	3301      	adds	r3, #1
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80078a8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80078ac:	683a      	ldr	r2, [r7, #0]
 80078ae:	8892      	ldrh	r2, [r2, #4]
 80078b0:	4293      	cmp	r3, r2
 80078b2:	dbe5      	blt.n	8007880 <UG_DrawBMP+0x1d8>
          #endif
        }
        yp++;
 80078b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	3301      	adds	r3, #1
 80078bc:	b29b      	uxth	r3, r3
 80078be:	80bb      	strh	r3, [r7, #4]
     for(y=0;y<bmp->height;y++)
 80078c0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	3301      	adds	r3, #1
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80078cc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	88d2      	ldrh	r2, [r2, #6]
 80078d4:	4293      	cmp	r3, r2
 80078d6:	dbd0      	blt.n	800787a <UG_DrawBMP+0x1d2>
 80078d8:	e000      	b.n	80078dc <UG_DrawBMP+0x234>
   if ( bmp->p == NULL ) return;
 80078da:	bf00      	nop
     }
   }
   #endif
}
 80078dc:	3728      	adds	r7, #40	; 0x28
 80078de:	46bd      	mov	sp, r7
 80078e0:	bdb0      	pop	{r4, r5, r7, pc}
 80078e2:	bf00      	nop
 80078e4:	200004f4 	.word	0x200004f4

080078e8 <UG_WindowCreate>:

/* -------------------------------------------------------------------------------- */
/* -- WINDOW FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
UG_RESULT UG_WindowCreate( UG_WINDOW* wnd, UG_OBJECT* objlst, UG_U8 objcnt, void (*cb)( UG_MESSAGE* ) )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	603b      	str	r3, [r7, #0]
 80078f4:	4613      	mov	r3, r2
 80078f6:	71fb      	strb	r3, [r7, #7]
   UG_U8 i;
   UG_OBJECT* obj=NULL;
 80078f8:	2300      	movs	r3, #0
 80078fa:	613b      	str	r3, [r7, #16]

   if ( (wnd == NULL) || (objlst == NULL) || (objcnt == 0) ) return UG_RESULT_FAIL;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <UG_WindowCreate+0x26>
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <UG_WindowCreate+0x26>
 8007908:	79fb      	ldrb	r3, [r7, #7]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d102      	bne.n	8007914 <UG_WindowCreate+0x2c>
 800790e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007912:	e072      	b.n	80079fa <UG_WindowCreate+0x112>

   /* Initialize all objects of the window */
   for(i=0; i<objcnt; i++)
 8007914:	2300      	movs	r3, #0
 8007916:	75fb      	strb	r3, [r7, #23]
 8007918:	e00d      	b.n	8007936 <UG_WindowCreate+0x4e>
   {
      obj = (UG_OBJECT*)&objlst[i];
 800791a:	7dfb      	ldrb	r3, [r7, #23]
 800791c:	015b      	lsls	r3, r3, #5
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	4413      	add	r3, r2
 8007922:	613b      	str	r3, [r7, #16]
      obj->state = OBJ_STATE_INIT;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	2203      	movs	r2, #3
 8007928:	701a      	strb	r2, [r3, #0]
      obj->data = NULL;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	2200      	movs	r2, #0
 800792e:	61da      	str	r2, [r3, #28]
   for(i=0; i<objcnt; i++)
 8007930:	7dfb      	ldrb	r3, [r7, #23]
 8007932:	3301      	adds	r3, #1
 8007934:	75fb      	strb	r3, [r7, #23]
 8007936:	7dfa      	ldrb	r2, [r7, #23]
 8007938:	79fb      	ldrb	r3, [r7, #7]
 800793a:	429a      	cmp	r2, r3
 800793c:	d3ed      	bcc.n	800791a <UG_WindowCreate+0x32>
   }

   /* Initialize window */
   wnd->objcnt = objcnt;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	79fa      	ldrb	r2, [r7, #7]
 8007942:	701a      	strb	r2, [r3, #0]
   wnd->objlst = objlst;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	605a      	str	r2, [r3, #4]
   wnd->state = WND_STATE_VALID;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2202      	movs	r2, #2
 800794e:	721a      	strb	r2, [r3, #8]
   wnd->fc = C_FORE_COLOR;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	815a      	strh	r2, [r3, #10]
   wnd->bc = C_BACK_COLOR;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f64e 727d 	movw	r2, #61309	; 0xef7d
 800795c:	819a      	strh	r2, [r3, #12]
   wnd->xs = 0;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	81da      	strh	r2, [r3, #14]
   wnd->ys = 0;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	821a      	strh	r2, [r3, #16]
   wnd->xe = UG_GetXDim()-1;
 800796a:	f7fe fe0d 	bl	8006588 <UG_GetXDim>
 800796e:	4603      	mov	r3, r0
 8007970:	b29b      	uxth	r3, r3
 8007972:	3b01      	subs	r3, #1
 8007974:	b29b      	uxth	r3, r3
 8007976:	b21a      	sxth	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	825a      	strh	r2, [r3, #18]
   wnd->ye = UG_GetYDim()-1;
 800797c:	f7fe fe12 	bl	80065a4 <UG_GetYDim>
 8007980:	4603      	mov	r3, r0
 8007982:	b29b      	uxth	r3, r3
 8007984:	3b01      	subs	r3, #1
 8007986:	b29b      	uxth	r3, r3
 8007988:	b21a      	sxth	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	829a      	strh	r2, [r3, #20]
   wnd->cb = cb;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	631a      	str	r2, [r3, #48]	; 0x30
   wnd->style = WND_STYLE_3D | WND_STYLE_SHOW_TITLE;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2203      	movs	r2, #3
 8007998:	759a      	strb	r2, [r3, #22]

   /* Initialize window title-bar */
   wnd->title.str = NULL;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	619a      	str	r2, [r3, #24]
   if (gui != NULL) wnd->title.font = gui->font;
 80079a0:	4b18      	ldr	r3, [pc, #96]	; (8007a04 <UG_WindowCreate+0x11c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d005      	beq.n	80079b4 <UG_WindowCreate+0xcc>
 80079a8:	4b16      	ldr	r3, [pc, #88]	; (8007a04 <UG_WindowCreate+0x11c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	691a      	ldr	r2, [r3, #16]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	61da      	str	r2, [r3, #28]
 80079b2:	e002      	b.n	80079ba <UG_WindowCreate+0xd2>
   else wnd->title.font = NULL;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	61da      	str	r2, [r3, #28]
   wnd->title.h_space = 2;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2202      	movs	r2, #2
 80079be:	f883 2020 	strb.w	r2, [r3, #32]
   wnd->title.v_space = 2;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2202      	movs	r2, #2
 80079c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
   wnd->title.align = ALIGN_CENTER_LEFT;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2211      	movs	r2, #17
 80079ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   wnd->title.fc = C_TITLE_FORE_COLOR;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80079d8:	849a      	strh	r2, [r3, #36]	; 0x24
   wnd->title.bc = C_TITLE_BACK_COLOR;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	221f      	movs	r2, #31
 80079de:	84da      	strh	r2, [r3, #38]	; 0x26
   wnd->title.ifc = C_INACTIVE_TITLE_FORE_COLOR;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80079e6:	851a      	strh	r2, [r3, #40]	; 0x28
   wnd->title.ibc = C_INACTIVE_TITLE_BACK_COLOR;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f248 4210 	movw	r2, #33808	; 0x8410
 80079ee:	855a      	strh	r2, [r3, #42]	; 0x2a
   wnd->title.height = 15;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	220f      	movs	r2, #15
 80079f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

   return UG_RESULT_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3718      	adds	r7, #24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	200004f4 	.word	0x200004f4

08007a08 <UG_WindowDelete>:

UG_RESULT UG_WindowDelete( UG_WINDOW* wnd )
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
   if ( wnd == gui->active_window ) return UG_RESULT_FAIL;
 8007a10:	4b1b      	ldr	r3, [pc, #108]	; (8007a80 <UG_WindowDelete+0x78>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d102      	bne.n	8007a22 <UG_WindowDelete+0x1a>
 8007a1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a20:	e027      	b.n	8007a72 <UG_WindowDelete+0x6a>

   /* Only delete valid windows */
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d022      	beq.n	8007a6e <UG_WindowDelete+0x66>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	7a1b      	ldrb	r3, [r3, #8]
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d01c      	beq.n	8007a6e <UG_WindowDelete+0x66>
   {
      wnd->state = 0;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	721a      	strb	r2, [r3, #8]
      wnd->cb = NULL;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	631a      	str	r2, [r3, #48]	; 0x30
      wnd->objcnt = 0;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	701a      	strb	r2, [r3, #0]
      wnd->objlst = NULL;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	605a      	str	r2, [r3, #4]
      wnd->xs = 0;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	81da      	strh	r2, [r3, #14]
      wnd->ys = 0;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	821a      	strh	r2, [r3, #16]
      wnd->xe = 0;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	825a      	strh	r2, [r3, #18]
      wnd->ye = 0;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	829a      	strh	r2, [r3, #20]
      wnd->style = 0;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	759a      	strb	r2, [r3, #22]
      return UG_RESULT_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	e001      	b.n	8007a72 <UG_WindowDelete+0x6a>
   }
   return UG_RESULT_FAIL;
 8007a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	200004f4 	.word	0x200004f4

08007a84 <UG_WindowShow>:

UG_RESULT UG_WindowShow( UG_WINDOW* wnd )
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
   if ( wnd != NULL )
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d013      	beq.n	8007aba <UG_WindowShow+0x36>
   {
      /* Force an update, even if this is the active window! */
      wnd->state |= WND_STATE_VISIBLE | WND_STATE_UPDATE;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	7a1b      	ldrb	r3, [r3, #8]
 8007a96:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	721a      	strb	r2, [r3, #8]
      wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	7a1b      	ldrb	r3, [r3, #8]
 8007aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	721a      	strb	r2, [r3, #8]
      gui->next_window = wnd;
 8007aae:	4b07      	ldr	r3, [pc, #28]	; (8007acc <UG_WindowShow+0x48>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	605a      	str	r2, [r3, #4]
      return UG_RESULT_OK;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	e001      	b.n	8007abe <UG_WindowShow+0x3a>
   }
   return UG_RESULT_FAIL;
 8007aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	200004f4 	.word	0x200004f4

08007ad0 <UG_WindowHide>:

UG_RESULT UG_WindowHide( UG_WINDOW* wnd )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
   if ( wnd != NULL )
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d060      	beq.n	8007ba0 <UG_WindowHide+0xd0>
   {
      if ( wnd == gui->active_window )
 8007ade:	4b33      	ldr	r3, [pc, #204]	; (8007bac <UG_WindowHide+0xdc>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d155      	bne.n	8007b96 <UG_WindowHide+0xc6>
      {
         /* Is there an old window which just lost the focus? */
         if ( (gui->last_window != NULL) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8007aea:	4b30      	ldr	r3, [pc, #192]	; (8007bac <UG_WindowHide+0xdc>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d039      	beq.n	8007b68 <UG_WindowHide+0x98>
 8007af4:	4b2d      	ldr	r3, [pc, #180]	; (8007bac <UG_WindowHide+0xdc>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	7a1b      	ldrb	r3, [r3, #8]
 8007afc:	f003 0308 	and.w	r3, r3, #8
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d031      	beq.n	8007b68 <UG_WindowHide+0x98>
         {
            if ( (gui->last_window->xs > wnd->xs) || (gui->last_window->ys > wnd->ys) || (gui->last_window->xe < wnd->xe) || (gui->last_window->ye < wnd->ye) )
 8007b04:	4b29      	ldr	r3, [pc, #164]	; (8007bac <UG_WindowHide+0xdc>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	dc1d      	bgt.n	8007b54 <UG_WindowHide+0x84>
 8007b18:	4b24      	ldr	r3, [pc, #144]	; (8007bac <UG_WindowHide+0xdc>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	dc13      	bgt.n	8007b54 <UG_WindowHide+0x84>
 8007b2c:	4b1f      	ldr	r3, [pc, #124]	; (8007bac <UG_WindowHide+0xdc>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	db09      	blt.n	8007b54 <UG_WindowHide+0x84>
 8007b40:	4b1a      	ldr	r3, [pc, #104]	; (8007bac <UG_WindowHide+0xdc>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	da02      	bge.n	8007b5a <UG_WindowHide+0x8a>
            {
               _UG_WindowClear( wnd );
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fc3f 	bl	80083d8 <_UG_WindowClear>
            }
            gui->next_window = gui->last_window;
 8007b5a:	4b14      	ldr	r3, [pc, #80]	; (8007bac <UG_WindowHide+0xdc>)
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	4b13      	ldr	r3, [pc, #76]	; (8007bac <UG_WindowHide+0xdc>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68d2      	ldr	r2, [r2, #12]
 8007b64:	605a      	str	r2, [r3, #4]
 8007b66:	e019      	b.n	8007b9c <UG_WindowHide+0xcc>
         }
         else
         {
            gui->active_window->state &= ~WND_STATE_VISIBLE;
 8007b68:	4b10      	ldr	r3, [pc, #64]	; (8007bac <UG_WindowHide+0xdc>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	7a1a      	ldrb	r2, [r3, #8]
 8007b70:	4b0e      	ldr	r3, [pc, #56]	; (8007bac <UG_WindowHide+0xdc>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f022 0208 	bic.w	r2, r2, #8
 8007b7a:	b2d2      	uxtb	r2, r2
 8007b7c:	721a      	strb	r2, [r3, #8]
            gui->active_window->state |= WND_STATE_UPDATE;
 8007b7e:	4b0b      	ldr	r3, [pc, #44]	; (8007bac <UG_WindowHide+0xdc>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	7a1a      	ldrb	r2, [r3, #8]
 8007b86:	4b09      	ldr	r3, [pc, #36]	; (8007bac <UG_WindowHide+0xdc>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f042 0220 	orr.w	r2, r2, #32
 8007b90:	b2d2      	uxtb	r2, r2
 8007b92:	721a      	strb	r2, [r3, #8]
 8007b94:	e002      	b.n	8007b9c <UG_WindowHide+0xcc>
         }
      }
      else
      {
         /* If the old window is visible, clear it! */
         _UG_WindowClear( wnd );
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fc1e 	bl	80083d8 <_UG_WindowClear>
      }
      return UG_RESULT_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	e001      	b.n	8007ba4 <UG_WindowHide+0xd4>
   }
   return UG_RESULT_FAIL;
 8007ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	200004f4 	.word	0x200004f4

08007bb0 <UG_WindowResize>:

UG_RESULT UG_WindowResize( UG_WINDOW* wnd, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 8007bb0:	b590      	push	{r4, r7, lr}
 8007bb2:	b089      	sub	sp, #36	; 0x24
 8007bb4:	af02      	add	r7, sp, #8
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	4608      	mov	r0, r1
 8007bba:	4611      	mov	r1, r2
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	817b      	strh	r3, [r7, #10]
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	813b      	strh	r3, [r7, #8]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	80fb      	strh	r3, [r7, #6]
   UG_S16 pos;
   UG_S16 xmax,ymax;

   xmax = UG_GetXDim()-1;
 8007bca:	f7fe fcdd 	bl	8006588 <UG_GetXDim>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	82fb      	strh	r3, [r7, #22]
   ymax = UG_GetYDim()-1;
 8007bd8:	f7fe fce4 	bl	80065a4 <UG_GetYDim>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	3b01      	subs	r3, #1
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	82bb      	strh	r3, [r7, #20]

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f000 80cb 	beq.w	8007d84 <UG_WindowResize+0x1d4>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	7a1b      	ldrb	r3, [r3, #8]
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 80c4 	beq.w	8007d84 <UG_WindowResize+0x1d4>
   {
      /* Do some checks... */
      if ( (xs < 0) || (ys < 0) ) return UG_RESULT_FAIL;
 8007bfc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	db03      	blt.n	8007c0c <UG_WindowResize+0x5c>
 8007c04:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	da02      	bge.n	8007c12 <UG_WindowResize+0x62>
 8007c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c10:	e0ba      	b.n	8007d88 <UG_WindowResize+0x1d8>
      if ( (xe > xmax) || (ye > ymax) ) return UG_RESULT_FAIL;
 8007c12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007c16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	dc05      	bgt.n	8007c2a <UG_WindowResize+0x7a>
 8007c1e:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8007c22:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	dd02      	ble.n	8007c30 <UG_WindowResize+0x80>
 8007c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c2e:	e0ab      	b.n	8007d88 <UG_WindowResize+0x1d8>
      pos = xe-xs;
 8007c30:	88fa      	ldrh	r2, [r7, #6]
 8007c32:	897b      	ldrh	r3, [r7, #10]
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	827b      	strh	r3, [r7, #18]
      if ( pos < 10 ) return UG_RESULT_FAIL;
 8007c3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c3e:	2b09      	cmp	r3, #9
 8007c40:	dc02      	bgt.n	8007c48 <UG_WindowResize+0x98>
 8007c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c46:	e09f      	b.n	8007d88 <UG_WindowResize+0x1d8>
      pos = ye-ys;
 8007c48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007c4a:	893b      	ldrh	r3, [r7, #8]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	827b      	strh	r3, [r7, #18]
      if ( pos < 10 ) return UG_RESULT_FAIL;
 8007c52:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c56:	2b09      	cmp	r3, #9
 8007c58:	dc02      	bgt.n	8007c60 <UG_WindowResize+0xb0>
 8007c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c5e:	e093      	b.n	8007d88 <UG_WindowResize+0x1d8>

      /* ... and if everything is OK move the window! */
      wnd->xs = xs;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	897a      	ldrh	r2, [r7, #10]
 8007c64:	81da      	strh	r2, [r3, #14]
      wnd->ys = ys;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	893a      	ldrh	r2, [r7, #8]
 8007c6a:	821a      	strh	r2, [r3, #16]
      wnd->xe = xe;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	88fa      	ldrh	r2, [r7, #6]
 8007c70:	825a      	strh	r2, [r3, #18]
      wnd->ye = ye;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007c76:	829a      	strh	r2, [r3, #20]

      if ( (wnd->state & WND_STATE_VISIBLE) && (gui->active_window == wnd) )
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	7a1b      	ldrb	r3, [r3, #8]
 8007c7c:	f003 0308 	and.w	r3, r3, #8
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d07d      	beq.n	8007d80 <UG_WindowResize+0x1d0>
 8007c84:	4b42      	ldr	r3, [pc, #264]	; (8007d90 <UG_WindowResize+0x1e0>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d177      	bne.n	8007d80 <UG_WindowResize+0x1d0>
      {
         if ( wnd->ys ) UG_FillFrame(0, 0, xmax,wnd->ys-1,gui->desktop_color);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d011      	beq.n	8007cbe <UG_WindowResize+0x10e>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	b219      	sxth	r1, r3
 8007ca8:	4b39      	ldr	r3, [pc, #228]	; (8007d90 <UG_WindowResize+0x1e0>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007cae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	2000      	movs	r0, #0
 8007cba:	f7fd fe2d 	bl	8005918 <UG_FillFrame>
         pos = wnd->ye+1;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	827b      	strh	r3, [r7, #18]
         if ( !(pos > ymax) ) UG_FillFrame(0, pos, xmax,ymax,gui->desktop_color);
 8007ccc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007cd0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	dc0d      	bgt.n	8007cf4 <UG_WindowResize+0x144>
 8007cd8:	4b2d      	ldr	r3, [pc, #180]	; (8007d90 <UG_WindowResize+0x1e0>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007cde:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8007ce2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007ce6:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	4603      	mov	r3, r0
 8007cee:	2000      	movs	r0, #0
 8007cf0:	f7fd fe12 	bl	8005918 <UG_FillFrame>
         if ( wnd->xs ) UG_FillFrame(0, wnd->ys, wnd->xs-1,wnd->ye,gui->desktop_color);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d014      	beq.n	8007d28 <UG_WindowResize+0x178>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	b21a      	sxth	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8007d18:	4b1d      	ldr	r3, [pc, #116]	; (8007d90 <UG_WindowResize+0x1e0>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	4603      	mov	r3, r0
 8007d22:	2000      	movs	r0, #0
 8007d24:	f7fd fdf8 	bl	8005918 <UG_FillFrame>
         pos = wnd->xe+1;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	3301      	adds	r3, #1
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	827b      	strh	r3, [r7, #18]
         if ( !(pos > xmax) ) UG_FillFrame(pos, wnd->ys,xmax,wnd->ye,gui->desktop_color);
 8007d36:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007d3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	dc10      	bgt.n	8007d64 <UG_WindowResize+0x1b4>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8007d4e:	4b10      	ldr	r3, [pc, #64]	; (8007d90 <UG_WindowResize+0x1e0>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007d54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007d58:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	4623      	mov	r3, r4
 8007d60:	f7fd fdda 	bl	8005918 <UG_FillFrame>

         wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	7a1b      	ldrb	r3, [r3, #8]
 8007d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	721a      	strb	r2, [r3, #8]
         wnd->state |= WND_STATE_UPDATE;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	7a1b      	ldrb	r3, [r3, #8]
 8007d76:	f043 0320 	orr.w	r3, r3, #32
 8007d7a:	b2da      	uxtb	r2, r3
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	721a      	strb	r2, [r3, #8]
      }
      return UG_RESULT_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	e001      	b.n	8007d88 <UG_WindowResize+0x1d8>
   }
   return UG_RESULT_FAIL;
 8007d84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	371c      	adds	r7, #28
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd90      	pop	{r4, r7, pc}
 8007d90:	200004f4 	.word	0x200004f4

08007d94 <UG_WindowSetTitleText>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowSetTitleText( UG_WINDOW* wnd, char* str )
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d011      	beq.n	8007dc8 <UG_WindowSetTitleText+0x34>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	7a1b      	ldrb	r3, [r3, #8]
 8007da8:	f003 0302 	and.w	r3, r3, #2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00b      	beq.n	8007dc8 <UG_WindowSetTitleText+0x34>
   {
      wnd->title.str = str;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	619a      	str	r2, [r3, #24]
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	7a1b      	ldrb	r3, [r3, #8]
 8007dba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	e001      	b.n	8007dcc <UG_WindowSetTitleText+0x38>
   }
   return UG_RESULT_FAIL;
 8007dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <UG_WindowSetTitleTextFont>:

UG_RESULT UG_WindowSetTitleTextFont( UG_WINDOW* wnd, UG_FONT* font )
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d02a      	beq.n	8007e3e <UG_WindowSetTitleTextFont+0x66>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	7a1b      	ldrb	r3, [r3, #8]
 8007dec:	f003 0302 	and.w	r3, r3, #2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d024      	beq.n	8007e3e <UG_WindowSetTitleTextFont+0x66>
   {
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	7a1b      	ldrb	r3, [r3, #8]
 8007df8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	721a      	strb	r2, [r3, #8]
      wnd->title.font = font;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	683a      	ldr	r2, [r7, #0]
 8007e06:	61da      	str	r2, [r3, #28]
      if ( wnd->title.height <= (UG_GetFontHeight(font) + 1) )
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007e0e:	461a      	mov	r2, r3
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	3302      	adds	r3, #2
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	3301      	adds	r3, #1
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	dc0e      	bgt.n	8007e3a <UG_WindowSetTitleTextFont+0x62>
      {
         wnd->title.height = UG_GetFontWidth(font) + 2;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	3302      	adds	r3, #2
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
         wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	7a1b      	ldrb	r3, [r3, #8]
 8007e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	721a      	strb	r2, [r3, #8]
      }
      return UG_RESULT_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	e001      	b.n	8007e42 <UG_WindowSetTitleTextFont+0x6a>
   }
   return UG_RESULT_FAIL;
 8007e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr

08007e4e <UG_WindowSetTitleHeight>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowSetTitleHeight( UG_WINDOW* wnd, UG_U8 height )
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b083      	sub	sp, #12
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	460b      	mov	r3, r1
 8007e58:	70fb      	strb	r3, [r7, #3]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d019      	beq.n	8007e94 <UG_WindowSetTitleHeight+0x46>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	7a1b      	ldrb	r3, [r3, #8]
 8007e64:	f003 0302 	and.w	r3, r3, #2
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d013      	beq.n	8007e94 <UG_WindowSetTitleHeight+0x46>
   {
      wnd->title.height = height;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	78fa      	ldrb	r2, [r7, #3]
 8007e70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	7a1b      	ldrb	r3, [r3, #8]
 8007e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e7c:	b2da      	uxtb	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	721a      	strb	r2, [r3, #8]
      wnd->state |= WND_STATE_UPDATE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	7a1b      	ldrb	r3, [r3, #8]
 8007e86:	f043 0320 	orr.w	r3, r3, #32
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	e001      	b.n	8007e98 <UG_WindowSetTitleHeight+0x4a>
   }
   return UG_RESULT_FAIL;
 8007e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <UG_WindowSetXStart>:

UG_RESULT UG_WindowSetXStart( UG_WINDOW* wnd, UG_S16 xs )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af02      	add	r7, sp, #8
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	460b      	mov	r3, r1
 8007eae:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d022      	beq.n	8007efc <UG_WindowSetXStart+0x58>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	7a1b      	ldrb	r3, [r3, #8]
 8007eba:	f003 0302 	and.w	r3, r3, #2
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d01c      	beq.n	8007efc <UG_WindowSetXStart+0x58>
   {
      wnd->xs = xs;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	887a      	ldrh	r2, [r7, #2]
 8007ec6:	81da      	strh	r2, [r3, #14]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7ff fe63 	bl	8007bb0 <UG_WindowResize>
 8007eea:	4603      	mov	r3, r0
 8007eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ef0:	d102      	bne.n	8007ef8 <UG_WindowSetXStart+0x54>
 8007ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ef6:	e003      	b.n	8007f00 <UG_WindowSetXStart+0x5c>
      return UG_RESULT_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e001      	b.n	8007f00 <UG_WindowSetXStart+0x5c>
   }
   return UG_RESULT_FAIL;
 8007efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <UG_WindowSetYStart>:

UG_RESULT UG_WindowSetYStart( UG_WINDOW* wnd, UG_S16 ys )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af02      	add	r7, sp, #8
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d022      	beq.n	8007f60 <UG_WindowSetYStart+0x58>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	7a1b      	ldrb	r3, [r3, #8]
 8007f1e:	f003 0302 	and.w	r3, r3, #2
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d01c      	beq.n	8007f60 <UG_WindowSetYStart+0x58>
   {
      wnd->ys = ys;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	887a      	ldrh	r2, [r7, #2]
 8007f2a:	821a      	strh	r2, [r3, #16]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	4603      	mov	r3, r0
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7ff fe31 	bl	8007bb0 <UG_WindowResize>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f54:	d102      	bne.n	8007f5c <UG_WindowSetYStart+0x54>
 8007f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f5a:	e003      	b.n	8007f64 <UG_WindowSetYStart+0x5c>
      return UG_RESULT_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	e001      	b.n	8007f64 <UG_WindowSetYStart+0x5c>
   }
   return UG_RESULT_FAIL;
 8007f60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <UG_WindowSetXEnd>:

UG_RESULT UG_WindowSetXEnd( UG_WINDOW* wnd, UG_S16 xe )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af02      	add	r7, sp, #8
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d022      	beq.n	8007fc4 <UG_WindowSetXEnd+0x58>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	7a1b      	ldrb	r3, [r3, #8]
 8007f82:	f003 0302 	and.w	r3, r3, #2
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d01c      	beq.n	8007fc4 <UG_WindowSetXEnd+0x58>
   {
      wnd->xe = xe;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	887a      	ldrh	r2, [r7, #2]
 8007f8e:	825a      	strh	r2, [r3, #18]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	4603      	mov	r3, r0
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7ff fdff 	bl	8007bb0 <UG_WindowResize>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fb8:	d102      	bne.n	8007fc0 <UG_WindowSetXEnd+0x54>
 8007fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fbe:	e003      	b.n	8007fc8 <UG_WindowSetXEnd+0x5c>
      return UG_RESULT_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	e001      	b.n	8007fc8 <UG_WindowSetXEnd+0x5c>
   }
   return UG_RESULT_FAIL;
 8007fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <UG_WindowSetYEnd>:

UG_RESULT UG_WindowSetYEnd( UG_WINDOW* wnd, UG_S16 ye )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af02      	add	r7, sp, #8
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d022      	beq.n	8008028 <UG_WindowSetYEnd+0x58>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	7a1b      	ldrb	r3, [r3, #8]
 8007fe6:	f003 0302 	and.w	r3, r3, #2
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d01c      	beq.n	8008028 <UG_WindowSetYEnd+0x58>
   {
      wnd->ye = ye;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	887a      	ldrh	r2, [r7, #2]
 8007ff2:	829a      	strh	r2, [r3, #20]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	4603      	mov	r3, r0
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7ff fdcd 	bl	8007bb0 <UG_WindowResize>
 8008016:	4603      	mov	r3, r0
 8008018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800801c:	d102      	bne.n	8008024 <UG_WindowSetYEnd+0x54>
 800801e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008022:	e003      	b.n	800802c <UG_WindowSetYEnd+0x5c>
      return UG_RESULT_OK;
 8008024:	2300      	movs	r3, #0
 8008026:	e001      	b.n	800802c <UG_WindowSetYEnd+0x5c>
   }
   return UG_RESULT_FAIL;
 8008028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800802c:	4618      	mov	r0, r3
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <UG_WindowGetArea>:
   }
   return style;
}

UG_RESULT UG_WindowGetArea( UG_WINDOW* wnd, UG_AREA* a )
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d05a      	beq.n	80080fa <UG_WindowGetArea+0xc6>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	7a1b      	ldrb	r3, [r3, #8]
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	2b00      	cmp	r3, #0
 800804e:	d054      	beq.n	80080fa <UG_WindowGetArea+0xc6>
   {
      a->xs = wnd->xs;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	801a      	strh	r2, [r3, #0]
      a->ys = wnd->ys;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	805a      	strh	r2, [r3, #2]
      a->xe = wnd->xe;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	809a      	strh	r2, [r3, #4]
      a->ye = wnd->ye;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	80da      	strh	r2, [r3, #6]
      if ( wnd->style & WND_STYLE_3D )
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	7d9b      	ldrb	r3, [r3, #22]
 800807c:	f003 0301 	and.w	r3, r3, #1
 8008080:	2b00      	cmp	r3, #0
 8008082:	d023      	beq.n	80080cc <UG_WindowGetArea+0x98>
      {
         a->xs+=3;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	f9b3 3000 	ldrsh.w	r3, [r3]
 800808a:	b29b      	uxth	r3, r3
 800808c:	3303      	adds	r3, #3
 800808e:	b29b      	uxth	r3, r3
 8008090:	b21a      	sxth	r2, r3
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	801a      	strh	r2, [r3, #0]
         a->ys+=3;
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800809c:	b29b      	uxth	r3, r3
 800809e:	3303      	adds	r3, #3
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	b21a      	sxth	r2, r3
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	805a      	strh	r2, [r3, #2]
         a->xe-=3;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	3b03      	subs	r3, #3
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	b21a      	sxth	r2, r3
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	809a      	strh	r2, [r3, #4]
         a->ye-=3;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	3b03      	subs	r3, #3
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	b21a      	sxth	r2, r3
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	80da      	strh	r2, [r3, #6]
      }
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	7d9b      	ldrb	r3, [r3, #22]
 80080d0:	f003 0302 	and.w	r3, r3, #2
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00e      	beq.n	80080f6 <UG_WindowGetArea+0xc2>
      {
         a->ys+= wnd->title.height+1;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80080de:	b29a      	uxth	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	4413      	add	r3, r2
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	3301      	adds	r3, #1
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	b21a      	sxth	r2, r3
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	805a      	strh	r2, [r3, #2]
      }
      return UG_RESULT_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	e001      	b.n	80080fe <UG_WindowGetArea+0xca>
   }
   return UG_RESULT_FAIL;
 80080fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80080fe:	4618      	mov	r0, r3
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
	...

0800810c <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 800810c:	b590      	push	{r4, r7, lr}
 800810e:	b08f      	sub	sp, #60	; 0x3c
 8008110:	af02      	add	r7, sp, #8
 8008112:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	f000 809a 	beq.w	8008250 <_UG_WindowDrawTitle+0x144>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	7a1b      	ldrb	r3, [r3, #8]
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	f000 8093 	beq.w	8008250 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	89db      	ldrh	r3, [r3, #14]
 800812e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	8a1b      	ldrh	r3, [r3, #16]
 8008134:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	8a5b      	ldrh	r3, [r3, #18]
 800813a:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	8a9b      	ldrh	r3, [r3, #20]
 8008140:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	7d9b      	ldrb	r3, [r3, #22]
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00f      	beq.n	800816e <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 800814e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008150:	3303      	adds	r3, #3
 8008152:	b29b      	uxth	r3, r3
 8008154:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 8008156:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008158:	3303      	adds	r3, #3
 800815a:	b29b      	uxth	r3, r3
 800815c:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 800815e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008160:	3b03      	subs	r3, #3
 8008162:	b29b      	uxth	r3, r3
 8008164:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 8008166:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008168:	3b03      	subs	r3, #3
 800816a:	b29b      	uxth	r3, r3
 800816c:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 800816e:	4b3b      	ldr	r3, [pc, #236]	; (800825c <_UG_WindowDrawTitle+0x150>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	429a      	cmp	r2, r3
 8008178:	d106      	bne.n	8008188 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800817e:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008184:	83bb      	strh	r3, [r7, #28]
 8008186:	e005      	b.n	8008194 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800818c:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008192:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800819a:	b29a      	uxth	r2, r3
 800819c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800819e:	4413      	add	r3, r2
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	b21c      	sxth	r4, r3
 80081a8:	8bfb      	ldrh	r3, [r7, #30]
 80081aa:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80081ae:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80081b2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	4623      	mov	r3, r4
 80081ba:	f7fd fbad 	bl	8005918 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	69db      	ldr	r3, [r3, #28]
 80081c8:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 80081ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80081cc:	3303      	adds	r3, #3
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	b21b      	sxth	r3, r3
 80081d2:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 80081d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80081d6:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 80081d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80081da:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80081e6:	4413      	add	r3, r2
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	3b01      	subs	r3, #1
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	b21b      	sxth	r3, r3
 80081f0:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80081f8:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8008202:	b21b      	sxth	r3, r3
 8008204:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 800820c:	b21b      	sxth	r3, r3
 800820e:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 8008210:	f107 030c 	add.w	r3, r7, #12
 8008214:	4618      	mov	r0, r3
 8008216:	f7fe fec5 	bl	8006fa4 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008220:	b29a      	uxth	r2, r3
 8008222:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008224:	4413      	add	r3, r2
 8008226:	b29b      	uxth	r3, r3
 8008228:	b219      	sxth	r1, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008230:	b29a      	uxth	r2, r3
 8008232:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008234:	4413      	add	r3, r2
 8008236:	b29b      	uxth	r3, r3
 8008238:	b21b      	sxth	r3, r3
 800823a:	f649 5413 	movw	r4, #40211	; 0x9d13
 800823e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8008242:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8008246:	9400      	str	r4, [sp, #0]
 8008248:	f7fd fe70 	bl	8005f2c <UG_DrawLine>
      return UG_RESULT_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	e001      	b.n	8008254 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 8008250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008254:	4618      	mov	r0, r3
 8008256:	3734      	adds	r7, #52	; 0x34
 8008258:	46bd      	mov	sp, r7
 800825a:	bd90      	pop	{r4, r7, pc}
 800825c:	200004f4 	.word	0x200004f4

08008260 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8008260:	b590      	push	{r4, r7, lr}
 8008262:	b089      	sub	sp, #36	; 0x24
 8008264:	af02      	add	r7, sp, #8
 8008266:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	89db      	ldrh	r3, [r3, #14]
 800826c:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	8a1b      	ldrh	r3, [r3, #16]
 8008272:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	8a5b      	ldrh	r3, [r3, #18]
 8008278:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	8a9b      	ldrh	r3, [r3, #20]
 800827e:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	7a1b      	ldrb	r3, [r3, #8]
 8008284:	f023 0320 	bic.w	r3, r3, #32
 8008288:	b2da      	uxtb	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	7a1b      	ldrb	r3, [r3, #8]
 8008292:	f003 0308 	and.w	r3, r3, #8
 8008296:	2b00      	cmp	r3, #0
 8008298:	f000 8084 	beq.w	80083a4 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	7d9b      	ldrb	r3, [r3, #22]
 80082a0:	f003 0301 	and.w	r3, r3, #1
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d021      	beq.n	80082ec <_UG_WindowUpdate+0x8c>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	7a1b      	ldrb	r3, [r3, #8]
 80082ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d11b      	bne.n	80082ec <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 80082b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80082b8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80082bc:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80082c0:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80082c4:	4c42      	ldr	r4, [pc, #264]	; (80083d0 <_UG_WindowUpdate+0x170>)
 80082c6:	9400      	str	r4, [sp, #0]
 80082c8:	f7fe ffbe 	bl	8007248 <_UG_DrawObjectFrame>
         xs+=3;
 80082cc:	8abb      	ldrh	r3, [r7, #20]
 80082ce:	3303      	adds	r3, #3
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 80082d4:	8a7b      	ldrh	r3, [r7, #18]
 80082d6:	3303      	adds	r3, #3
 80082d8:	b29b      	uxth	r3, r3
 80082da:	827b      	strh	r3, [r7, #18]
         xe-=3;
 80082dc:	8a3b      	ldrh	r3, [r7, #16]
 80082de:	3b03      	subs	r3, #3
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	823b      	strh	r3, [r7, #16]
         ye-=3;
 80082e4:	89fb      	ldrh	r3, [r7, #14]
 80082e6:	3b03      	subs	r3, #3
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	7d9b      	ldrb	r3, [r3, #22]
 80082f0:	f003 0302 	and.w	r3, r3, #2
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d01a      	beq.n	800832e <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7ff ff07 	bl	800810c <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008304:	b29a      	uxth	r2, r3
 8008306:	8a7b      	ldrh	r3, [r7, #18]
 8008308:	4413      	add	r3, r2
 800830a:	b29b      	uxth	r3, r3
 800830c:	3301      	adds	r3, #1
 800830e:	b29b      	uxth	r3, r3
 8008310:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	7a1b      	ldrb	r3, [r3, #8]
 8008316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800831a:	2b00      	cmp	r3, #0
 800831c:	d007      	beq.n	800832e <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	7a1b      	ldrb	r3, [r3, #8]
 8008322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008326:	b2da      	uxtb	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	721a      	strb	r2, [r3, #8]
            return;
 800832c:	e04d      	b.n	80083ca <_UG_WindowUpdate+0x16a>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	899b      	ldrh	r3, [r3, #12]
 8008332:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8008336:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800833a:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800833e:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8008342:	9300      	str	r3, [sp, #0]
 8008344:	4623      	mov	r3, r4
 8008346:	f7fd fae7 	bl	8005918 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8008350:	2300      	movs	r3, #0
 8008352:	82fb      	strh	r3, [r7, #22]
 8008354:	e021      	b.n	800839a <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	8afb      	ldrh	r3, [r7, #22]
 800835c:	015b      	lsls	r3, r3, #5
 800835e:	4413      	add	r3, r2
 8008360:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	f003 0301 	and.w	r3, r3, #1
 800836a:	2b00      	cmp	r3, #0
 800836c:	d112      	bne.n	8008394 <_UG_WindowUpdate+0x134>
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	f003 0302 	and.w	r3, r3, #2
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00c      	beq.n	8008394 <_UG_WindowUpdate+0x134>
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	f003 0308 	and.w	r3, r3, #8
 8008382:	2b00      	cmp	r3, #0
 8008384:	d006      	beq.n	8008394 <_UG_WindowUpdate+0x134>
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800838e:	b2da      	uxtb	r2, r3
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8008394:	8afb      	ldrh	r3, [r7, #22]
 8008396:	3301      	adds	r3, #1
 8008398:	82fb      	strh	r3, [r7, #22]
 800839a:	8afa      	ldrh	r2, [r7, #22]
 800839c:	89bb      	ldrh	r3, [r7, #12]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d3d9      	bcc.n	8008356 <_UG_WindowUpdate+0xf6>
 80083a2:	e012      	b.n	80083ca <_UG_WindowUpdate+0x16a>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 80083bc:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <_UG_WindowUpdate+0x174>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	4623      	mov	r3, r4
 80083c6:	f7fd faa7 	bl	8005918 <UG_FillFrame>
   }
}
 80083ca:	371c      	adds	r7, #28
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd90      	pop	{r4, r7, pc}
 80083d0:	0802086c 	.word	0x0802086c
 80083d4:	200004f4 	.word	0x200004f4

080083d8 <_UG_WindowClear>:

static UG_RESULT _UG_WindowClear( UG_WINDOW* wnd )
{
 80083d8:	b590      	push	{r4, r7, lr}
 80083da:	b085      	sub	sp, #20
 80083dc:	af02      	add	r7, sp, #8
 80083de:	6078      	str	r0, [r7, #4]
   if ( wnd != NULL )
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d045      	beq.n	8008472 <_UG_WindowClear+0x9a>
   {
      if (wnd->state & WND_STATE_VISIBLE)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	7a1b      	ldrb	r3, [r3, #8]
 80083ea:	f003 0308 	and.w	r3, r3, #8
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d03d      	beq.n	800846e <_UG_WindowClear+0x96>
      {
         wnd->state &= ~WND_STATE_VISIBLE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	7a1b      	ldrb	r3, [r3, #8]
 80083f6:	f023 0308 	bic.w	r3, r3, #8
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	721a      	strb	r2, [r3, #8]
         UG_FillFrame( wnd->xs, wnd->ys, wnd->xe, wnd->ye, gui->desktop_color );
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8008418:	4b19      	ldr	r3, [pc, #100]	; (8008480 <_UG_WindowClear+0xa8>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	4623      	mov	r3, r4
 8008422:	f7fd fa79 	bl	8005918 <UG_FillFrame>

         if ( wnd != gui->active_window )
 8008426:	4b16      	ldr	r3, [pc, #88]	; (8008480 <_UG_WindowClear+0xa8>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	429a      	cmp	r2, r3
 8008430:	d01d      	beq.n	800846e <_UG_WindowClear+0x96>
         {
            /* If the current window is visible, update it! */
            if ( gui->active_window->state & WND_STATE_VISIBLE )
 8008432:	4b13      	ldr	r3, [pc, #76]	; (8008480 <_UG_WindowClear+0xa8>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	7a1b      	ldrb	r3, [r3, #8]
 800843a:	f003 0308 	and.w	r3, r3, #8
 800843e:	2b00      	cmp	r3, #0
 8008440:	d015      	beq.n	800846e <_UG_WindowClear+0x96>
            {
               gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8008442:	4b0f      	ldr	r3, [pc, #60]	; (8008480 <_UG_WindowClear+0xa8>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	7a1a      	ldrb	r2, [r3, #8]
 800844a:	4b0d      	ldr	r3, [pc, #52]	; (8008480 <_UG_WindowClear+0xa8>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008454:	b2d2      	uxtb	r2, r2
 8008456:	721a      	strb	r2, [r3, #8]
               gui->active_window->state |= WND_STATE_UPDATE;
 8008458:	4b09      	ldr	r3, [pc, #36]	; (8008480 <_UG_WindowClear+0xa8>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	7a1a      	ldrb	r2, [r3, #8]
 8008460:	4b07      	ldr	r3, [pc, #28]	; (8008480 <_UG_WindowClear+0xa8>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	f042 0220 	orr.w	r2, r2, #32
 800846a:	b2d2      	uxtb	r2, r2
 800846c:	721a      	strb	r2, [r3, #8]
            }
         }
      }
      return UG_RESULT_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	e001      	b.n	8008476 <_UG_WindowClear+0x9e>
   }
   return UG_RESULT_FAIL;
 8008472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008476:	4618      	mov	r0, r3
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	bd90      	pop	{r4, r7, pc}
 800847e:	bf00      	nop
 8008480:	200004f4 	.word	0x200004f4

08008484 <UG_ButtonCreate>:
const UG_COLOR pal_button_released[] = {
    C_PAL_BUTTON_RELEASED
};

UG_RESULT UG_ButtonCreate( UG_WINDOW* wnd, UG_BUTTON* btn, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	4611      	mov	r1, r2
 8008490:	461a      	mov	r2, r3
 8008492:	460b      	mov	r3, r1
 8008494:	71fb      	strb	r3, [r7, #7]
 8008496:	4613      	mov	r3, r2
 8008498:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f7fe fff5 	bl	800748a <_UG_GetFreeObject>
 80084a0:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d102      	bne.n	80084ae <UG_ButtonCreate+0x2a>
 80084a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084ac:	e062      	b.n	8008574 <UG_ButtonCreate+0xf0>

   /* Initialize object-specific parameters */
   btn->state = BTN_STATE_RELEASED;
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	2200      	movs	r2, #0
 80084b2:	701a      	strb	r2, [r3, #0]
   btn->bc = wnd->bc;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	899a      	ldrh	r2, [r3, #12]
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	809a      	strh	r2, [r3, #4]
   btn->fc = wnd->fc;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	895a      	ldrh	r2, [r3, #10]
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	805a      	strh	r2, [r3, #2]
   btn->abc = wnd->bc;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	899a      	ldrh	r2, [r3, #12]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	811a      	strh	r2, [r3, #8]
   btn->afc = wnd->fc;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	895a      	ldrh	r2, [r3, #10]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	80da      	strh	r2, [r3, #6]
   btn->style = BTN_STYLE_3D;
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	2201      	movs	r2, #1
 80084d8:	705a      	strb	r2, [r3, #1]
   btn->align = ALIGN_CENTER;
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	2212      	movs	r2, #18
 80084de:	741a      	strb	r2, [r3, #16]
   btn->font = UG_GetGUI() != NULL ? (UG_GetGUI()->font) : NULL;
 80084e0:	f7fd f9da 	bl	8005898 <UG_GetGUI>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d004      	beq.n	80084f4 <UG_ButtonCreate+0x70>
 80084ea:	f7fd f9d5 	bl	8005898 <UG_GetGUI>
 80084ee:	4603      	mov	r3, r0
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	e000      	b.n	80084f6 <UG_ButtonCreate+0x72>
 80084f4:	2300      	movs	r3, #0
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	60d3      	str	r3, [r2, #12]
   btn->str = "-";
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	4a1f      	ldr	r2, [pc, #124]	; (800857c <UG_ButtonCreate+0xf8>)
 80084fe:	615a      	str	r2, [r3, #20]

   /* Initialize standard object parameters */
   obj->update = _UG_ButtonUpdate;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	4a1f      	ldr	r2, [pc, #124]	; (8008580 <UG_ButtonCreate+0xfc>)
 8008504:	605a      	str	r2, [r3, #4]
   #ifdef UGUI_USE_TOUCH
   obj->touch_state = OBJ_TOUCH_STATE_INIT;
   #endif
   obj->type = OBJ_TYPE_BUTTON;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2201      	movs	r2, #1
 800850a:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	2200      	movs	r2, #0
 8008510:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	88ba      	ldrh	r2, [r7, #4]
 8008516:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	8c3a      	ldrh	r2, [r7, #32]
 800851c:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008522:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008528:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008530:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008538:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008540:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008548:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	79fa      	ldrb	r2, [r7, #7]
 800854e:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 8008558:	b2da      	uxtb	r2, r3
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	701a      	strb	r2, [r3, #0]
   #ifdef UGUI_USE_TOUCH
   obj->state |= OBJ_STATE_TOUCH_ENABLE;
   #endif
   obj->data = (void*)btn;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	68ba      	ldr	r2, [r7, #8]
 8008562:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	f023 0301 	bic.w	r3, r3, #1
 800856c:	b2da      	uxtb	r2, r3
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3718      	adds	r7, #24
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	0800d640 	.word	0x0800d640
 8008580:	080087e1 	.word	0x080087e1

08008584 <UG_ButtonSetForeColor>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ButtonSetForeColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR fc )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	460b      	mov	r3, r1
 800858e:	70fb      	strb	r3, [r7, #3]
 8008590:	4613      	mov	r3, r2
 8008592:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8008594:	2300      	movs	r3, #0
 8008596:	60fb      	str	r3, [r7, #12]
   UG_BUTTON* btn=NULL;
 8008598:	2300      	movs	r3, #0
 800859a:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 800859c:	78fb      	ldrb	r3, [r7, #3]
 800859e:	461a      	mov	r2, r3
 80085a0:	2101      	movs	r1, #1
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7fe fe15 	bl	80071d2 <_UG_SearchObject>
 80085a8:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d102      	bne.n	80085b6 <UG_ButtonSetForeColor+0x32>
 80085b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085b4:	e00d      	b.n	80085d2 <UG_ButtonSetForeColor+0x4e>

   btn = (UG_BUTTON*)(obj->data);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	60bb      	str	r3, [r7, #8]
   btn->fc = fc;
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	883a      	ldrh	r2, [r7, #0]
 80085c0:	805a      	strh	r2, [r3, #2]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <UG_ButtonSetBackColor>:

UG_RESULT UG_ButtonSetBackColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR bc )
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b084      	sub	sp, #16
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	460b      	mov	r3, r1
 80085e4:	70fb      	strb	r3, [r7, #3]
 80085e6:	4613      	mov	r3, r2
 80085e8:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 80085ea:	2300      	movs	r3, #0
 80085ec:	60fb      	str	r3, [r7, #12]
   UG_BUTTON* btn=NULL;
 80085ee:	2300      	movs	r3, #0
 80085f0:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 80085f2:	78fb      	ldrb	r3, [r7, #3]
 80085f4:	461a      	mov	r2, r3
 80085f6:	2101      	movs	r1, #1
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7fe fdea 	bl	80071d2 <_UG_SearchObject>
 80085fe:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d102      	bne.n	800860c <UG_ButtonSetBackColor+0x32>
 8008606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800860a:	e00d      	b.n	8008628 <UG_ButtonSetBackColor+0x4e>

   btn = (UG_BUTTON*)(obj->data);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	69db      	ldr	r3, [r3, #28]
 8008610:	60bb      	str	r3, [r7, #8]
   btn->bc = bc;
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	883a      	ldrh	r2, [r7, #0]
 8008616:	809a      	strh	r2, [r3, #4]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008620:	b2da      	uxtb	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <UG_ButtonSetText>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ButtonSetText( UG_WINDOW* wnd, UG_U8 id, char* str )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	460b      	mov	r3, r1
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 800863e:	2300      	movs	r3, #0
 8008640:	617b      	str	r3, [r7, #20]
   UG_BUTTON* btn=NULL;
 8008642:	2300      	movs	r3, #0
 8008644:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 8008646:	7afb      	ldrb	r3, [r7, #11]
 8008648:	461a      	mov	r2, r3
 800864a:	2101      	movs	r1, #1
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f7fe fdc0 	bl	80071d2 <_UG_SearchObject>
 8008652:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d102      	bne.n	8008660 <UG_ButtonSetText+0x30>
 800865a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800865e:	e00d      	b.n	800867c <UG_ButtonSetText+0x4c>

   btn = (UG_BUTTON*)(obj->data);
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	69db      	ldr	r3, [r3, #28]
 8008664:	613b      	str	r3, [r7, #16]
   btn->str = str;
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	615a      	str	r2, [r3, #20]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008674:	b2da      	uxtb	r2, r3
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3718      	adds	r7, #24
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <UG_ButtonSetFont>:

UG_RESULT UG_ButtonSetFont( UG_WINDOW* wnd, UG_U8 id, UG_FONT* font )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	460b      	mov	r3, r1
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 8008692:	2300      	movs	r3, #0
 8008694:	617b      	str	r3, [r7, #20]
   UG_BUTTON* btn=NULL;
 8008696:	2300      	movs	r3, #0
 8008698:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 800869a:	7afb      	ldrb	r3, [r7, #11]
 800869c:	461a      	mov	r2, r3
 800869e:	2101      	movs	r1, #1
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f7fe fd96 	bl	80071d2 <_UG_SearchObject>
 80086a6:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d102      	bne.n	80086b4 <UG_ButtonSetFont+0x30>
 80086ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086b2:	e00d      	b.n	80086d0 <UG_ButtonSetFont+0x4c>

   btn = (UG_BUTTON*)(obj->data);
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	69db      	ldr	r3, [r3, #28]
 80086b8:	613b      	str	r3, [r7, #16]
   btn->font = font;
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	60da      	str	r2, [r3, #12]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80086c8:	b2da      	uxtb	r2, r3
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3718      	adds	r7, #24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <UG_ButtonSetStyle>:

UG_RESULT UG_ButtonSetStyle( UG_WINDOW* wnd, UG_U8 id, UG_U8 style )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	460b      	mov	r3, r1
 80086e2:	70fb      	strb	r3, [r7, #3]
 80086e4:	4613      	mov	r3, r2
 80086e6:	70bb      	strb	r3, [r7, #2]
   UG_OBJECT* obj=NULL;
 80086e8:	2300      	movs	r3, #0
 80086ea:	60fb      	str	r3, [r7, #12]
   UG_BUTTON* btn=NULL;
 80086ec:	2300      	movs	r3, #0
 80086ee:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 80086f0:	78fb      	ldrb	r3, [r7, #3]
 80086f2:	461a      	mov	r2, r3
 80086f4:	2101      	movs	r1, #1
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7fe fd6b 	bl	80071d2 <_UG_SearchObject>
 80086fc:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d102      	bne.n	800870a <UG_ButtonSetStyle+0x32>
 8008704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008708:	e065      	b.n	80087d6 <UG_ButtonSetStyle+0xfe>

   btn = (UG_BUTTON*)(obj->data);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	69db      	ldr	r3, [r3, #28]
 800870e:	60bb      	str	r3, [r7, #8]

   /* Select color scheme */
   btn->style &= ~(BTN_STYLE_USE_ALTERNATE_COLORS | BTN_STYLE_TOGGLE_COLORS | BTN_STYLE_NO_BORDERS | BTN_STYLE_NO_FILL);
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	785b      	ldrb	r3, [r3, #1]
 8008714:	f023 031e 	bic.w	r3, r3, #30
 8008718:	b2da      	uxtb	r2, r3
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	705a      	strb	r2, [r3, #1]
   btn->state |= BTN_STATE_ALWAYS_REDRAW;
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	f043 0302 	orr.w	r3, r3, #2
 8008726:	b2da      	uxtb	r2, r3
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	701a      	strb	r2, [r3, #0]
   if ( style & BTN_STYLE_NO_BORDERS )
 800872c:	78bb      	ldrb	r3, [r7, #2]
 800872e:	f003 0308 	and.w	r3, r3, #8
 8008732:	2b00      	cmp	r3, #0
 8008734:	d006      	beq.n	8008744 <UG_ButtonSetStyle+0x6c>
   {
      btn->style |= BTN_STYLE_NO_BORDERS;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	785b      	ldrb	r3, [r3, #1]
 800873a:	f043 0308 	orr.w	r3, r3, #8
 800873e:	b2da      	uxtb	r2, r3
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	705a      	strb	r2, [r3, #1]
   }
   if ( style & BTN_STYLE_NO_FILL )
 8008744:	78bb      	ldrb	r3, [r7, #2]
 8008746:	f003 0310 	and.w	r3, r3, #16
 800874a:	2b00      	cmp	r3, #0
 800874c:	d006      	beq.n	800875c <UG_ButtonSetStyle+0x84>
   {
      btn->style |= BTN_STYLE_NO_FILL;
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	785b      	ldrb	r3, [r3, #1]
 8008752:	f043 0310 	orr.w	r3, r3, #16
 8008756:	b2da      	uxtb	r2, r3
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	705a      	strb	r2, [r3, #1]
   }
   if ( style & BTN_STYLE_TOGGLE_COLORS )
 800875c:	78bb      	ldrb	r3, [r7, #2]
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b00      	cmp	r3, #0
 8008764:	d007      	beq.n	8008776 <UG_ButtonSetStyle+0x9e>
   {
      btn->style |= BTN_STYLE_TOGGLE_COLORS;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	785b      	ldrb	r3, [r3, #1]
 800876a:	f043 0302 	orr.w	r3, r3, #2
 800876e:	b2da      	uxtb	r2, r3
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	705a      	strb	r2, [r3, #1]
 8008774:	e013      	b.n	800879e <UG_ButtonSetStyle+0xc6>
   }
   else if ( style & BTN_STYLE_USE_ALTERNATE_COLORS )
 8008776:	78bb      	ldrb	r3, [r7, #2]
 8008778:	f003 0304 	and.w	r3, r3, #4
 800877c:	2b00      	cmp	r3, #0
 800877e:	d007      	beq.n	8008790 <UG_ButtonSetStyle+0xb8>
   {
      btn->style |= BTN_STYLE_USE_ALTERNATE_COLORS;
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	785b      	ldrb	r3, [r3, #1]
 8008784:	f043 0304 	orr.w	r3, r3, #4
 8008788:	b2da      	uxtb	r2, r3
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	705a      	strb	r2, [r3, #1]
 800878e:	e006      	b.n	800879e <UG_ButtonSetStyle+0xc6>
   }
   else
   {
      btn->state &= ~BTN_STATE_ALWAYS_REDRAW;
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	f023 0302 	bic.w	r3, r3, #2
 8008798:	b2da      	uxtb	r2, r3
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	701a      	strb	r2, [r3, #0]
   }

   /* 3D or 2D */
   if ( style & BTN_STYLE_3D )
 800879e:	78bb      	ldrb	r3, [r7, #2]
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d007      	beq.n	80087b8 <UG_ButtonSetStyle+0xe0>
   {
      btn->style |= BTN_STYLE_3D;
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	785b      	ldrb	r3, [r3, #1]
 80087ac:	f043 0301 	orr.w	r3, r3, #1
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	705a      	strb	r2, [r3, #1]
 80087b6:	e006      	b.n	80087c6 <UG_ButtonSetStyle+0xee>
   }
   else
   {
      btn->style &= ~BTN_STYLE_3D;
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	785b      	ldrb	r3, [r3, #1]
 80087bc:	f023 0301 	bic.w	r3, r3, #1
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	705a      	strb	r2, [r3, #1]
   }   
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80087ce:	b2da      	uxtb	r2, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
	...

080087e0 <_UG_ButtonUpdate>:
   return align;
}


static void _UG_ButtonUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 80087e0:	b590      	push	{r4, r7, lr}
 80087e2:	b091      	sub	sp, #68	; 0x44
 80087e4:	af02      	add	r7, sp, #8
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
   UG_BUTTON* btn;
   UG_AREA a;
   UG_TEXT txt;
   UG_U8 d,o=0;
 80087ea:	2300      	movs	r3, #0
 80087ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   /* Get object-specific data */
   btn = (UG_BUTTON*)(obj->data);
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	69db      	ldr	r3, [r3, #28]
 80087f4:	633b      	str	r3, [r7, #48]	; 0x30
   #endif

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	f003 0320 	and.w	r3, r3, #32
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f000 8181 	beq.w	8008b06 <_UG_ButtonUpdate+0x326>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	f003 0308 	and.w	r3, r3, #8
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 8157 	beq.w	8008ac0 <_UG_ButtonUpdate+0x2e0>
      {
         /* Full redraw necessary? */
         if ( (obj->state & OBJ_STATE_REDRAW) || (btn->state & BTN_STATE_ALWAYS_REDRAW) )
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800881a:	2b00      	cmp	r3, #0
 800881c:	d106      	bne.n	800882c <_UG_ButtonUpdate+0x4c>
 800881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	f003 0302 	and.w	r3, r3, #2
 8008826:	2b00      	cmp	r3, #0
 8008828:	f000 8108 	beq.w	8008a3c <_UG_ButtonUpdate+0x25c>
         {
            UG_WindowGetArea(wnd,&a);
 800882c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008830:	4619      	mov	r1, r3
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7ff fbfe 	bl	8008034 <UG_WindowGetArea>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800883e:	b29a      	uxth	r2, r3
 8008840:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008844:	b29b      	uxth	r3, r3
 8008846:	4413      	add	r3, r2
 8008848:	b29b      	uxth	r3, r3
 800884a:	b21a      	sxth	r2, r3
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008856:	b29a      	uxth	r2, r3
 8008858:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800885c:	b29b      	uxth	r3, r3
 800885e:	4413      	add	r3, r2
 8008860:	b29b      	uxth	r3, r3
 8008862:	b21a      	sxth	r2, r3
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800886e:	b29a      	uxth	r2, r3
 8008870:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008874:	b29b      	uxth	r3, r3
 8008876:	4413      	add	r3, r2
 8008878:	b29b      	uxth	r3, r3
 800887a:	b21a      	sxth	r2, r3
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008886:	b29a      	uxth	r2, r3
 8008888:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800888c:	b29b      	uxth	r3, r3
 800888e:	4413      	add	r3, r2
 8008890:	b29b      	uxth	r3, r3
 8008892:	b21a      	sxth	r2, r3
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	81da      	strh	r2, [r3, #14]
            if ( obj->a_abs.ye > wnd->ye ) return;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	f300 812b 	bgt.w	8008b00 <_UG_ButtonUpdate+0x320>
            if ( obj->a_abs.xe > wnd->xe ) return;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	f300 8124 	bgt.w	8008b04 <_UG_ButtonUpdate+0x324>
#ifdef UGUI_USE_PRERENDER_EVENT
            _UG_SendObjectPrerenderEvent(wnd, obj);
#endif

            /* 3D or 2D style? */
            d = ( btn->style & BTN_STYLE_3D )? 3:1;
 80088bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088be:	785b      	ldrb	r3, [r3, #1]
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d001      	beq.n	80088cc <_UG_ButtonUpdate+0xec>
 80088c8:	2303      	movs	r3, #3
 80088ca:	e000      	b.n	80088ce <_UG_ButtonUpdate+0xee>
 80088cc:	2301      	movs	r3, #1
 80088ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            txt.bc = btn->bc;
 80088d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d4:	889b      	ldrh	r3, [r3, #4]
 80088d6:	837b      	strh	r3, [r7, #26]
            txt.fc = btn->fc;
 80088d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088da:	885b      	ldrh	r3, [r3, #2]
 80088dc:	833b      	strh	r3, [r7, #24]

            if( btn->state & BTN_STATE_PRESSED )
 80088de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	f003 0301 	and.w	r3, r3, #1
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d01b      	beq.n	8008922 <_UG_ButtonUpdate+0x142>
            {
              /* o is the text offset, to provide a visual effect when pressed */
              o=1;
 80088ea:	2301      	movs	r3, #1
 80088ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
               /* "toggle" style? */
               if( btn->style & BTN_STYLE_TOGGLE_COLORS )
 80088f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f2:	785b      	ldrb	r3, [r3, #1]
 80088f4:	f003 0302 	and.w	r3, r3, #2
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d006      	beq.n	800890a <_UG_ButtonUpdate+0x12a>
               {
                  /* Swap colors */
                  txt.bc = btn->fc;
 80088fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fe:	885b      	ldrh	r3, [r3, #2]
 8008900:	837b      	strh	r3, [r7, #26]
                  txt.fc = btn->bc;
 8008902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008904:	889b      	ldrh	r3, [r3, #4]
 8008906:	833b      	strh	r3, [r7, #24]
 8008908:	e00b      	b.n	8008922 <_UG_ButtonUpdate+0x142>
               }
               /* Use alternate colors? */
               else if ( btn->style & BTN_STYLE_USE_ALTERNATE_COLORS )
 800890a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890c:	785b      	ldrb	r3, [r3, #1]
 800890e:	f003 0304 	and.w	r3, r3, #4
 8008912:	2b00      	cmp	r3, #0
 8008914:	d005      	beq.n	8008922 <_UG_ButtonUpdate+0x142>
               {
                  txt.bc = btn->abc;
 8008916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008918:	891b      	ldrh	r3, [r3, #8]
 800891a:	837b      	strh	r3, [r7, #26]
                  txt.fc = btn->afc;
 800891c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891e:	88db      	ldrh	r3, [r3, #6]
 8008920:	833b      	strh	r3, [r7, #24]
               }
            }
            if ( !(btn->style & BTN_STYLE_NO_FILL) )
 8008922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008924:	785b      	ldrb	r3, [r3, #1]
 8008926:	f003 0310 	and.w	r3, r3, #16
 800892a:	2b00      	cmp	r3, #0
 800892c:	d12d      	bne.n	800898a <_UG_ButtonUpdate+0x1aa>
               UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xe-d, obj->a_abs.ye-d, txt.bc);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008934:	b29a      	uxth	r2, r3
 8008936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800893a:	b29b      	uxth	r3, r3
 800893c:	4413      	add	r3, r2
 800893e:	b29b      	uxth	r3, r3
 8008940:	b218      	sxth	r0, r3
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008948:	b29a      	uxth	r2, r3
 800894a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800894e:	b29b      	uxth	r3, r3
 8008950:	4413      	add	r3, r2
 8008952:	b29b      	uxth	r3, r3
 8008954:	b219      	sxth	r1, r3
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800895c:	b29a      	uxth	r2, r3
 800895e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008962:	b29b      	uxth	r3, r3
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	b29b      	uxth	r3, r3
 8008968:	b21c      	sxth	r4, r3
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008970:	b29a      	uxth	r2, r3
 8008972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008976:	b29b      	uxth	r3, r3
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	b29b      	uxth	r3, r3
 800897c:	b21a      	sxth	r2, r3
 800897e:	8b7b      	ldrh	r3, [r7, #26]
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	4613      	mov	r3, r2
 8008984:	4622      	mov	r2, r4
 8008986:	f7fc ffc7 	bl	8005918 <UG_FillFrame>

            /* Draw button text */
            txt.a.xs = obj->a_abs.xs+d+o;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008990:	b29a      	uxth	r2, r3
 8008992:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008996:	b29b      	uxth	r3, r3
 8008998:	4413      	add	r3, r2
 800899a:	b29a      	uxth	r2, r3
 800899c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	4413      	add	r3, r2
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	b21b      	sxth	r3, r3
 80089a8:	823b      	strh	r3, [r7, #16]
            txt.a.ys = obj->a_abs.ys+d+o;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	4413      	add	r3, r2
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	4413      	add	r3, r2
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	b21b      	sxth	r3, r3
 80089c8:	827b      	strh	r3, [r7, #18]
            txt.a.xe = obj->a_abs.xe-d+o;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	b29a      	uxth	r2, r3
 80089dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	4413      	add	r3, r2
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	b21b      	sxth	r3, r3
 80089e8:	82bb      	strh	r3, [r7, #20]
            txt.a.ye = obj->a_abs.ye-d+o;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	4413      	add	r3, r2
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	b21b      	sxth	r3, r3
 8008a08:	82fb      	strh	r3, [r7, #22]
            txt.align = btn->align;
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0c:	7c1b      	ldrb	r3, [r3, #16]
 8008a0e:	773b      	strb	r3, [r7, #28]
            txt.font = btn->font;
 8008a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	60fb      	str	r3, [r7, #12]
            txt.h_space = 2;
 8008a16:	2302      	movs	r3, #2
 8008a18:	83fb      	strh	r3, [r7, #30]
            txt.v_space = 2;
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	843b      	strh	r3, [r7, #32]
            txt.str = btn->str;
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	60bb      	str	r3, [r7, #8]
            _UG_PutText( &txt );
 8008a24:	f107 0308 	add.w	r3, r7, #8
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7fe fabb 	bl	8006fa4 <_UG_PutText>
            obj->state &= ~OBJ_STATE_REDRAW;
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	701a      	strb	r2, [r3, #0]
#ifdef UGUI_USE_POSTRENDER_EVENT
            _UG_SendObjectPostrenderEvent(wnd, obj);
#endif
         }
         /* Draw button frame */
         if ( !(btn->style & BTN_STYLE_NO_BORDERS) )
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3e:	785b      	ldrb	r3, [r3, #1]
 8008a40:	f003 0308 	and.w	r3, r3, #8
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d153      	bne.n	8008af0 <_UG_ButtonUpdate+0x310>
         {
             if ( btn->style & BTN_STYLE_3D )
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	785b      	ldrb	r3, [r3, #1]
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d019      	beq.n	8008a88 <_UG_ButtonUpdate+0x2a8>
             {  /* 3D */
                _UG_DrawObjectFrame(obj->a_abs.xs,obj->a_abs.ys,obj->a_abs.xe,obj->a_abs.ye, (btn->state&BTN_STATE_PRESSED)?(UG_COLOR*)pal_button_pressed:(UG_COLOR*)pal_button_released);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8008a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d001      	beq.n	8008a7c <_UG_ButtonUpdate+0x29c>
 8008a78:	4b24      	ldr	r3, [pc, #144]	; (8008b0c <_UG_ButtonUpdate+0x32c>)
 8008a7a:	e000      	b.n	8008a7e <_UG_ButtonUpdate+0x29e>
 8008a7c:	4b24      	ldr	r3, [pc, #144]	; (8008b10 <_UG_ButtonUpdate+0x330>)
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	4623      	mov	r3, r4
 8008a82:	f7fe fbe1 	bl	8007248 <_UG_DrawObjectFrame>
 8008a86:	e033      	b.n	8008af0 <_UG_ButtonUpdate+0x310>
             }
             else
             {  /* 2D */
                 UG_DrawFrame(obj->a_abs.xs,obj->a_abs.ys,obj->a_abs.xe,obj->a_abs.ye,(btn->state&BTN_STATE_PRESSED)?btn->abc:btn->afc);
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	f003 0301 	and.w	r3, r3, #1
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d002      	beq.n	8008ab2 <_UG_ButtonUpdate+0x2d2>
 8008aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aae:	891b      	ldrh	r3, [r3, #8]
 8008ab0:	e001      	b.n	8008ab6 <_UG_ButtonUpdate+0x2d6>
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab4:	88db      	ldrh	r3, [r3, #6]
 8008ab6:	9300      	str	r3, [sp, #0]
 8008ab8:	4623      	mov	r3, r4
 8008aba:	f7fd f816 	bl	8005aea <UG_DrawFrame>
 8008abe:	e017      	b.n	8008af0 <_UG_ButtonUpdate+0x310>
             }
         }
      }
      else
      {
          if ( !(btn->style & BTN_STYLE_NO_FILL) )
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac2:	785b      	ldrb	r3, [r3, #1]
 8008ac4:	f003 0310 	and.w	r3, r3, #16
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d111      	bne.n	8008af0 <_UG_ButtonUpdate+0x310>
            UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, wnd->bc);
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	899b      	ldrh	r3, [r3, #12]
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	4623      	mov	r3, r4
 8008aec:	f7fc ff14 	bl	8005918 <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	f023 0320 	bic.w	r3, r3, #32
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	701a      	strb	r2, [r3, #0]
 8008afe:	e002      	b.n	8008b06 <_UG_ButtonUpdate+0x326>
            if ( obj->a_abs.ye > wnd->ye ) return;
 8008b00:	bf00      	nop
 8008b02:	e000      	b.n	8008b06 <_UG_ButtonUpdate+0x326>
            if ( obj->a_abs.xe > wnd->xe ) return;
 8008b04:	bf00      	nop
   }
}
 8008b06:	373c      	adds	r7, #60	; 0x3c
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd90      	pop	{r4, r7, pc}
 8008b0c:	08020884 	.word	0x08020884
 8008b10:	0802089c 	.word	0x0802089c

08008b14 <UG_ProgressCreate>:
const UG_COLOR pal_progress[] = {
    C_PAL_PROGRESS
};

UG_RESULT UG_ProgressCreate( UG_WINDOW* wnd, UG_PROGRESS* pgb, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	4611      	mov	r1, r2
 8008b20:	461a      	mov	r2, r3
 8008b22:	460b      	mov	r3, r1
 8008b24:	71fb      	strb	r3, [r7, #7]
 8008b26:	4613      	mov	r3, r2
 8008b28:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f7fe fcad 	bl	800748a <_UG_GetFreeObject>
 8008b30:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d102      	bne.n	8008b3e <UG_ProgressCreate+0x2a>
 8008b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b3c:	e047      	b.n	8008bce <UG_ProgressCreate+0xba>

   /* Initialize object-specific parameters */
   pgb->style = PGB_STYLE_3D;
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	2201      	movs	r2, #1
 8008b42:	701a      	strb	r2, [r3, #0]
   pgb->fc = wnd->fc;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	895a      	ldrh	r2, [r3, #10]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	805a      	strh	r2, [r3, #2]
   pgb->bc = wnd->bc;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	899a      	ldrh	r2, [r3, #12]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	809a      	strh	r2, [r3, #4]
   pgb->progress = 0;
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	2200      	movs	r2, #0
 8008b58:	719a      	strb	r2, [r3, #6]

   /* Initialize standard object parameters */
   obj->update = _UG_ProgressUpdate;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	4a1e      	ldr	r2, [pc, #120]	; (8008bd8 <UG_ProgressCreate+0xc4>)
 8008b5e:	605a      	str	r2, [r3, #4]
   obj->type = OBJ_TYPE_PROGRESS;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	2205      	movs	r2, #5
 8008b64:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	88ba      	ldrh	r2, [r7, #4]
 8008b70:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	8c3a      	ldrh	r2, [r7, #32]
 8008b76:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008b7c:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008b82:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b8a:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b92:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b9a:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ba2:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	79fa      	ldrb	r2, [r7, #7]
 8008ba8:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 8008bb2:	b2da      	uxtb	r2, r3
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	701a      	strb	r2, [r3, #0]
   obj->data = (void*)pgb;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	f023 0301 	bic.w	r3, r3, #1
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3718      	adds	r7, #24
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	08008cb1 	.word	0x08008cb1

08008bdc <UG_ProgressSetForeColor>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ProgressSetForeColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR fc )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	460b      	mov	r3, r1
 8008be6:	70fb      	strb	r3, [r7, #3]
 8008be8:	4613      	mov	r3, r2
 8008bea:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8008bec:	2300      	movs	r3, #0
 8008bee:	60fb      	str	r3, [r7, #12]
   UG_PROGRESS* pgb=NULL;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_PROGRESS, id );
 8008bf4:	78fb      	ldrb	r3, [r7, #3]
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	2105      	movs	r1, #5
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7fe fae9 	bl	80071d2 <_UG_SearchObject>
 8008c00:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d102      	bne.n	8008c0e <UG_ProgressSetForeColor+0x32>
 8008c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c0c:	e00d      	b.n	8008c2a <UG_ProgressSetForeColor+0x4e>

   pgb = (UG_PROGRESS*)(obj->data);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	69db      	ldr	r3, [r3, #28]
 8008c12:	60bb      	str	r3, [r7, #8]
   pgb->fc = fc;
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	883a      	ldrh	r2, [r7, #0]
 8008c18:	805a      	strh	r2, [r3, #2]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008c22:	b2da      	uxtb	r2, r3
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <UG_ProgressSetProgress>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ProgressSetProgress( UG_WINDOW* wnd, UG_U8 id, UG_U8 progress )
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	70fb      	strb	r3, [r7, #3]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	70bb      	strb	r3, [r7, #2]
   UG_OBJECT* obj=NULL;
 8008c42:	2300      	movs	r3, #0
 8008c44:	60fb      	str	r3, [r7, #12]
   UG_PROGRESS* pgb=NULL;
 8008c46:	2300      	movs	r3, #0
 8008c48:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_PROGRESS, id );
 8008c4a:	78fb      	ldrb	r3, [r7, #3]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	2105      	movs	r1, #5
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7fe fabe 	bl	80071d2 <_UG_SearchObject>
 8008c56:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d102      	bne.n	8008c64 <UG_ProgressSetProgress+0x32>
 8008c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c62:	e020      	b.n	8008ca6 <UG_ProgressSetProgress+0x74>

   progress = progress > 100 ? 100 : progress;
 8008c64:	78bb      	ldrb	r3, [r7, #2]
 8008c66:	2b64      	cmp	r3, #100	; 0x64
 8008c68:	bf28      	it	cs
 8008c6a:	2364      	movcs	r3, #100	; 0x64
 8008c6c:	70bb      	strb	r3, [r7, #2]

   pgb = (UG_PROGRESS*)(obj->data);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	69db      	ldr	r3, [r3, #28]
 8008c72:	60bb      	str	r3, [r7, #8]

   // Only update if different
   if(progress != pgb->progress)
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	799b      	ldrb	r3, [r3, #6]
 8008c78:	78ba      	ldrb	r2, [r7, #2]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d012      	beq.n	8008ca4 <UG_ProgressSetProgress+0x72>
   {
      // Only redraw if new progress is less then actual(Need to redraw the background)
      obj->state |= OBJ_STATE_UPDATE | ((progress < pgb->progress) ? OBJ_STATE_REDRAW : 0);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	b25b      	sxtb	r3, r3
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	7992      	ldrb	r2, [r2, #6]
 8008c88:	78b9      	ldrb	r1, [r7, #2]
 8008c8a:	4291      	cmp	r1, r2
 8008c8c:	d201      	bcs.n	8008c92 <UG_ProgressSetProgress+0x60>
 8008c8e:	2260      	movs	r2, #96	; 0x60
 8008c90:	e000      	b.n	8008c94 <UG_ProgressSetProgress+0x62>
 8008c92:	2220      	movs	r2, #32
 8008c94:	4313      	orrs	r3, r2
 8008c96:	b25b      	sxtb	r3, r3
 8008c98:	b2da      	uxtb	r2, r3
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	701a      	strb	r2, [r3, #0]
      pgb->progress = progress;
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	78ba      	ldrb	r2, [r7, #2]
 8008ca2:	719a      	strb	r2, [r3, #6]
   }

   return UG_RESULT_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
	...

08008cb0 <_UG_ProgressUpdate>:
   }
   return c;
}

static void _UG_ProgressUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 8008cb0:	b590      	push	{r4, r7, lr}
 8008cb2:	b08b      	sub	sp, #44	; 0x2c
 8008cb4:	af02      	add	r7, sp, #8
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
   UG_PROGRESS* pgb;
   UG_AREA a;
   UG_U8 d=0;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	77fb      	strb	r3, [r7, #31]
   UG_S16 w, wps, wpe;

   /* Get object-specific data */
   pgb = (UG_PROGRESS*)(obj->data);
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	61bb      	str	r3, [r7, #24]

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	f003 0320 	and.w	r3, r3, #32
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 81a5 	beq.w	800901c <_UG_ProgressUpdate+0x36c>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	f003 0308 	and.w	r3, r3, #8
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f000 8162 	beq.w	8008fa4 <_UG_ProgressUpdate+0x2f4>
      {
         /* Full redraw necessary? */
         if ( obj->state & OBJ_STATE_REDRAW )
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f000 818c 	beq.w	8009006 <_UG_ProgressUpdate+0x356>
         {
            UG_WindowGetArea(wnd,&a);
 8008cee:	f107 0308 	add.w	r3, r7, #8
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7ff f99d 	bl	8008034 <UG_WindowGetArea>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	4413      	add	r3, r2
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	b21a      	sxth	r2, r3
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	4413      	add	r3, r2
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	b21a      	sxth	r2, r3
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008d30:	b29a      	uxth	r2, r3
 8008d32:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	4413      	add	r3, r2
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	b21a      	sxth	r2, r3
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	4413      	add	r3, r2
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	b21a      	sxth	r2, r3
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	81da      	strh	r2, [r3, #14]

            if ( obj->a_abs.ye > wnd->ye ) return;
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	f300 8155 	bgt.w	8009016 <_UG_ProgressUpdate+0x366>
            if ( obj->a_abs.xe > wnd->xe ) return;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	f300 814e 	bgt.w	800901a <_UG_ProgressUpdate+0x36a>
#ifdef UGUI_USE_PRERENDER_EVENT
            _UG_SendObjectPrerenderEvent(wnd, obj);
#endif

            d = 1;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	77fb      	strb	r3, [r7, #31]
            /* 3D or 2D style? */
            if ( !(pgb->style & PGB_STYLE_NO_BORDERS) )
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	f003 0302 	and.w	r3, r3, #2
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d12e      	bne.n	8008dec <_UG_ProgressUpdate+0x13c>
            {
               if ( pgb->style & PGB_STYLE_3D )
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	f003 0301 	and.w	r3, r3, #1
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d013      	beq.n	8008dc2 <_UG_ProgressUpdate+0x112>
               {  /* 3D */
                  _UG_DrawObjectFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, (UG_COLOR*)pal_progress);
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008db2:	4c9c      	ldr	r4, [pc, #624]	; (8009024 <_UG_ProgressUpdate+0x374>)
 8008db4:	9400      	str	r4, [sp, #0]
 8008db6:	f7fe fa47 	bl	8007248 <_UG_DrawObjectFrame>
                  d += 3;
 8008dba:	7ffb      	ldrb	r3, [r7, #31]
 8008dbc:	3303      	adds	r3, #3
 8008dbe:	77fb      	strb	r3, [r7, #31]
 8008dc0:	e014      	b.n	8008dec <_UG_ProgressUpdate+0x13c>
               }
               else
               {  /* 2D */
                  UG_DrawFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, pgb->fc);
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	885b      	ldrh	r3, [r3, #2]
 8008dde:	9300      	str	r3, [sp, #0]
 8008de0:	4623      	mov	r3, r4
 8008de2:	f7fc fe82 	bl	8005aea <UG_DrawFrame>
                  d += 1;
 8008de6:	7ffb      	ldrb	r3, [r7, #31]
 8008de8:	3301      	adds	r3, #1
 8008dea:	77fb      	strb	r3, [r7, #31]
               }
            }
            
            w   = ((obj->a_abs.xe-d)-(obj->a_abs.xs+d));
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	7ffb      	ldrb	r3, [r7, #31]
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008e02:	b299      	uxth	r1, r3
 8008e04:	7ffb      	ldrb	r3, [r7, #31]
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	440b      	add	r3, r1
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	82fb      	strh	r3, [r7, #22]
            wps = w * pgb->progress / 100;
 8008e12:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008e16:	69ba      	ldr	r2, [r7, #24]
 8008e18:	7992      	ldrb	r2, [r2, #6]
 8008e1a:	fb02 f303 	mul.w	r3, r2, r3
 8008e1e:	4a82      	ldr	r2, [pc, #520]	; (8009028 <_UG_ProgressUpdate+0x378>)
 8008e20:	fb82 1203 	smull	r1, r2, r2, r3
 8008e24:	1152      	asrs	r2, r2, #5
 8008e26:	17db      	asrs	r3, r3, #31
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	82bb      	strh	r3, [r7, #20]
            wpe = w - wps;
 8008e2c:	8afa      	ldrh	r2, [r7, #22]
 8008e2e:	8abb      	ldrh	r3, [r7, #20]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	827b      	strh	r3, [r7, #18]

            if ( !(pgb->style & PGB_STYLE_NO_FILL) )
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	f003 0308 	and.w	r3, r3, #8
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d17d      	bne.n	8008f3e <_UG_ProgressUpdate+0x28e>
                /* What's this for? Drawing a frame before drawing the remaining frames on top on it? Seems to do nothing, waste power? */
               //UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xe-d, obj->a_abs.ye-d, wnd->bc);

            // Draw remaining frame first
            if(wpe > 0)
 8008e42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	dd79      	ble.n	8008f3e <_UG_ProgressUpdate+0x28e>
            {
               UG_S16 xs = obj->a_abs.xs + d + wps;
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	7ffb      	ldrb	r3, [r7, #31]
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	4413      	add	r3, r2
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	8abb      	ldrh	r3, [r7, #20]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	83bb      	strh	r3, [r7, #28]
               UG_S16 xe = obj->a_abs.xe - d;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	7ffb      	ldrb	r3, [r7, #31]
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	823b      	strh	r3, [r7, #16]
               
               if ( pgb->style & PGB_STYLE_FORE_COLOR_MESH )
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d042      	beq.n	8008f06 <_UG_ProgressUpdate+0x256>
               {
                  // FIXME: Need fix, if start at 0, it is shifted 1 pixel right.
                  // Needed to match mesh pattern, otherwise it would "scroll right" 
                  if((((obj->a_abs.xs+d) & 1) && (wps & 1)) || (!((obj->a_abs.xs+d) & 1) && !(wps & 1)))
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008e86:	461a      	mov	r2, r3
 8008e88:	7ffb      	ldrb	r3, [r7, #31]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d004      	beq.n	8008e9e <_UG_ProgressUpdate+0x1ee>
 8008e94:	8abb      	ldrh	r3, [r7, #20]
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10e      	bne.n	8008ebc <_UG_ProgressUpdate+0x20c>
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	7ffb      	ldrb	r3, [r7, #31]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10a      	bne.n	8008ec8 <_UG_ProgressUpdate+0x218>
 8008eb2:	8abb      	ldrh	r3, [r7, #20]
 8008eb4:	f003 0301 	and.w	r3, r3, #1
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d105      	bne.n	8008ec8 <_UG_ProgressUpdate+0x218>
                     xs++;
 8008ebc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	83bb      	strh	r3, [r7, #28]
                  UG_DrawMesh (xs, obj->a_abs.ys+d, xe, obj->a_abs.ye-d, 2, pgb->fc);
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	7ffb      	ldrb	r3, [r7, #31]
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	4413      	add	r3, r2
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	b219      	sxth	r1, r3
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	7ffb      	ldrb	r3, [r7, #31]
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	b21c      	sxth	r4, r3
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	885b      	ldrh	r3, [r3, #2]
 8008ef0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008ef4:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 8008ef8:	9301      	str	r3, [sp, #4]
 8008efa:	2302      	movs	r3, #2
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	4623      	mov	r3, r4
 8008f00:	f7fc fd7c 	bl	80059fc <UG_DrawMesh>
 8008f04:	e01b      	b.n	8008f3e <_UG_ProgressUpdate+0x28e>
               }
               else
               {
                  UG_FillFrame(xs, obj->a_abs.ys+d, xe, obj->a_abs.ye-d, pgb->bc);
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	7ffb      	ldrb	r3, [r7, #31]
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	4413      	add	r3, r2
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	b219      	sxth	r1, r3
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	7ffb      	ldrb	r3, [r7, #31]
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	b21c      	sxth	r4, r3
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	889b      	ldrh	r3, [r3, #4]
 8008f2e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008f32:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	4623      	mov	r3, r4
 8008f3a:	f7fc fced 	bl	8005918 <UG_FillFrame>
               }
            }

            // Draw elapsed frame
            if(pgb->progress > 0)
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	799b      	ldrb	r3, [r3, #6]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d05f      	beq.n	8009006 <_UG_ProgressUpdate+0x356>
            {
               UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xs+d+wps, obj->a_abs.ye-d, pgb->fc);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	7ffb      	ldrb	r3, [r7, #31]
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	4413      	add	r3, r2
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	b218      	sxth	r0, r3
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	7ffb      	ldrb	r3, [r7, #31]
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	4413      	add	r3, r2
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	b219      	sxth	r1, r3
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	7ffb      	ldrb	r3, [r7, #31]
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	4413      	add	r3, r2
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	8abb      	ldrh	r3, [r7, #20]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	b21c      	sxth	r4, r3
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	7ffb      	ldrb	r3, [r7, #31]
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	b21a      	sxth	r2, r3
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	885b      	ldrh	r3, [r3, #2]
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	4622      	mov	r2, r4
 8008f9e:	f7fc fcbb 	bl	8005918 <UG_FillFrame>
 8008fa2:	e030      	b.n	8009006 <_UG_ProgressUpdate+0x356>
#endif
         }
      }
      else
      {
         if ( !(pgb->style & PGB_STYLE_NO_FILL) )
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	f003 0308 	and.w	r3, r3, #8
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d12a      	bne.n	8009006 <_UG_ProgressUpdate+0x356>
            UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xe-d, obj->a_abs.ye-d, wnd->bc);
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	7ffb      	ldrb	r3, [r7, #31]
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	4413      	add	r3, r2
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	b218      	sxth	r0, r3
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	7ffb      	ldrb	r3, [r7, #31]
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	4413      	add	r3, r2
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	b219      	sxth	r1, r3
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	7ffb      	ldrb	r3, [r7, #31]
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	b21c      	sxth	r4, r3
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	7ffb      	ldrb	r3, [r7, #31]
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	b21a      	sxth	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	899b      	ldrh	r3, [r3, #12]
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	4613      	mov	r3, r2
 8009000:	4622      	mov	r2, r4
 8009002:	f7fc fc89 	bl	8005918 <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	f023 0320 	bic.w	r3, r3, #32
 800900e:	b2da      	uxtb	r2, r3
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	701a      	strb	r2, [r3, #0]
 8009014:	e002      	b.n	800901c <_UG_ProgressUpdate+0x36c>
            if ( obj->a_abs.ye > wnd->ye ) return;
 8009016:	bf00      	nop
 8009018:	e000      	b.n	800901c <_UG_ProgressUpdate+0x36c>
            if ( obj->a_abs.xe > wnd->xe ) return;
 800901a:	bf00      	nop
   }
}
 800901c:	3724      	adds	r7, #36	; 0x24
 800901e:	46bd      	mov	sp, r7
 8009020:	bd90      	pop	{r4, r7, pc}
 8009022:	bf00      	nop
 8009024:	080208b4 	.word	0x080208b4
 8009028:	51eb851f 	.word	0x51eb851f

0800902c <UG_TextboxCreate>:

/* Static functions */
static void _UG_TextboxUpdate(UG_WINDOW* wnd, UG_OBJECT* obj);

UG_RESULT UG_TextboxCreate( UG_WINDOW* wnd, UG_TEXTBOX* txb, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	4611      	mov	r1, r2
 8009038:	461a      	mov	r2, r3
 800903a:	460b      	mov	r3, r1
 800903c:	71fb      	strb	r3, [r7, #7]
 800903e:	4613      	mov	r3, r2
 8009040:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f7fe fa21 	bl	800748a <_UG_GetFreeObject>
 8009048:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d102      	bne.n	8009056 <UG_TextboxCreate+0x2a>
 8009050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009054:	e05d      	b.n	8009112 <UG_TextboxCreate+0xe6>

   /* Initialize object-specific parameters */
   txb->str = NULL;
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	2200      	movs	r2, #0
 800905a:	601a      	str	r2, [r3, #0]
   txb->font = UG_GetGUI() != NULL ? (UG_GetGUI()->font) : NULL;
 800905c:	f7fc fc1c 	bl	8005898 <UG_GetGUI>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d004      	beq.n	8009070 <UG_TextboxCreate+0x44>
 8009066:	f7fc fc17 	bl	8005898 <UG_GetGUI>
 800906a:	4603      	mov	r3, r0
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	e000      	b.n	8009072 <UG_TextboxCreate+0x46>
 8009070:	2300      	movs	r3, #0
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	6053      	str	r3, [r2, #4]
   txb->style = 0; /* reserved */
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	2200      	movs	r2, #0
 800907a:	721a      	strb	r2, [r3, #8]
   txb->fc = wnd->fc;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	895a      	ldrh	r2, [r3, #10]
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	815a      	strh	r2, [r3, #10]
   txb->bc = wnd->bc;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	899a      	ldrh	r2, [r3, #12]
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	819a      	strh	r2, [r3, #12]
   txb->align = ALIGN_CENTER;
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	2212      	movs	r2, #18
 8009090:	739a      	strb	r2, [r3, #14]
   txb->h_space = 0;
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	2200      	movs	r2, #0
 8009096:	73da      	strb	r2, [r3, #15]
   txb->v_space = 0;
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	2200      	movs	r2, #0
 800909c:	741a      	strb	r2, [r3, #16]

   /* Initialize standard object parameters */
   obj->update = _UG_TextboxUpdate;
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	4a1e      	ldr	r2, [pc, #120]	; (800911c <UG_TextboxCreate+0xf0>)
 80090a2:	605a      	str	r2, [r3, #4]
   #ifdef UGUI_USE_TOUCH
   obj->touch_state = OBJ_TOUCH_STATE_INIT;
   #endif
   obj->type = OBJ_TYPE_TEXTBOX;
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	2202      	movs	r2, #2
 80090a8:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	2200      	movs	r2, #0
 80090ae:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	88ba      	ldrh	r2, [r7, #4]
 80090b4:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	8c3a      	ldrh	r2, [r7, #32]
 80090ba:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80090c0:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80090c6:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090ce:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090d6:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090de:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090e6:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	79fa      	ldrb	r2, [r7, #7]
 80090ec:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 80090f6:	b2da      	uxtb	r2, r3
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	701a      	strb	r2, [r3, #0]
   obj->data = (void*)txb;
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	f023 0301 	bic.w	r3, r3, #1
 800910a:	b2da      	uxtb	r2, r3
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3718      	adds	r7, #24
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	080092cb 	.word	0x080092cb

08009120 <UG_TextboxSetForeColor>:

   return UG_RESULT_OK;
}

UG_RESULT UG_TextboxSetForeColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR fc )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	460b      	mov	r3, r1
 800912a:	70fb      	strb	r3, [r7, #3]
 800912c:	4613      	mov	r3, r2
 800912e:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8009130:	2300      	movs	r3, #0
 8009132:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 8009134:	2300      	movs	r3, #0
 8009136:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8009138:	78fb      	ldrb	r3, [r7, #3]
 800913a:	461a      	mov	r2, r3
 800913c:	2102      	movs	r1, #2
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7fe f847 	bl	80071d2 <_UG_SearchObject>
 8009144:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d102      	bne.n	8009152 <UG_TextboxSetForeColor+0x32>
 800914c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009150:	e00d      	b.n	800916e <UG_TextboxSetForeColor+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	69db      	ldr	r3, [r3, #28]
 8009156:	60bb      	str	r3, [r7, #8]
   txb->fc = fc;
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	883a      	ldrh	r2, [r7, #0]
 800915c:	815a      	strh	r2, [r3, #10]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009166:	b2da      	uxtb	r2, r3
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <UG_TextboxSetBackColor>:

UG_RESULT UG_TextboxSetBackColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR bc )
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b084      	sub	sp, #16
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	460b      	mov	r3, r1
 8009180:	70fb      	strb	r3, [r7, #3]
 8009182:	4613      	mov	r3, r2
 8009184:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8009186:	2300      	movs	r3, #0
 8009188:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 800918a:	2300      	movs	r3, #0
 800918c:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 800918e:	78fb      	ldrb	r3, [r7, #3]
 8009190:	461a      	mov	r2, r3
 8009192:	2102      	movs	r1, #2
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f7fe f81c 	bl	80071d2 <_UG_SearchObject>
 800919a:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d102      	bne.n	80091a8 <UG_TextboxSetBackColor+0x32>
 80091a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091a6:	e00d      	b.n	80091c4 <UG_TextboxSetBackColor+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	69db      	ldr	r3, [r3, #28]
 80091ac:	60bb      	str	r3, [r7, #8]
   txb->bc = bc;
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	883a      	ldrh	r2, [r7, #0]
 80091b2:	819a      	strh	r2, [r3, #12]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3710      	adds	r7, #16
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <UG_TextboxSetText>:

UG_RESULT UG_TextboxSetText( UG_WINDOW* wnd, UG_U8 id, char* str )
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b086      	sub	sp, #24
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	460b      	mov	r3, r1
 80091d6:	607a      	str	r2, [r7, #4]
 80091d8:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 80091da:	2300      	movs	r3, #0
 80091dc:	617b      	str	r3, [r7, #20]
   UG_TEXTBOX* txb=NULL;
 80091de:	2300      	movs	r3, #0
 80091e0:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 80091e2:	7afb      	ldrb	r3, [r7, #11]
 80091e4:	461a      	mov	r2, r3
 80091e6:	2102      	movs	r1, #2
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f7fd fff2 	bl	80071d2 <_UG_SearchObject>
 80091ee:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d102      	bne.n	80091fc <UG_TextboxSetText+0x30>
 80091f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091fa:	e00d      	b.n	8009218 <UG_TextboxSetText+0x4c>

   txb = (UG_TEXTBOX*)(obj->data);
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	69db      	ldr	r3, [r3, #28]
 8009200:	613b      	str	r3, [r7, #16]
   txb->str = str;
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	601a      	str	r2, [r3, #0]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009210:	b2da      	uxtb	r2, r3
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <UG_TextboxSetFont>:

UG_RESULT UG_TextboxSetFont( UG_WINDOW* wnd, UG_U8 id, UG_FONT* font )
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	460b      	mov	r3, r1
 800922a:	607a      	str	r2, [r7, #4]
 800922c:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 800922e:	2300      	movs	r3, #0
 8009230:	617b      	str	r3, [r7, #20]
   UG_TEXTBOX* txb=NULL;
 8009232:	2300      	movs	r3, #0
 8009234:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8009236:	7afb      	ldrb	r3, [r7, #11]
 8009238:	461a      	mov	r2, r3
 800923a:	2102      	movs	r1, #2
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f7fd ffc8 	bl	80071d2 <_UG_SearchObject>
 8009242:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d102      	bne.n	8009250 <UG_TextboxSetFont+0x30>
 800924a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800924e:	e00d      	b.n	800926c <UG_TextboxSetFont+0x4c>

   txb = (UG_TEXTBOX*)(obj->data);
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	69db      	ldr	r3, [r3, #28]
 8009254:	613b      	str	r3, [r7, #16]
   txb->font = font;
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	605a      	str	r2, [r3, #4]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009264:	b2da      	uxtb	r2, r3
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3718      	adds	r7, #24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <UG_TextboxSetAlignment>:

   return UG_RESULT_OK;
}

UG_RESULT UG_TextboxSetAlignment( UG_WINDOW* wnd, UG_U8 id, UG_U8 align )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	460b      	mov	r3, r1
 800927e:	70fb      	strb	r3, [r7, #3]
 8009280:	4613      	mov	r3, r2
 8009282:	70bb      	strb	r3, [r7, #2]
   UG_OBJECT* obj=NULL;
 8009284:	2300      	movs	r3, #0
 8009286:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 8009288:	2300      	movs	r3, #0
 800928a:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 800928c:	78fb      	ldrb	r3, [r7, #3]
 800928e:	461a      	mov	r2, r3
 8009290:	2102      	movs	r1, #2
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f7fd ff9d 	bl	80071d2 <_UG_SearchObject>
 8009298:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d102      	bne.n	80092a6 <UG_TextboxSetAlignment+0x32>
 80092a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092a4:	e00d      	b.n	80092c2 <UG_TextboxSetAlignment+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	69db      	ldr	r3, [r3, #28]
 80092aa:	60bb      	str	r3, [r7, #8]
   txb->align = align;
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	78ba      	ldrb	r2, [r7, #2]
 80092b0:	739a      	strb	r2, [r3, #14]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80092ba:	b2da      	uxtb	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <_UG_TextboxUpdate>:
   }
   return align;
}

static void _UG_TextboxUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 80092ca:	b590      	push	{r4, r7, lr}
 80092cc:	b08f      	sub	sp, #60	; 0x3c
 80092ce:	af02      	add	r7, sp, #8
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	6039      	str	r1, [r7, #0]
   UG_TEXTBOX* txb;
   UG_AREA a;
   UG_TEXT txt;

   /* Get object-specific data */
   txb = (UG_TEXTBOX*)(obj->data);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	69db      	ldr	r3, [r3, #28]
 80092d8:	62fb      	str	r3, [r7, #44]	; 0x2c

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	f003 0320 	and.w	r3, r3, #32
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 80b8 	beq.w	8009458 <_UG_TextboxUpdate+0x18e>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	f003 0308 	and.w	r3, r3, #8
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f000 8094 	beq.w	800941e <_UG_TextboxUpdate+0x154>
      {
         /* Full redraw necessary? */
         if ( obj->state & OBJ_STATE_REDRAW )
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f000 809f 	beq.w	8009442 <_UG_TextboxUpdate+0x178>
         {
            UG_WindowGetArea(wnd,&a);
 8009304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009308:	4619      	mov	r1, r3
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f7fe fe92 	bl	8008034 <UG_WindowGetArea>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009316:	b29a      	uxth	r2, r3
 8009318:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800931c:	b29b      	uxth	r3, r3
 800931e:	4413      	add	r3, r2
 8009320:	b29b      	uxth	r3, r3
 8009322:	b21a      	sxth	r2, r3
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800932e:	b29a      	uxth	r2, r3
 8009330:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009334:	b29b      	uxth	r3, r3
 8009336:	4413      	add	r3, r2
 8009338:	b29b      	uxth	r3, r3
 800933a:	b21a      	sxth	r2, r3
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009346:	b29a      	uxth	r2, r3
 8009348:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800934c:	b29b      	uxth	r3, r3
 800934e:	4413      	add	r3, r2
 8009350:	b29b      	uxth	r3, r3
 8009352:	b21a      	sxth	r2, r3
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800935e:	b29a      	uxth	r2, r3
 8009360:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009364:	b29b      	uxth	r3, r3
 8009366:	4413      	add	r3, r2
 8009368:	b29b      	uxth	r3, r3
 800936a:	b21a      	sxth	r2, r3
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	81da      	strh	r2, [r3, #14]
            if ( obj->a_abs.ye > wnd->ye ) return;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800937c:	429a      	cmp	r2, r3
 800937e:	dc68      	bgt.n	8009452 <_UG_TextboxUpdate+0x188>
            if ( obj->a_abs.xe > wnd->xe ) return;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800938c:	429a      	cmp	r2, r3
 800938e:	dc62      	bgt.n	8009456 <_UG_TextboxUpdate+0x18c>
#ifdef UGUI_USE_PRERENDER_EVENT
            _UG_SendObjectPrerenderEvent(wnd, obj);
#endif

            txt.bc = txb->bc;
 8009390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009392:	899b      	ldrh	r3, [r3, #12]
 8009394:	837b      	strh	r3, [r7, #26]
            txt.fc = txb->fc;
 8009396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009398:	895b      	ldrh	r3, [r3, #10]
 800939a:	833b      	strh	r3, [r7, #24]

            UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, txt.bc);
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 80093b4:	8b7b      	ldrh	r3, [r7, #26]
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	4623      	mov	r3, r4
 80093ba:	f7fc faad 	bl	8005918 <UG_FillFrame>

            /* Draw Textbox text */
            txt.a.xs = obj->a_abs.xs;
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80093c4:	823b      	strh	r3, [r7, #16]
            txt.a.ys = obj->a_abs.ys;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80093cc:	827b      	strh	r3, [r7, #18]
            txt.a.xe = obj->a_abs.xe;
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80093d4:	82bb      	strh	r3, [r7, #20]
            txt.a.ye = obj->a_abs.ye;
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80093dc:	82fb      	strh	r3, [r7, #22]
            txt.align = txb->align;
 80093de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e0:	7b9b      	ldrb	r3, [r3, #14]
 80093e2:	773b      	strb	r3, [r7, #28]
            txt.font = txb->font;
 80093e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	60fb      	str	r3, [r7, #12]
            txt.h_space = txb->h_space;
 80093ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ec:	f993 300f 	ldrsb.w	r3, [r3, #15]
 80093f0:	b21b      	sxth	r3, r3
 80093f2:	83fb      	strh	r3, [r7, #30]
            txt.v_space = txb->v_space;
 80093f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f6:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80093fa:	b21b      	sxth	r3, r3
 80093fc:	843b      	strh	r3, [r7, #32]
            txt.str = txb->str;
 80093fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	60bb      	str	r3, [r7, #8]
            _UG_PutText( &txt );
 8009404:	f107 0308 	add.w	r3, r7, #8
 8009408:	4618      	mov	r0, r3
 800940a:	f7fd fdcb 	bl	8006fa4 <_UG_PutText>
            obj->state &= ~OBJ_STATE_REDRAW;
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009416:	b2da      	uxtb	r2, r3
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	701a      	strb	r2, [r3, #0]
 800941c:	e011      	b.n	8009442 <_UG_TextboxUpdate+0x178>
#endif
         }
      }
      else
      {
         UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, wnd->bc);
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	899b      	ldrh	r3, [r3, #12]
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	4623      	mov	r3, r4
 800943e:	f7fc fa6b 	bl	8005918 <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	f023 0320 	bic.w	r3, r3, #32
 800944a:	b2da      	uxtb	r2, r3
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	701a      	strb	r2, [r3, #0]
 8009450:	e002      	b.n	8009458 <_UG_TextboxUpdate+0x18e>
            if ( obj->a_abs.ye > wnd->ye ) return;
 8009452:	bf00      	nop
 8009454:	e000      	b.n	8009458 <_UG_TextboxUpdate+0x18e>
            if ( obj->a_abs.xe > wnd->xe ) return;
 8009456:	bf00      	nop
   }
}
 8009458:	3734      	adds	r7, #52	; 0x34
 800945a:	46bd      	mov	sp, r7
 800945c:	bd90      	pop	{r4, r7, pc}
	...

08009460 <__NVIC_SetPriority>:
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	4603      	mov	r3, r0
 8009468:	6039      	str	r1, [r7, #0]
 800946a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800946c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009470:	2b00      	cmp	r3, #0
 8009472:	db0a      	blt.n	800948a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	b2da      	uxtb	r2, r3
 8009478:	490c      	ldr	r1, [pc, #48]	; (80094ac <__NVIC_SetPriority+0x4c>)
 800947a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800947e:	0112      	lsls	r2, r2, #4
 8009480:	b2d2      	uxtb	r2, r2
 8009482:	440b      	add	r3, r1
 8009484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009488:	e00a      	b.n	80094a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	b2da      	uxtb	r2, r3
 800948e:	4908      	ldr	r1, [pc, #32]	; (80094b0 <__NVIC_SetPriority+0x50>)
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	f003 030f 	and.w	r3, r3, #15
 8009496:	3b04      	subs	r3, #4
 8009498:	0112      	lsls	r2, r2, #4
 800949a:	b2d2      	uxtb	r2, r2
 800949c:	440b      	add	r3, r1
 800949e:	761a      	strb	r2, [r3, #24]
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr
 80094ac:	e000e100 	.word	0xe000e100
 80094b0:	e000ed00 	.word	0xe000ed00

080094b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80094b4:	b580      	push	{r7, lr}
 80094b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80094b8:	2100      	movs	r1, #0
 80094ba:	f06f 0004 	mvn.w	r0, #4
 80094be:	f7ff ffcf 	bl	8009460 <__NVIC_SetPriority>
#endif
}
 80094c2:	bf00      	nop
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094ce:	f3ef 8305 	mrs	r3, IPSR
 80094d2:	603b      	str	r3, [r7, #0]
  return(result);
 80094d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d003      	beq.n	80094e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80094da:	f06f 0305 	mvn.w	r3, #5
 80094de:	607b      	str	r3, [r7, #4]
 80094e0:	e00c      	b.n	80094fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80094e2:	4b0a      	ldr	r3, [pc, #40]	; (800950c <osKernelInitialize+0x44>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d105      	bne.n	80094f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80094ea:	4b08      	ldr	r3, [pc, #32]	; (800950c <osKernelInitialize+0x44>)
 80094ec:	2201      	movs	r2, #1
 80094ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	607b      	str	r3, [r7, #4]
 80094f4:	e002      	b.n	80094fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80094f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80094fc:	687b      	ldr	r3, [r7, #4]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	20000510 	.word	0x20000510

08009510 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009516:	f3ef 8305 	mrs	r3, IPSR
 800951a:	603b      	str	r3, [r7, #0]
  return(result);
 800951c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800951e:	2b00      	cmp	r3, #0
 8009520:	d003      	beq.n	800952a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009522:	f06f 0305 	mvn.w	r3, #5
 8009526:	607b      	str	r3, [r7, #4]
 8009528:	e010      	b.n	800954c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800952a:	4b0b      	ldr	r3, [pc, #44]	; (8009558 <osKernelStart+0x48>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b01      	cmp	r3, #1
 8009530:	d109      	bne.n	8009546 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009532:	f7ff ffbf 	bl	80094b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009536:	4b08      	ldr	r3, [pc, #32]	; (8009558 <osKernelStart+0x48>)
 8009538:	2202      	movs	r2, #2
 800953a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800953c:	f001 fcbc 	bl	800aeb8 <vTaskStartScheduler>
      stat = osOK;
 8009540:	2300      	movs	r3, #0
 8009542:	607b      	str	r3, [r7, #4]
 8009544:	e002      	b.n	800954c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800954a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800954c:	687b      	ldr	r3, [r7, #4]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3708      	adds	r7, #8
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	20000510 	.word	0x20000510

0800955c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800955c:	b580      	push	{r7, lr}
 800955e:	b08e      	sub	sp, #56	; 0x38
 8009560:	af04      	add	r7, sp, #16
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009568:	2300      	movs	r3, #0
 800956a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800956c:	f3ef 8305 	mrs	r3, IPSR
 8009570:	617b      	str	r3, [r7, #20]
  return(result);
 8009572:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009574:	2b00      	cmp	r3, #0
 8009576:	d17e      	bne.n	8009676 <osThreadNew+0x11a>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d07b      	beq.n	8009676 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800957e:	2380      	movs	r3, #128	; 0x80
 8009580:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009582:	2318      	movs	r3, #24
 8009584:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009586:	2300      	movs	r3, #0
 8009588:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800958a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800958e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d045      	beq.n	8009622 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d002      	beq.n	80095a4 <osThreadNew+0x48>
        name = attr->name;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d002      	beq.n	80095b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	699b      	ldr	r3, [r3, #24]
 80095b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d008      	beq.n	80095ca <osThreadNew+0x6e>
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	2b38      	cmp	r3, #56	; 0x38
 80095bc:	d805      	bhi.n	80095ca <osThreadNew+0x6e>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d001      	beq.n	80095ce <osThreadNew+0x72>
        return (NULL);
 80095ca:	2300      	movs	r3, #0
 80095cc:	e054      	b.n	8009678 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	695b      	ldr	r3, [r3, #20]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d003      	beq.n	80095de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	695b      	ldr	r3, [r3, #20]
 80095da:	089b      	lsrs	r3, r3, #2
 80095dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00e      	beq.n	8009604 <osThreadNew+0xa8>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	2bbb      	cmp	r3, #187	; 0xbb
 80095ec:	d90a      	bls.n	8009604 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d006      	beq.n	8009604 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	695b      	ldr	r3, [r3, #20]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d002      	beq.n	8009604 <osThreadNew+0xa8>
        mem = 1;
 80095fe:	2301      	movs	r3, #1
 8009600:	61bb      	str	r3, [r7, #24]
 8009602:	e010      	b.n	8009626 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10c      	bne.n	8009626 <osThreadNew+0xca>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d108      	bne.n	8009626 <osThreadNew+0xca>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	691b      	ldr	r3, [r3, #16]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d104      	bne.n	8009626 <osThreadNew+0xca>
          mem = 0;
 800961c:	2300      	movs	r3, #0
 800961e:	61bb      	str	r3, [r7, #24]
 8009620:	e001      	b.n	8009626 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009622:	2300      	movs	r3, #0
 8009624:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	2b01      	cmp	r3, #1
 800962a:	d110      	bne.n	800964e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009634:	9202      	str	r2, [sp, #8]
 8009636:	9301      	str	r3, [sp, #4]
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	9300      	str	r3, [sp, #0]
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	6a3a      	ldr	r2, [r7, #32]
 8009640:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f001 fa4c 	bl	800aae0 <xTaskCreateStatic>
 8009648:	4603      	mov	r3, r0
 800964a:	613b      	str	r3, [r7, #16]
 800964c:	e013      	b.n	8009676 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d110      	bne.n	8009676 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009654:	6a3b      	ldr	r3, [r7, #32]
 8009656:	b29a      	uxth	r2, r3
 8009658:	f107 0310 	add.w	r3, r7, #16
 800965c:	9301      	str	r3, [sp, #4]
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f001 fa97 	bl	800ab9a <xTaskCreate>
 800966c:	4603      	mov	r3, r0
 800966e:	2b01      	cmp	r3, #1
 8009670:	d001      	beq.n	8009676 <osThreadNew+0x11a>
            hTask = NULL;
 8009672:	2300      	movs	r3, #0
 8009674:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009676:	693b      	ldr	r3, [r7, #16]
}
 8009678:	4618      	mov	r0, r3
 800967a:	3728      	adds	r7, #40	; 0x28
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009688:	f3ef 8305 	mrs	r3, IPSR
 800968c:	60bb      	str	r3, [r7, #8]
  return(result);
 800968e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009690:	2b00      	cmp	r3, #0
 8009692:	d003      	beq.n	800969c <osDelay+0x1c>
    stat = osErrorISR;
 8009694:	f06f 0305 	mvn.w	r3, #5
 8009698:	60fb      	str	r3, [r7, #12]
 800969a:	e007      	b.n	80096ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800969c:	2300      	movs	r3, #0
 800969e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d002      	beq.n	80096ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f001 fbd2 	bl	800ae50 <vTaskDelay>
    }
  }

  return (stat);
 80096ac:	68fb      	ldr	r3, [r7, #12]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b08a      	sub	sp, #40	; 0x28
 80096ba:	af02      	add	r7, sp, #8
 80096bc:	60f8      	str	r0, [r7, #12]
 80096be:	60b9      	str	r1, [r7, #8]
 80096c0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80096c2:	2300      	movs	r3, #0
 80096c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096c6:	f3ef 8305 	mrs	r3, IPSR
 80096ca:	613b      	str	r3, [r7, #16]
  return(result);
 80096cc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d175      	bne.n	80097be <osSemaphoreNew+0x108>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d072      	beq.n	80097be <osSemaphoreNew+0x108>
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d86e      	bhi.n	80097be <osSemaphoreNew+0x108>
    mem = -1;
 80096e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096e4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d015      	beq.n	8009718 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d006      	beq.n	8009702 <osSemaphoreNew+0x4c>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	2b4f      	cmp	r3, #79	; 0x4f
 80096fa:	d902      	bls.n	8009702 <osSemaphoreNew+0x4c>
        mem = 1;
 80096fc:	2301      	movs	r3, #1
 80096fe:	61bb      	str	r3, [r7, #24]
 8009700:	e00c      	b.n	800971c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d108      	bne.n	800971c <osSemaphoreNew+0x66>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d104      	bne.n	800971c <osSemaphoreNew+0x66>
          mem = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	61bb      	str	r3, [r7, #24]
 8009716:	e001      	b.n	800971c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009718:	2300      	movs	r3, #0
 800971a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009722:	d04c      	beq.n	80097be <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d128      	bne.n	800977c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d10a      	bne.n	8009746 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	2203      	movs	r2, #3
 8009736:	9200      	str	r2, [sp, #0]
 8009738:	2200      	movs	r2, #0
 800973a:	2100      	movs	r1, #0
 800973c:	2001      	movs	r0, #1
 800973e:	f000 fa29 	bl	8009b94 <xQueueGenericCreateStatic>
 8009742:	61f8      	str	r0, [r7, #28]
 8009744:	e005      	b.n	8009752 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009746:	2203      	movs	r2, #3
 8009748:	2100      	movs	r1, #0
 800974a:	2001      	movs	r0, #1
 800974c:	f000 fa9a 	bl	8009c84 <xQueueGenericCreate>
 8009750:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d022      	beq.n	800979e <osSemaphoreNew+0xe8>
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d01f      	beq.n	800979e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800975e:	2300      	movs	r3, #0
 8009760:	2200      	movs	r2, #0
 8009762:	2100      	movs	r1, #0
 8009764:	69f8      	ldr	r0, [r7, #28]
 8009766:	f000 fb55 	bl	8009e14 <xQueueGenericSend>
 800976a:	4603      	mov	r3, r0
 800976c:	2b01      	cmp	r3, #1
 800976e:	d016      	beq.n	800979e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009770:	69f8      	ldr	r0, [r7, #28]
 8009772:	f000 ffe1 	bl	800a738 <vQueueDelete>
            hSemaphore = NULL;
 8009776:	2300      	movs	r3, #0
 8009778:	61fb      	str	r3, [r7, #28]
 800977a:	e010      	b.n	800979e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d108      	bne.n	8009794 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	461a      	mov	r2, r3
 8009788:	68b9      	ldr	r1, [r7, #8]
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f000 fad7 	bl	8009d3e <xQueueCreateCountingSemaphoreStatic>
 8009790:	61f8      	str	r0, [r7, #28]
 8009792:	e004      	b.n	800979e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009794:	68b9      	ldr	r1, [r7, #8]
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	f000 fb08 	bl	8009dac <xQueueCreateCountingSemaphore>
 800979c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d00c      	beq.n	80097be <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	617b      	str	r3, [r7, #20]
 80097b0:	e001      	b.n	80097b6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80097b2:	2300      	movs	r3, #0
 80097b4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80097b6:	6979      	ldr	r1, [r7, #20]
 80097b8:	69f8      	ldr	r0, [r7, #28]
 80097ba:	f001 f909 	bl	800a9d0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80097be:	69fb      	ldr	r3, [r7, #28]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3720      	adds	r7, #32
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80097d6:	2300      	movs	r3, #0
 80097d8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d103      	bne.n	80097e8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80097e0:	f06f 0303 	mvn.w	r3, #3
 80097e4:	617b      	str	r3, [r7, #20]
 80097e6:	e039      	b.n	800985c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097e8:	f3ef 8305 	mrs	r3, IPSR
 80097ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80097ee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d022      	beq.n	800983a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d003      	beq.n	8009802 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80097fa:	f06f 0303 	mvn.w	r3, #3
 80097fe:	617b      	str	r3, [r7, #20]
 8009800:	e02c      	b.n	800985c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009802:	2300      	movs	r3, #0
 8009804:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009806:	f107 0308 	add.w	r3, r7, #8
 800980a:	461a      	mov	r2, r3
 800980c:	2100      	movs	r1, #0
 800980e:	6938      	ldr	r0, [r7, #16]
 8009810:	f000 ff12 	bl	800a638 <xQueueReceiveFromISR>
 8009814:	4603      	mov	r3, r0
 8009816:	2b01      	cmp	r3, #1
 8009818:	d003      	beq.n	8009822 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800981a:	f06f 0302 	mvn.w	r3, #2
 800981e:	617b      	str	r3, [r7, #20]
 8009820:	e01c      	b.n	800985c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d019      	beq.n	800985c <osSemaphoreAcquire+0x94>
 8009828:	4b0f      	ldr	r3, [pc, #60]	; (8009868 <osSemaphoreAcquire+0xa0>)
 800982a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800982e:	601a      	str	r2, [r3, #0]
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	f3bf 8f6f 	isb	sy
 8009838:	e010      	b.n	800985c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	6938      	ldr	r0, [r7, #16]
 800983e:	f000 fdef 	bl	800a420 <xQueueSemaphoreTake>
 8009842:	4603      	mov	r3, r0
 8009844:	2b01      	cmp	r3, #1
 8009846:	d009      	beq.n	800985c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d003      	beq.n	8009856 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800984e:	f06f 0301 	mvn.w	r3, #1
 8009852:	617b      	str	r3, [r7, #20]
 8009854:	e002      	b.n	800985c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009856:	f06f 0302 	mvn.w	r3, #2
 800985a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800985c:	697b      	ldr	r3, [r7, #20]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3718      	adds	r7, #24
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	e000ed04 	.word	0xe000ed04

0800986c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009878:	2300      	movs	r3, #0
 800987a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d103      	bne.n	800988a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009882:	f06f 0303 	mvn.w	r3, #3
 8009886:	617b      	str	r3, [r7, #20]
 8009888:	e02c      	b.n	80098e4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800988a:	f3ef 8305 	mrs	r3, IPSR
 800988e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009890:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009892:	2b00      	cmp	r3, #0
 8009894:	d01a      	beq.n	80098cc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009896:	2300      	movs	r3, #0
 8009898:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800989a:	f107 0308 	add.w	r3, r7, #8
 800989e:	4619      	mov	r1, r3
 80098a0:	6938      	ldr	r0, [r7, #16]
 80098a2:	f000 fc50 	bl	800a146 <xQueueGiveFromISR>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d003      	beq.n	80098b4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80098ac:	f06f 0302 	mvn.w	r3, #2
 80098b0:	617b      	str	r3, [r7, #20]
 80098b2:	e017      	b.n	80098e4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d014      	beq.n	80098e4 <osSemaphoreRelease+0x78>
 80098ba:	4b0d      	ldr	r3, [pc, #52]	; (80098f0 <osSemaphoreRelease+0x84>)
 80098bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	f3bf 8f4f 	dsb	sy
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	e00b      	b.n	80098e4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80098cc:	2300      	movs	r3, #0
 80098ce:	2200      	movs	r2, #0
 80098d0:	2100      	movs	r1, #0
 80098d2:	6938      	ldr	r0, [r7, #16]
 80098d4:	f000 fa9e 	bl	8009e14 <xQueueGenericSend>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d002      	beq.n	80098e4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80098de:	f06f 0302 	mvn.w	r3, #2
 80098e2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80098e4:	697b      	ldr	r3, [r7, #20]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3718      	adds	r7, #24
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	e000ed04 	.word	0xe000ed04

080098f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	4a07      	ldr	r2, [pc, #28]	; (8009920 <vApplicationGetIdleTaskMemory+0x2c>)
 8009904:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	4a06      	ldr	r2, [pc, #24]	; (8009924 <vApplicationGetIdleTaskMemory+0x30>)
 800990a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2280      	movs	r2, #128	; 0x80
 8009910:	601a      	str	r2, [r3, #0]
}
 8009912:	bf00      	nop
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	20000514 	.word	0x20000514
 8009924:	200005d0 	.word	0x200005d0

08009928 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	4a07      	ldr	r2, [pc, #28]	; (8009954 <vApplicationGetTimerTaskMemory+0x2c>)
 8009938:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	4a06      	ldr	r2, [pc, #24]	; (8009958 <vApplicationGetTimerTaskMemory+0x30>)
 800993e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009946:	601a      	str	r2, [r3, #0]
}
 8009948:	bf00      	nop
 800994a:	3714      	adds	r7, #20
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	200007d0 	.word	0x200007d0
 8009958:	2000088c 	.word	0x2000088c

0800995c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f103 0208 	add.w	r2, r3, #8
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009974:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f103 0208 	add.w	r2, r3, #8
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f103 0208 	add.w	r2, r3, #8
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80099aa:	bf00      	nop
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099b6:	b480      	push	{r7}
 80099b8:	b085      	sub	sp, #20
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	689a      	ldr	r2, [r3, #8]
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	1c5a      	adds	r2, r3, #1
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	601a      	str	r2, [r3, #0]
}
 80099f2:	bf00      	nop
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr

080099fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099fe:	b480      	push	{r7}
 8009a00:	b085      	sub	sp, #20
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a14:	d103      	bne.n	8009a1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	e00c      	b.n	8009a38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	3308      	adds	r3, #8
 8009a22:	60fb      	str	r3, [r7, #12]
 8009a24:	e002      	b.n	8009a2c <vListInsert+0x2e>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	60fb      	str	r3, [r7, #12]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68ba      	ldr	r2, [r7, #8]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d2f6      	bcs.n	8009a26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	685a      	ldr	r2, [r3, #4]
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	683a      	ldr	r2, [r7, #0]
 8009a52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	1c5a      	adds	r2, r3, #1
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	601a      	str	r2, [r3, #0]
}
 8009a64:	bf00      	nop
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	6892      	ldr	r2, [r2, #8]
 8009a86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	6852      	ldr	r2, [r2, #4]
 8009a90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d103      	bne.n	8009aa4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	689a      	ldr	r2, [r3, #8]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	1e5a      	subs	r2, r3, #1
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3714      	adds	r7, #20
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10a      	bne.n	8009aee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009aea:	bf00      	nop
 8009aec:	e7fe      	b.n	8009aec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009aee:	f002 fc99 	bl	800c424 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009afa:	68f9      	ldr	r1, [r7, #12]
 8009afc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009afe:	fb01 f303 	mul.w	r3, r1, r3
 8009b02:	441a      	add	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	68f9      	ldr	r1, [r7, #12]
 8009b22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009b24:	fb01 f303 	mul.w	r3, r1, r3
 8009b28:	441a      	add	r2, r3
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	22ff      	movs	r2, #255	; 0xff
 8009b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	22ff      	movs	r2, #255	; 0xff
 8009b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d114      	bne.n	8009b6e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d01a      	beq.n	8009b82 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	3310      	adds	r3, #16
 8009b50:	4618      	mov	r0, r3
 8009b52:	f001 fc4b 	bl	800b3ec <xTaskRemoveFromEventList>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d012      	beq.n	8009b82 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009b5c:	4b0c      	ldr	r3, [pc, #48]	; (8009b90 <xQueueGenericReset+0xcc>)
 8009b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	f3bf 8f4f 	dsb	sy
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	e009      	b.n	8009b82 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	3310      	adds	r3, #16
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7ff fef2 	bl	800995c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	3324      	adds	r3, #36	; 0x24
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7ff feed 	bl	800995c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009b82:	f002 fc7f 	bl	800c484 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009b86:	2301      	movs	r3, #1
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	e000ed04 	.word	0xe000ed04

08009b94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b08e      	sub	sp, #56	; 0x38
 8009b98:	af02      	add	r7, sp, #8
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
 8009ba0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d10a      	bne.n	8009bbe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bac:	f383 8811 	msr	BASEPRI, r3
 8009bb0:	f3bf 8f6f 	isb	sy
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009bba:	bf00      	nop
 8009bbc:	e7fe      	b.n	8009bbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d10a      	bne.n	8009bda <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009bd6:	bf00      	nop
 8009bd8:	e7fe      	b.n	8009bd8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d002      	beq.n	8009be6 <xQueueGenericCreateStatic+0x52>
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <xQueueGenericCreateStatic+0x56>
 8009be6:	2301      	movs	r3, #1
 8009be8:	e000      	b.n	8009bec <xQueueGenericCreateStatic+0x58>
 8009bea:	2300      	movs	r3, #0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10a      	bne.n	8009c06 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	623b      	str	r3, [r7, #32]
}
 8009c02:	bf00      	nop
 8009c04:	e7fe      	b.n	8009c04 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d102      	bne.n	8009c12 <xQueueGenericCreateStatic+0x7e>
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d101      	bne.n	8009c16 <xQueueGenericCreateStatic+0x82>
 8009c12:	2301      	movs	r3, #1
 8009c14:	e000      	b.n	8009c18 <xQueueGenericCreateStatic+0x84>
 8009c16:	2300      	movs	r3, #0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10a      	bne.n	8009c32 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	61fb      	str	r3, [r7, #28]
}
 8009c2e:	bf00      	nop
 8009c30:	e7fe      	b.n	8009c30 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009c32:	2350      	movs	r3, #80	; 0x50
 8009c34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	2b50      	cmp	r3, #80	; 0x50
 8009c3a:	d00a      	beq.n	8009c52 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	61bb      	str	r3, [r7, #24]
}
 8009c4e:	bf00      	nop
 8009c50:	e7fe      	b.n	8009c50 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009c52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00d      	beq.n	8009c7a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c60:	2201      	movs	r2, #1
 8009c62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	68b9      	ldr	r1, [r7, #8]
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f000 f83f 	bl	8009cf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3730      	adds	r7, #48	; 0x30
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b08a      	sub	sp, #40	; 0x28
 8009c88:	af02      	add	r7, sp, #8
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10a      	bne.n	8009cae <xQueueGenericCreate+0x2a>
	__asm volatile
 8009c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9c:	f383 8811 	msr	BASEPRI, r3
 8009ca0:	f3bf 8f6f 	isb	sy
 8009ca4:	f3bf 8f4f 	dsb	sy
 8009ca8:	613b      	str	r3, [r7, #16]
}
 8009caa:	bf00      	nop
 8009cac:	e7fe      	b.n	8009cac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	68ba      	ldr	r2, [r7, #8]
 8009cb2:	fb02 f303 	mul.w	r3, r2, r3
 8009cb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	3350      	adds	r3, #80	; 0x50
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f002 fcd3 	bl	800c668 <pvPortMalloc>
 8009cc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d011      	beq.n	8009cee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	3350      	adds	r3, #80	; 0x50
 8009cd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009cdc:	79fa      	ldrb	r2, [r7, #7]
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	697a      	ldr	r2, [r7, #20]
 8009ce6:	68b9      	ldr	r1, [r7, #8]
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f000 f805 	bl	8009cf8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009cee:	69bb      	ldr	r3, [r7, #24]
	}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3720      	adds	r7, #32
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d103      	bne.n	8009d14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	69ba      	ldr	r2, [r7, #24]
 8009d10:	601a      	str	r2, [r3, #0]
 8009d12:	e002      	b.n	8009d1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009d26:	2101      	movs	r1, #1
 8009d28:	69b8      	ldr	r0, [r7, #24]
 8009d2a:	f7ff fecb 	bl	8009ac4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	78fa      	ldrb	r2, [r7, #3]
 8009d32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009d36:	bf00      	nop
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b08a      	sub	sp, #40	; 0x28
 8009d42:	af02      	add	r7, sp, #8
 8009d44:	60f8      	str	r0, [r7, #12]
 8009d46:	60b9      	str	r1, [r7, #8]
 8009d48:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d10a      	bne.n	8009d66 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	61bb      	str	r3, [r7, #24]
}
 8009d62:	bf00      	nop
 8009d64:	e7fe      	b.n	8009d64 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d90a      	bls.n	8009d84 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d72:	f383 8811 	msr	BASEPRI, r3
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	617b      	str	r3, [r7, #20]
}
 8009d80:	bf00      	nop
 8009d82:	e7fe      	b.n	8009d82 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009d84:	2302      	movs	r3, #2
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f7ff ff00 	bl	8009b94 <xQueueGenericCreateStatic>
 8009d94:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009da2:	69fb      	ldr	r3, [r7, #28]
	}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3720      	adds	r7, #32
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10a      	bne.n	8009dd2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc0:	f383 8811 	msr	BASEPRI, r3
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	613b      	str	r3, [r7, #16]
}
 8009dce:	bf00      	nop
 8009dd0:	e7fe      	b.n	8009dd0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009dd2:	683a      	ldr	r2, [r7, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d90a      	bls.n	8009df0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dde:	f383 8811 	msr	BASEPRI, r3
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	60fb      	str	r3, [r7, #12]
}
 8009dec:	bf00      	nop
 8009dee:	e7fe      	b.n	8009dee <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009df0:	2202      	movs	r2, #2
 8009df2:	2100      	movs	r1, #0
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7ff ff45 	bl	8009c84 <xQueueGenericCreate>
 8009dfa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d002      	beq.n	8009e08 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	683a      	ldr	r2, [r7, #0]
 8009e06:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009e08:	697b      	ldr	r3, [r7, #20]
	}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3718      	adds	r7, #24
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
	...

08009e14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b08e      	sub	sp, #56	; 0x38
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
 8009e20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009e22:	2300      	movs	r3, #0
 8009e24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10a      	bne.n	8009e46 <xQueueGenericSend+0x32>
	__asm volatile
 8009e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e42:	bf00      	nop
 8009e44:	e7fe      	b.n	8009e44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d103      	bne.n	8009e54 <xQueueGenericSend+0x40>
 8009e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d101      	bne.n	8009e58 <xQueueGenericSend+0x44>
 8009e54:	2301      	movs	r3, #1
 8009e56:	e000      	b.n	8009e5a <xQueueGenericSend+0x46>
 8009e58:	2300      	movs	r3, #0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10a      	bne.n	8009e74 <xQueueGenericSend+0x60>
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e70:	bf00      	nop
 8009e72:	e7fe      	b.n	8009e72 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	d103      	bne.n	8009e82 <xQueueGenericSend+0x6e>
 8009e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d101      	bne.n	8009e86 <xQueueGenericSend+0x72>
 8009e82:	2301      	movs	r3, #1
 8009e84:	e000      	b.n	8009e88 <xQueueGenericSend+0x74>
 8009e86:	2300      	movs	r3, #0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10a      	bne.n	8009ea2 <xQueueGenericSend+0x8e>
	__asm volatile
 8009e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e90:	f383 8811 	msr	BASEPRI, r3
 8009e94:	f3bf 8f6f 	isb	sy
 8009e98:	f3bf 8f4f 	dsb	sy
 8009e9c:	623b      	str	r3, [r7, #32]
}
 8009e9e:	bf00      	nop
 8009ea0:	e7fe      	b.n	8009ea0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ea2:	f001 fc65 	bl	800b770 <xTaskGetSchedulerState>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d102      	bne.n	8009eb2 <xQueueGenericSend+0x9e>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d101      	bne.n	8009eb6 <xQueueGenericSend+0xa2>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e000      	b.n	8009eb8 <xQueueGenericSend+0xa4>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d10a      	bne.n	8009ed2 <xQueueGenericSend+0xbe>
	__asm volatile
 8009ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec0:	f383 8811 	msr	BASEPRI, r3
 8009ec4:	f3bf 8f6f 	isb	sy
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	61fb      	str	r3, [r7, #28]
}
 8009ece:	bf00      	nop
 8009ed0:	e7fe      	b.n	8009ed0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ed2:	f002 faa7 	bl	800c424 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d302      	bcc.n	8009ee8 <xQueueGenericSend+0xd4>
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d129      	bne.n	8009f3c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	68b9      	ldr	r1, [r7, #8]
 8009eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009eee:	f000 fc5e 	bl	800a7ae <prvCopyDataToQueue>
 8009ef2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d010      	beq.n	8009f1e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efe:	3324      	adds	r3, #36	; 0x24
 8009f00:	4618      	mov	r0, r3
 8009f02:	f001 fa73 	bl	800b3ec <xTaskRemoveFromEventList>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d013      	beq.n	8009f34 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009f0c:	4b3f      	ldr	r3, [pc, #252]	; (800a00c <xQueueGenericSend+0x1f8>)
 8009f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f12:	601a      	str	r2, [r3, #0]
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	e00a      	b.n	8009f34 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d007      	beq.n	8009f34 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009f24:	4b39      	ldr	r3, [pc, #228]	; (800a00c <xQueueGenericSend+0x1f8>)
 8009f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f2a:	601a      	str	r2, [r3, #0]
 8009f2c:	f3bf 8f4f 	dsb	sy
 8009f30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009f34:	f002 faa6 	bl	800c484 <vPortExitCritical>
				return pdPASS;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e063      	b.n	800a004 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d103      	bne.n	8009f4a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f42:	f002 fa9f 	bl	800c484 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f46:	2300      	movs	r3, #0
 8009f48:	e05c      	b.n	800a004 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d106      	bne.n	8009f5e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f50:	f107 0314 	add.w	r3, r7, #20
 8009f54:	4618      	mov	r0, r3
 8009f56:	f001 faad 	bl	800b4b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f5e:	f002 fa91 	bl	800c484 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f62:	f001 f819 	bl	800af98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f66:	f002 fa5d 	bl	800c424 <vPortEnterCritical>
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f70:	b25b      	sxtb	r3, r3
 8009f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f76:	d103      	bne.n	8009f80 <xQueueGenericSend+0x16c>
 8009f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f86:	b25b      	sxtb	r3, r3
 8009f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f8c:	d103      	bne.n	8009f96 <xQueueGenericSend+0x182>
 8009f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f96:	f002 fa75 	bl	800c484 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f9a:	1d3a      	adds	r2, r7, #4
 8009f9c:	f107 0314 	add.w	r3, r7, #20
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f001 fa9c 	bl	800b4e0 <xTaskCheckForTimeOut>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d124      	bne.n	8009ff8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009fae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fb0:	f000 fcf5 	bl	800a99e <prvIsQueueFull>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d018      	beq.n	8009fec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbc:	3310      	adds	r3, #16
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	4611      	mov	r1, r2
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f001 f9c2 	bl	800b34c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fca:	f000 fc80 	bl	800a8ce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009fce:	f000 fff1 	bl	800afb4 <xTaskResumeAll>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f47f af7c 	bne.w	8009ed2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009fda:	4b0c      	ldr	r3, [pc, #48]	; (800a00c <xQueueGenericSend+0x1f8>)
 8009fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fe0:	601a      	str	r2, [r3, #0]
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	f3bf 8f6f 	isb	sy
 8009fea:	e772      	b.n	8009ed2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fee:	f000 fc6e 	bl	800a8ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ff2:	f000 ffdf 	bl	800afb4 <xTaskResumeAll>
 8009ff6:	e76c      	b.n	8009ed2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009ff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ffa:	f000 fc68 	bl	800a8ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ffe:	f000 ffd9 	bl	800afb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a002:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a004:	4618      	mov	r0, r3
 800a006:	3738      	adds	r7, #56	; 0x38
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	e000ed04 	.word	0xe000ed04

0800a010 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b090      	sub	sp, #64	; 0x40
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	607a      	str	r2, [r7, #4]
 800a01c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10a      	bne.n	800a03e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a03a:	bf00      	nop
 800a03c:	e7fe      	b.n	800a03c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d103      	bne.n	800a04c <xQueueGenericSendFromISR+0x3c>
 800a044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d101      	bne.n	800a050 <xQueueGenericSendFromISR+0x40>
 800a04c:	2301      	movs	r3, #1
 800a04e:	e000      	b.n	800a052 <xQueueGenericSendFromISR+0x42>
 800a050:	2300      	movs	r3, #0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d10a      	bne.n	800a06c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05a:	f383 8811 	msr	BASEPRI, r3
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f3bf 8f4f 	dsb	sy
 800a066:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a068:	bf00      	nop
 800a06a:	e7fe      	b.n	800a06a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d103      	bne.n	800a07a <xQueueGenericSendFromISR+0x6a>
 800a072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a076:	2b01      	cmp	r3, #1
 800a078:	d101      	bne.n	800a07e <xQueueGenericSendFromISR+0x6e>
 800a07a:	2301      	movs	r3, #1
 800a07c:	e000      	b.n	800a080 <xQueueGenericSendFromISR+0x70>
 800a07e:	2300      	movs	r3, #0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d10a      	bne.n	800a09a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a088:	f383 8811 	msr	BASEPRI, r3
 800a08c:	f3bf 8f6f 	isb	sy
 800a090:	f3bf 8f4f 	dsb	sy
 800a094:	623b      	str	r3, [r7, #32]
}
 800a096:	bf00      	nop
 800a098:	e7fe      	b.n	800a098 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a09a:	f002 faa5 	bl	800c5e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a09e:	f3ef 8211 	mrs	r2, BASEPRI
 800a0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a6:	f383 8811 	msr	BASEPRI, r3
 800a0aa:	f3bf 8f6f 	isb	sy
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	61fa      	str	r2, [r7, #28]
 800a0b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a0b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a0b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d302      	bcc.n	800a0cc <xQueueGenericSendFromISR+0xbc>
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d12f      	bne.n	800a12c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0dc:	683a      	ldr	r2, [r7, #0]
 800a0de:	68b9      	ldr	r1, [r7, #8]
 800a0e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a0e2:	f000 fb64 	bl	800a7ae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a0e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a0ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0ee:	d112      	bne.n	800a116 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d016      	beq.n	800a126 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fa:	3324      	adds	r3, #36	; 0x24
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f001 f975 	bl	800b3ec <xTaskRemoveFromEventList>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00e      	beq.n	800a126 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00b      	beq.n	800a126 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2201      	movs	r2, #1
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	e007      	b.n	800a126 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a116:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a11a:	3301      	adds	r3, #1
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	b25a      	sxtb	r2, r3
 800a120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a126:	2301      	movs	r3, #1
 800a128:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a12a:	e001      	b.n	800a130 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a12c:	2300      	movs	r3, #0
 800a12e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a132:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a13a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a13c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3740      	adds	r7, #64	; 0x40
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b08e      	sub	sp, #56	; 0x38
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a156:	2b00      	cmp	r3, #0
 800a158:	d10a      	bne.n	800a170 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15e:	f383 8811 	msr	BASEPRI, r3
 800a162:	f3bf 8f6f 	isb	sy
 800a166:	f3bf 8f4f 	dsb	sy
 800a16a:	623b      	str	r3, [r7, #32]
}
 800a16c:	bf00      	nop
 800a16e:	e7fe      	b.n	800a16e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00a      	beq.n	800a18e <xQueueGiveFromISR+0x48>
	__asm volatile
 800a178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17c:	f383 8811 	msr	BASEPRI, r3
 800a180:	f3bf 8f6f 	isb	sy
 800a184:	f3bf 8f4f 	dsb	sy
 800a188:	61fb      	str	r3, [r7, #28]
}
 800a18a:	bf00      	nop
 800a18c:	e7fe      	b.n	800a18c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d103      	bne.n	800a19e <xQueueGiveFromISR+0x58>
 800a196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d101      	bne.n	800a1a2 <xQueueGiveFromISR+0x5c>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e000      	b.n	800a1a4 <xQueueGiveFromISR+0x5e>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d10a      	bne.n	800a1be <xQueueGiveFromISR+0x78>
	__asm volatile
 800a1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ac:	f383 8811 	msr	BASEPRI, r3
 800a1b0:	f3bf 8f6f 	isb	sy
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	61bb      	str	r3, [r7, #24]
}
 800a1ba:	bf00      	nop
 800a1bc:	e7fe      	b.n	800a1bc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1be:	f002 fa13 	bl	800c5e8 <vPortValidateInterruptPriority>
	__asm volatile
 800a1c2:	f3ef 8211 	mrs	r2, BASEPRI
 800a1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	617a      	str	r2, [r7, #20]
 800a1d8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a1da:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d22b      	bcs.n	800a246 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fa:	1c5a      	adds	r2, r3, #1
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a200:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a208:	d112      	bne.n	800a230 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d016      	beq.n	800a240 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a214:	3324      	adds	r3, #36	; 0x24
 800a216:	4618      	mov	r0, r3
 800a218:	f001 f8e8 	bl	800b3ec <xTaskRemoveFromEventList>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d00e      	beq.n	800a240 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00b      	beq.n	800a240 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	2201      	movs	r2, #1
 800a22c:	601a      	str	r2, [r3, #0]
 800a22e:	e007      	b.n	800a240 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a234:	3301      	adds	r3, #1
 800a236:	b2db      	uxtb	r3, r3
 800a238:	b25a      	sxtb	r2, r3
 800a23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a240:	2301      	movs	r3, #1
 800a242:	637b      	str	r3, [r7, #52]	; 0x34
 800a244:	e001      	b.n	800a24a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a246:	2300      	movs	r3, #0
 800a248:	637b      	str	r3, [r7, #52]	; 0x34
 800a24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f383 8811 	msr	BASEPRI, r3
}
 800a254:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3738      	adds	r7, #56	; 0x38
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b08c      	sub	sp, #48	; 0x30
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a26c:	2300      	movs	r3, #0
 800a26e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10a      	bne.n	800a290 <xQueueReceive+0x30>
	__asm volatile
 800a27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	623b      	str	r3, [r7, #32]
}
 800a28c:	bf00      	nop
 800a28e:	e7fe      	b.n	800a28e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d103      	bne.n	800a29e <xQueueReceive+0x3e>
 800a296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d101      	bne.n	800a2a2 <xQueueReceive+0x42>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e000      	b.n	800a2a4 <xQueueReceive+0x44>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d10a      	bne.n	800a2be <xQueueReceive+0x5e>
	__asm volatile
 800a2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ac:	f383 8811 	msr	BASEPRI, r3
 800a2b0:	f3bf 8f6f 	isb	sy
 800a2b4:	f3bf 8f4f 	dsb	sy
 800a2b8:	61fb      	str	r3, [r7, #28]
}
 800a2ba:	bf00      	nop
 800a2bc:	e7fe      	b.n	800a2bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2be:	f001 fa57 	bl	800b770 <xTaskGetSchedulerState>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d102      	bne.n	800a2ce <xQueueReceive+0x6e>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d101      	bne.n	800a2d2 <xQueueReceive+0x72>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e000      	b.n	800a2d4 <xQueueReceive+0x74>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10a      	bne.n	800a2ee <xQueueReceive+0x8e>
	__asm volatile
 800a2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2dc:	f383 8811 	msr	BASEPRI, r3
 800a2e0:	f3bf 8f6f 	isb	sy
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	61bb      	str	r3, [r7, #24]
}
 800a2ea:	bf00      	nop
 800a2ec:	e7fe      	b.n	800a2ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2ee:	f002 f899 	bl	800c424 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d01f      	beq.n	800a33e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2fe:	68b9      	ldr	r1, [r7, #8]
 800a300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a302:	f000 fabe 	bl	800a882 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a308:	1e5a      	subs	r2, r3, #1
 800a30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00f      	beq.n	800a336 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a318:	3310      	adds	r3, #16
 800a31a:	4618      	mov	r0, r3
 800a31c:	f001 f866 	bl	800b3ec <xTaskRemoveFromEventList>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d007      	beq.n	800a336 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a326:	4b3d      	ldr	r3, [pc, #244]	; (800a41c <xQueueReceive+0x1bc>)
 800a328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a32c:	601a      	str	r2, [r3, #0]
 800a32e:	f3bf 8f4f 	dsb	sy
 800a332:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a336:	f002 f8a5 	bl	800c484 <vPortExitCritical>
				return pdPASS;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e069      	b.n	800a412 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d103      	bne.n	800a34c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a344:	f002 f89e 	bl	800c484 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a348:	2300      	movs	r3, #0
 800a34a:	e062      	b.n	800a412 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d106      	bne.n	800a360 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a352:	f107 0310 	add.w	r3, r7, #16
 800a356:	4618      	mov	r0, r3
 800a358:	f001 f8ac 	bl	800b4b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a35c:	2301      	movs	r3, #1
 800a35e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a360:	f002 f890 	bl	800c484 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a364:	f000 fe18 	bl	800af98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a368:	f002 f85c 	bl	800c424 <vPortEnterCritical>
 800a36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a372:	b25b      	sxtb	r3, r3
 800a374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a378:	d103      	bne.n	800a382 <xQueueReceive+0x122>
 800a37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37c:	2200      	movs	r2, #0
 800a37e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a384:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a388:	b25b      	sxtb	r3, r3
 800a38a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a38e:	d103      	bne.n	800a398 <xQueueReceive+0x138>
 800a390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a392:	2200      	movs	r2, #0
 800a394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a398:	f002 f874 	bl	800c484 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a39c:	1d3a      	adds	r2, r7, #4
 800a39e:	f107 0310 	add.w	r3, r7, #16
 800a3a2:	4611      	mov	r1, r2
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f001 f89b 	bl	800b4e0 <xTaskCheckForTimeOut>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d123      	bne.n	800a3f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3b2:	f000 fade 	bl	800a972 <prvIsQueueEmpty>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d017      	beq.n	800a3ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3be:	3324      	adds	r3, #36	; 0x24
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f000 ffc1 	bl	800b34c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a3ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3cc:	f000 fa7f 	bl	800a8ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a3d0:	f000 fdf0 	bl	800afb4 <xTaskResumeAll>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d189      	bne.n	800a2ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a3da:	4b10      	ldr	r3, [pc, #64]	; (800a41c <xQueueReceive+0x1bc>)
 800a3dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e0:	601a      	str	r2, [r3, #0]
 800a3e2:	f3bf 8f4f 	dsb	sy
 800a3e6:	f3bf 8f6f 	isb	sy
 800a3ea:	e780      	b.n	800a2ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a3ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3ee:	f000 fa6e 	bl	800a8ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3f2:	f000 fddf 	bl	800afb4 <xTaskResumeAll>
 800a3f6:	e77a      	b.n	800a2ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a3f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3fa:	f000 fa68 	bl	800a8ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3fe:	f000 fdd9 	bl	800afb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a404:	f000 fab5 	bl	800a972 <prvIsQueueEmpty>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	f43f af6f 	beq.w	800a2ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a410:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a412:	4618      	mov	r0, r3
 800a414:	3730      	adds	r7, #48	; 0x30
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	e000ed04 	.word	0xe000ed04

0800a420 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b08e      	sub	sp, #56	; 0x38
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a42a:	2300      	movs	r3, #0
 800a42c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a432:	2300      	movs	r3, #0
 800a434:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d10a      	bne.n	800a452 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a440:	f383 8811 	msr	BASEPRI, r3
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	623b      	str	r3, [r7, #32]
}
 800a44e:	bf00      	nop
 800a450:	e7fe      	b.n	800a450 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00a      	beq.n	800a470 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45e:	f383 8811 	msr	BASEPRI, r3
 800a462:	f3bf 8f6f 	isb	sy
 800a466:	f3bf 8f4f 	dsb	sy
 800a46a:	61fb      	str	r3, [r7, #28]
}
 800a46c:	bf00      	nop
 800a46e:	e7fe      	b.n	800a46e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a470:	f001 f97e 	bl	800b770 <xTaskGetSchedulerState>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d102      	bne.n	800a480 <xQueueSemaphoreTake+0x60>
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <xQueueSemaphoreTake+0x64>
 800a480:	2301      	movs	r3, #1
 800a482:	e000      	b.n	800a486 <xQueueSemaphoreTake+0x66>
 800a484:	2300      	movs	r3, #0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10a      	bne.n	800a4a0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	61bb      	str	r3, [r7, #24]
}
 800a49c:	bf00      	nop
 800a49e:	e7fe      	b.n	800a49e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4a0:	f001 ffc0 	bl	800c424 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d024      	beq.n	800a4fa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b2:	1e5a      	subs	r2, r3, #1
 800a4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d104      	bne.n	800a4ca <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a4c0:	f001 facc 	bl	800ba5c <pvTaskIncrementMutexHeldCount>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00f      	beq.n	800a4f2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d4:	3310      	adds	r3, #16
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f000 ff88 	bl	800b3ec <xTaskRemoveFromEventList>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d007      	beq.n	800a4f2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a4e2:	4b54      	ldr	r3, [pc, #336]	; (800a634 <xQueueSemaphoreTake+0x214>)
 800a4e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4e8:	601a      	str	r2, [r3, #0]
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a4f2:	f001 ffc7 	bl	800c484 <vPortExitCritical>
				return pdPASS;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e097      	b.n	800a62a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d111      	bne.n	800a524 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00a      	beq.n	800a51c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	617b      	str	r3, [r7, #20]
}
 800a518:	bf00      	nop
 800a51a:	e7fe      	b.n	800a51a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a51c:	f001 ffb2 	bl	800c484 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a520:	2300      	movs	r3, #0
 800a522:	e082      	b.n	800a62a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a526:	2b00      	cmp	r3, #0
 800a528:	d106      	bne.n	800a538 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a52a:	f107 030c 	add.w	r3, r7, #12
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 ffc0 	bl	800b4b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a534:	2301      	movs	r3, #1
 800a536:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a538:	f001 ffa4 	bl	800c484 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a53c:	f000 fd2c 	bl	800af98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a540:	f001 ff70 	bl	800c424 <vPortEnterCritical>
 800a544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a546:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a54a:	b25b      	sxtb	r3, r3
 800a54c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a550:	d103      	bne.n	800a55a <xQueueSemaphoreTake+0x13a>
 800a552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a554:	2200      	movs	r2, #0
 800a556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a560:	b25b      	sxtb	r3, r3
 800a562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a566:	d103      	bne.n	800a570 <xQueueSemaphoreTake+0x150>
 800a568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a570:	f001 ff88 	bl	800c484 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a574:	463a      	mov	r2, r7
 800a576:	f107 030c 	add.w	r3, r7, #12
 800a57a:	4611      	mov	r1, r2
 800a57c:	4618      	mov	r0, r3
 800a57e:	f000 ffaf 	bl	800b4e0 <xTaskCheckForTimeOut>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d132      	bne.n	800a5ee <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a588:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a58a:	f000 f9f2 	bl	800a972 <prvIsQueueEmpty>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d026      	beq.n	800a5e2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d109      	bne.n	800a5b0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a59c:	f001 ff42 	bl	800c424 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f001 f901 	bl	800b7ac <xTaskPriorityInherit>
 800a5aa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a5ac:	f001 ff6a 	bl	800c484 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b2:	3324      	adds	r3, #36	; 0x24
 800a5b4:	683a      	ldr	r2, [r7, #0]
 800a5b6:	4611      	mov	r1, r2
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f000 fec7 	bl	800b34c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5c0:	f000 f985 	bl	800a8ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5c4:	f000 fcf6 	bl	800afb4 <xTaskResumeAll>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	f47f af68 	bne.w	800a4a0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a5d0:	4b18      	ldr	r3, [pc, #96]	; (800a634 <xQueueSemaphoreTake+0x214>)
 800a5d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5d6:	601a      	str	r2, [r3, #0]
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	f3bf 8f6f 	isb	sy
 800a5e0:	e75e      	b.n	800a4a0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a5e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5e4:	f000 f973 	bl	800a8ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5e8:	f000 fce4 	bl	800afb4 <xTaskResumeAll>
 800a5ec:	e758      	b.n	800a4a0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a5ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5f0:	f000 f96d 	bl	800a8ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5f4:	f000 fcde 	bl	800afb4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5fa:	f000 f9ba 	bl	800a972 <prvIsQueueEmpty>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	f43f af4d 	beq.w	800a4a0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00d      	beq.n	800a628 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a60c:	f001 ff0a 	bl	800c424 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a610:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a612:	f000 f8b4 	bl	800a77e <prvGetDisinheritPriorityAfterTimeout>
 800a616:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a61e:	4618      	mov	r0, r3
 800a620:	f001 f99a 	bl	800b958 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a624:	f001 ff2e 	bl	800c484 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a628:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3738      	adds	r7, #56	; 0x38
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	e000ed04 	.word	0xe000ed04

0800a638 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b08e      	sub	sp, #56	; 0x38
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d10a      	bne.n	800a664 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	623b      	str	r3, [r7, #32]
}
 800a660:	bf00      	nop
 800a662:	e7fe      	b.n	800a662 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d103      	bne.n	800a672 <xQueueReceiveFromISR+0x3a>
 800a66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d101      	bne.n	800a676 <xQueueReceiveFromISR+0x3e>
 800a672:	2301      	movs	r3, #1
 800a674:	e000      	b.n	800a678 <xQueueReceiveFromISR+0x40>
 800a676:	2300      	movs	r3, #0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d10a      	bne.n	800a692 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a680:	f383 8811 	msr	BASEPRI, r3
 800a684:	f3bf 8f6f 	isb	sy
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	61fb      	str	r3, [r7, #28]
}
 800a68e:	bf00      	nop
 800a690:	e7fe      	b.n	800a690 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a692:	f001 ffa9 	bl	800c5e8 <vPortValidateInterruptPriority>
	__asm volatile
 800a696:	f3ef 8211 	mrs	r2, BASEPRI
 800a69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	61ba      	str	r2, [r7, #24]
 800a6ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a6ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d02f      	beq.n	800a71e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6c8:	68b9      	ldr	r1, [r7, #8]
 800a6ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6cc:	f000 f8d9 	bl	800a882 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	1e5a      	subs	r2, r3, #1
 800a6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a6d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6e0:	d112      	bne.n	800a708 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d016      	beq.n	800a718 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ec:	3310      	adds	r3, #16
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 fe7c 	bl	800b3ec <xTaskRemoveFromEventList>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00e      	beq.n	800a718 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00b      	beq.n	800a718 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	601a      	str	r2, [r3, #0]
 800a706:	e007      	b.n	800a718 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a70c:	3301      	adds	r3, #1
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	b25a      	sxtb	r2, r3
 800a712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a718:	2301      	movs	r3, #1
 800a71a:	637b      	str	r3, [r7, #52]	; 0x34
 800a71c:	e001      	b.n	800a722 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a71e:	2300      	movs	r3, #0
 800a720:	637b      	str	r3, [r7, #52]	; 0x34
 800a722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a724:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	f383 8811 	msr	BASEPRI, r3
}
 800a72c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a730:	4618      	mov	r0, r3
 800a732:	3738      	adds	r7, #56	; 0x38
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10a      	bne.n	800a760 <vQueueDelete+0x28>
	__asm volatile
 800a74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74e:	f383 8811 	msr	BASEPRI, r3
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	60bb      	str	r3, [r7, #8]
}
 800a75c:	bf00      	nop
 800a75e:	e7fe      	b.n	800a75e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f000 f95f 	bl	800aa24 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d102      	bne.n	800a776 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f002 f845 	bl	800c800 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a776:	bf00      	nop
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a77e:	b480      	push	{r7}
 800a780:	b085      	sub	sp, #20
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d006      	beq.n	800a79c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a798:	60fb      	str	r3, [r7, #12]
 800a79a:	e001      	b.n	800a7a0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a79c:	2300      	movs	r3, #0
 800a79e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
	}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3714      	adds	r7, #20
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr

0800a7ae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b086      	sub	sp, #24
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	60f8      	str	r0, [r7, #12]
 800a7b6:	60b9      	str	r1, [r7, #8]
 800a7b8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10d      	bne.n	800a7e8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d14d      	bne.n	800a870 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f001 f84f 	bl	800b87c <xTaskPriorityDisinherit>
 800a7de:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	609a      	str	r2, [r3, #8]
 800a7e6:	e043      	b.n	800a870 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d119      	bne.n	800a822 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6858      	ldr	r0, [r3, #4]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	68b9      	ldr	r1, [r7, #8]
 800a7fa:	f002 f96b 	bl	800cad4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	685a      	ldr	r2, [r3, #4]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a806:	441a      	add	r2, r3
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	685a      	ldr	r2, [r3, #4]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	429a      	cmp	r2, r3
 800a816:	d32b      	bcc.n	800a870 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	605a      	str	r2, [r3, #4]
 800a820:	e026      	b.n	800a870 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	68d8      	ldr	r0, [r3, #12]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82a:	461a      	mov	r2, r3
 800a82c:	68b9      	ldr	r1, [r7, #8]
 800a82e:	f002 f951 	bl	800cad4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	68da      	ldr	r2, [r3, #12]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83a:	425b      	negs	r3, r3
 800a83c:	441a      	add	r2, r3
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	68da      	ldr	r2, [r3, #12]
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d207      	bcs.n	800a85e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	689a      	ldr	r2, [r3, #8]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a856:	425b      	negs	r3, r3
 800a858:	441a      	add	r2, r3
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2b02      	cmp	r3, #2
 800a862:	d105      	bne.n	800a870 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d002      	beq.n	800a870 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	3b01      	subs	r3, #1
 800a86e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	1c5a      	adds	r2, r3, #1
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a878:	697b      	ldr	r3, [r7, #20]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3718      	adds	r7, #24
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b082      	sub	sp, #8
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
 800a88a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a890:	2b00      	cmp	r3, #0
 800a892:	d018      	beq.n	800a8c6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	68da      	ldr	r2, [r3, #12]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a89c:	441a      	add	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	68da      	ldr	r2, [r3, #12]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d303      	bcc.n	800a8b6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	68d9      	ldr	r1, [r3, #12]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8be:	461a      	mov	r2, r3
 800a8c0:	6838      	ldr	r0, [r7, #0]
 800a8c2:	f002 f907 	bl	800cad4 <memcpy>
	}
}
 800a8c6:	bf00      	nop
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b084      	sub	sp, #16
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a8d6:	f001 fda5 	bl	800c424 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8e0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8e2:	e011      	b.n	800a908 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d012      	beq.n	800a912 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	3324      	adds	r3, #36	; 0x24
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f000 fd7b 	bl	800b3ec <xTaskRemoveFromEventList>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d001      	beq.n	800a900 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a8fc:	f000 fe52 	bl	800b5a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a900:	7bfb      	ldrb	r3, [r7, #15]
 800a902:	3b01      	subs	r3, #1
 800a904:	b2db      	uxtb	r3, r3
 800a906:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	dce9      	bgt.n	800a8e4 <prvUnlockQueue+0x16>
 800a910:	e000      	b.n	800a914 <prvUnlockQueue+0x46>
					break;
 800a912:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	22ff      	movs	r2, #255	; 0xff
 800a918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a91c:	f001 fdb2 	bl	800c484 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a920:	f001 fd80 	bl	800c424 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a92a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a92c:	e011      	b.n	800a952 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d012      	beq.n	800a95c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	3310      	adds	r3, #16
 800a93a:	4618      	mov	r0, r3
 800a93c:	f000 fd56 	bl	800b3ec <xTaskRemoveFromEventList>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d001      	beq.n	800a94a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a946:	f000 fe2d 	bl	800b5a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a94a:	7bbb      	ldrb	r3, [r7, #14]
 800a94c:	3b01      	subs	r3, #1
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a952:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a956:	2b00      	cmp	r3, #0
 800a958:	dce9      	bgt.n	800a92e <prvUnlockQueue+0x60>
 800a95a:	e000      	b.n	800a95e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a95c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	22ff      	movs	r2, #255	; 0xff
 800a962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a966:	f001 fd8d 	bl	800c484 <vPortExitCritical>
}
 800a96a:	bf00      	nop
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b084      	sub	sp, #16
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a97a:	f001 fd53 	bl	800c424 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a982:	2b00      	cmp	r3, #0
 800a984:	d102      	bne.n	800a98c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a986:	2301      	movs	r3, #1
 800a988:	60fb      	str	r3, [r7, #12]
 800a98a:	e001      	b.n	800a990 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a98c:	2300      	movs	r3, #0
 800a98e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a990:	f001 fd78 	bl	800c484 <vPortExitCritical>

	return xReturn;
 800a994:	68fb      	ldr	r3, [r7, #12]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b084      	sub	sp, #16
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9a6:	f001 fd3d 	bl	800c424 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d102      	bne.n	800a9bc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	60fb      	str	r3, [r7, #12]
 800a9ba:	e001      	b.n	800a9c0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9c0:	f001 fd60 	bl	800c484 <vPortExitCritical>

	return xReturn;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
	...

0800a9d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9da:	2300      	movs	r3, #0
 800a9dc:	60fb      	str	r3, [r7, #12]
 800a9de:	e014      	b.n	800aa0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a9e0:	4a0f      	ldr	r2, [pc, #60]	; (800aa20 <vQueueAddToRegistry+0x50>)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d10b      	bne.n	800aa04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a9ec:	490c      	ldr	r1, [pc, #48]	; (800aa20 <vQueueAddToRegistry+0x50>)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	683a      	ldr	r2, [r7, #0]
 800a9f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a9f6:	4a0a      	ldr	r2, [pc, #40]	; (800aa20 <vQueueAddToRegistry+0x50>)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	00db      	lsls	r3, r3, #3
 800a9fc:	4413      	add	r3, r2
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aa02:	e006      	b.n	800aa12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	3301      	adds	r3, #1
 800aa08:	60fb      	str	r3, [r7, #12]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2b07      	cmp	r3, #7
 800aa0e:	d9e7      	bls.n	800a9e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aa10:	bf00      	nop
 800aa12:	bf00      	nop
 800aa14:	3714      	adds	r7, #20
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	20000c8c 	.word	0x20000c8c

0800aa24 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	60fb      	str	r3, [r7, #12]
 800aa30:	e016      	b.n	800aa60 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800aa32:	4a10      	ldr	r2, [pc, #64]	; (800aa74 <vQueueUnregisterQueue+0x50>)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	00db      	lsls	r3, r3, #3
 800aa38:	4413      	add	r3, r2
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d10b      	bne.n	800aa5a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800aa42:	4a0c      	ldr	r2, [pc, #48]	; (800aa74 <vQueueUnregisterQueue+0x50>)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2100      	movs	r1, #0
 800aa48:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aa4c:	4a09      	ldr	r2, [pc, #36]	; (800aa74 <vQueueUnregisterQueue+0x50>)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	00db      	lsls	r3, r3, #3
 800aa52:	4413      	add	r3, r2
 800aa54:	2200      	movs	r2, #0
 800aa56:	605a      	str	r2, [r3, #4]
				break;
 800aa58:	e006      	b.n	800aa68 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	60fb      	str	r3, [r7, #12]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2b07      	cmp	r3, #7
 800aa64:	d9e5      	bls.n	800aa32 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800aa66:	bf00      	nop
 800aa68:	bf00      	nop
 800aa6a:	3714      	adds	r7, #20
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr
 800aa74:	20000c8c 	.word	0x20000c8c

0800aa78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aa88:	f001 fccc 	bl	800c424 <vPortEnterCritical>
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa92:	b25b      	sxtb	r3, r3
 800aa94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa98:	d103      	bne.n	800aaa2 <vQueueWaitForMessageRestricted+0x2a>
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aaa8:	b25b      	sxtb	r3, r3
 800aaaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaae:	d103      	bne.n	800aab8 <vQueueWaitForMessageRestricted+0x40>
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aab8:	f001 fce4 	bl	800c484 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d106      	bne.n	800aad2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	3324      	adds	r3, #36	; 0x24
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	68b9      	ldr	r1, [r7, #8]
 800aacc:	4618      	mov	r0, r3
 800aace:	f000 fc61 	bl	800b394 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aad2:	6978      	ldr	r0, [r7, #20]
 800aad4:	f7ff fefb 	bl	800a8ce <prvUnlockQueue>
	}
 800aad8:	bf00      	nop
 800aada:	3718      	adds	r7, #24
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b08e      	sub	sp, #56	; 0x38
 800aae4:	af04      	add	r7, sp, #16
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	607a      	str	r2, [r7, #4]
 800aaec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aaee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10a      	bne.n	800ab0a <xTaskCreateStatic+0x2a>
	__asm volatile
 800aaf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf8:	f383 8811 	msr	BASEPRI, r3
 800aafc:	f3bf 8f6f 	isb	sy
 800ab00:	f3bf 8f4f 	dsb	sy
 800ab04:	623b      	str	r3, [r7, #32]
}
 800ab06:	bf00      	nop
 800ab08:	e7fe      	b.n	800ab08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ab0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d10a      	bne.n	800ab26 <xTaskCreateStatic+0x46>
	__asm volatile
 800ab10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab14:	f383 8811 	msr	BASEPRI, r3
 800ab18:	f3bf 8f6f 	isb	sy
 800ab1c:	f3bf 8f4f 	dsb	sy
 800ab20:	61fb      	str	r3, [r7, #28]
}
 800ab22:	bf00      	nop
 800ab24:	e7fe      	b.n	800ab24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab26:	23bc      	movs	r3, #188	; 0xbc
 800ab28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	2bbc      	cmp	r3, #188	; 0xbc
 800ab2e:	d00a      	beq.n	800ab46 <xTaskCreateStatic+0x66>
	__asm volatile
 800ab30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab34:	f383 8811 	msr	BASEPRI, r3
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	61bb      	str	r3, [r7, #24]
}
 800ab42:	bf00      	nop
 800ab44:	e7fe      	b.n	800ab44 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d01e      	beq.n	800ab8c <xTaskCreateStatic+0xac>
 800ab4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d01b      	beq.n	800ab8c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab60:	2202      	movs	r2, #2
 800ab62:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab66:	2300      	movs	r3, #0
 800ab68:	9303      	str	r3, [sp, #12]
 800ab6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6c:	9302      	str	r3, [sp, #8]
 800ab6e:	f107 0314 	add.w	r3, r7, #20
 800ab72:	9301      	str	r3, [sp, #4]
 800ab74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab76:	9300      	str	r3, [sp, #0]
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	68b9      	ldr	r1, [r7, #8]
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	f000 f850 	bl	800ac24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab86:	f000 f8f3 	bl	800ad70 <prvAddNewTaskToReadyList>
 800ab8a:	e001      	b.n	800ab90 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab90:	697b      	ldr	r3, [r7, #20]
	}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3728      	adds	r7, #40	; 0x28
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b08c      	sub	sp, #48	; 0x30
 800ab9e:	af04      	add	r7, sp, #16
 800aba0:	60f8      	str	r0, [r7, #12]
 800aba2:	60b9      	str	r1, [r7, #8]
 800aba4:	603b      	str	r3, [r7, #0]
 800aba6:	4613      	mov	r3, r2
 800aba8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800abaa:	88fb      	ldrh	r3, [r7, #6]
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4618      	mov	r0, r3
 800abb0:	f001 fd5a 	bl	800c668 <pvPortMalloc>
 800abb4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00e      	beq.n	800abda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800abbc:	20bc      	movs	r0, #188	; 0xbc
 800abbe:	f001 fd53 	bl	800c668 <pvPortMalloc>
 800abc2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d003      	beq.n	800abd2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	697a      	ldr	r2, [r7, #20]
 800abce:	631a      	str	r2, [r3, #48]	; 0x30
 800abd0:	e005      	b.n	800abde <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800abd2:	6978      	ldr	r0, [r7, #20]
 800abd4:	f001 fe14 	bl	800c800 <vPortFree>
 800abd8:	e001      	b.n	800abde <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800abda:	2300      	movs	r3, #0
 800abdc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d017      	beq.n	800ac14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800abec:	88fa      	ldrh	r2, [r7, #6]
 800abee:	2300      	movs	r3, #0
 800abf0:	9303      	str	r3, [sp, #12]
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	9302      	str	r3, [sp, #8]
 800abf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf8:	9301      	str	r3, [sp, #4]
 800abfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfc:	9300      	str	r3, [sp, #0]
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	68b9      	ldr	r1, [r7, #8]
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f000 f80e 	bl	800ac24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac08:	69f8      	ldr	r0, [r7, #28]
 800ac0a:	f000 f8b1 	bl	800ad70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	61bb      	str	r3, [r7, #24]
 800ac12:	e002      	b.n	800ac1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac1a:	69bb      	ldr	r3, [r7, #24]
	}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3720      	adds	r7, #32
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b088      	sub	sp, #32
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	607a      	str	r2, [r7, #4]
 800ac30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	21a5      	movs	r1, #165	; 0xa5
 800ac3e:	f001 ff57 	bl	800caf0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	4413      	add	r3, r2
 800ac52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	f023 0307 	bic.w	r3, r3, #7
 800ac5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac5c:	69bb      	ldr	r3, [r7, #24]
 800ac5e:	f003 0307 	and.w	r3, r3, #7
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00a      	beq.n	800ac7c <prvInitialiseNewTask+0x58>
	__asm volatile
 800ac66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6a:	f383 8811 	msr	BASEPRI, r3
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	f3bf 8f4f 	dsb	sy
 800ac76:	617b      	str	r3, [r7, #20]
}
 800ac78:	bf00      	nop
 800ac7a:	e7fe      	b.n	800ac7a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d01f      	beq.n	800acc2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac82:	2300      	movs	r3, #0
 800ac84:	61fb      	str	r3, [r7, #28]
 800ac86:	e012      	b.n	800acae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac88:	68ba      	ldr	r2, [r7, #8]
 800ac8a:	69fb      	ldr	r3, [r7, #28]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	7819      	ldrb	r1, [r3, #0]
 800ac90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	4413      	add	r3, r2
 800ac96:	3334      	adds	r3, #52	; 0x34
 800ac98:	460a      	mov	r2, r1
 800ac9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	4413      	add	r3, r2
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d006      	beq.n	800acb6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	3301      	adds	r3, #1
 800acac:	61fb      	str	r3, [r7, #28]
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	2b0f      	cmp	r3, #15
 800acb2:	d9e9      	bls.n	800ac88 <prvInitialiseNewTask+0x64>
 800acb4:	e000      	b.n	800acb8 <prvInitialiseNewTask+0x94>
			{
				break;
 800acb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800acb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acba:	2200      	movs	r2, #0
 800acbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800acc0:	e003      	b.n	800acca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800acc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800acca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800accc:	2b37      	cmp	r3, #55	; 0x37
 800acce:	d901      	bls.n	800acd4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800acd0:	2337      	movs	r3, #55	; 0x37
 800acd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800acd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800acda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acde:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ace0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace2:	2200      	movs	r2, #0
 800ace4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ace6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace8:	3304      	adds	r3, #4
 800acea:	4618      	mov	r0, r3
 800acec:	f7fe fe56 	bl	800999c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800acf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf2:	3318      	adds	r3, #24
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fe fe51 	bl	800999c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800acfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acfe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad12:	2200      	movs	r2, #0
 800ad14:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ad20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad22:	3354      	adds	r3, #84	; 0x54
 800ad24:	2260      	movs	r2, #96	; 0x60
 800ad26:	2100      	movs	r1, #0
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f001 fee1 	bl	800caf0 <memset>
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad30:	4a0c      	ldr	r2, [pc, #48]	; (800ad64 <prvInitialiseNewTask+0x140>)
 800ad32:	659a      	str	r2, [r3, #88]	; 0x58
 800ad34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad36:	4a0c      	ldr	r2, [pc, #48]	; (800ad68 <prvInitialiseNewTask+0x144>)
 800ad38:	65da      	str	r2, [r3, #92]	; 0x5c
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3c:	4a0b      	ldr	r2, [pc, #44]	; (800ad6c <prvInitialiseNewTask+0x148>)
 800ad3e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad40:	683a      	ldr	r2, [r7, #0]
 800ad42:	68f9      	ldr	r1, [r7, #12]
 800ad44:	69b8      	ldr	r0, [r7, #24]
 800ad46:	f001 fa3f 	bl	800c1c8 <pxPortInitialiseStack>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d002      	beq.n	800ad5c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad5c:	bf00      	nop
 800ad5e:	3720      	adds	r7, #32
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	0802c960 	.word	0x0802c960
 800ad68:	0802c980 	.word	0x0802c980
 800ad6c:	0802c940 	.word	0x0802c940

0800ad70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad78:	f001 fb54 	bl	800c424 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad7c:	4b2d      	ldr	r3, [pc, #180]	; (800ae34 <prvAddNewTaskToReadyList+0xc4>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	3301      	adds	r3, #1
 800ad82:	4a2c      	ldr	r2, [pc, #176]	; (800ae34 <prvAddNewTaskToReadyList+0xc4>)
 800ad84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad86:	4b2c      	ldr	r3, [pc, #176]	; (800ae38 <prvAddNewTaskToReadyList+0xc8>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d109      	bne.n	800ada2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad8e:	4a2a      	ldr	r2, [pc, #168]	; (800ae38 <prvAddNewTaskToReadyList+0xc8>)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad94:	4b27      	ldr	r3, [pc, #156]	; (800ae34 <prvAddNewTaskToReadyList+0xc4>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d110      	bne.n	800adbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad9c:	f000 fc26 	bl	800b5ec <prvInitialiseTaskLists>
 800ada0:	e00d      	b.n	800adbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ada2:	4b26      	ldr	r3, [pc, #152]	; (800ae3c <prvAddNewTaskToReadyList+0xcc>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d109      	bne.n	800adbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800adaa:	4b23      	ldr	r3, [pc, #140]	; (800ae38 <prvAddNewTaskToReadyList+0xc8>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d802      	bhi.n	800adbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800adb8:	4a1f      	ldr	r2, [pc, #124]	; (800ae38 <prvAddNewTaskToReadyList+0xc8>)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800adbe:	4b20      	ldr	r3, [pc, #128]	; (800ae40 <prvAddNewTaskToReadyList+0xd0>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	3301      	adds	r3, #1
 800adc4:	4a1e      	ldr	r2, [pc, #120]	; (800ae40 <prvAddNewTaskToReadyList+0xd0>)
 800adc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800adc8:	4b1d      	ldr	r3, [pc, #116]	; (800ae40 <prvAddNewTaskToReadyList+0xd0>)
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800add4:	4b1b      	ldr	r3, [pc, #108]	; (800ae44 <prvAddNewTaskToReadyList+0xd4>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	429a      	cmp	r2, r3
 800adda:	d903      	bls.n	800ade4 <prvAddNewTaskToReadyList+0x74>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade0:	4a18      	ldr	r2, [pc, #96]	; (800ae44 <prvAddNewTaskToReadyList+0xd4>)
 800ade2:	6013      	str	r3, [r2, #0]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade8:	4613      	mov	r3, r2
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	4413      	add	r3, r2
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4a15      	ldr	r2, [pc, #84]	; (800ae48 <prvAddNewTaskToReadyList+0xd8>)
 800adf2:	441a      	add	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	3304      	adds	r3, #4
 800adf8:	4619      	mov	r1, r3
 800adfa:	4610      	mov	r0, r2
 800adfc:	f7fe fddb 	bl	80099b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ae00:	f001 fb40 	bl	800c484 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ae04:	4b0d      	ldr	r3, [pc, #52]	; (800ae3c <prvAddNewTaskToReadyList+0xcc>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00e      	beq.n	800ae2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ae0c:	4b0a      	ldr	r3, [pc, #40]	; (800ae38 <prvAddNewTaskToReadyList+0xc8>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d207      	bcs.n	800ae2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ae1a:	4b0c      	ldr	r3, [pc, #48]	; (800ae4c <prvAddNewTaskToReadyList+0xdc>)
 800ae1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae20:	601a      	str	r2, [r3, #0]
 800ae22:	f3bf 8f4f 	dsb	sy
 800ae26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae2a:	bf00      	nop
 800ae2c:	3708      	adds	r7, #8
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	200011a0 	.word	0x200011a0
 800ae38:	20000ccc 	.word	0x20000ccc
 800ae3c:	200011ac 	.word	0x200011ac
 800ae40:	200011bc 	.word	0x200011bc
 800ae44:	200011a8 	.word	0x200011a8
 800ae48:	20000cd0 	.word	0x20000cd0
 800ae4c:	e000ed04 	.word	0xe000ed04

0800ae50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d017      	beq.n	800ae92 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae62:	4b13      	ldr	r3, [pc, #76]	; (800aeb0 <vTaskDelay+0x60>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00a      	beq.n	800ae80 <vTaskDelay+0x30>
	__asm volatile
 800ae6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6e:	f383 8811 	msr	BASEPRI, r3
 800ae72:	f3bf 8f6f 	isb	sy
 800ae76:	f3bf 8f4f 	dsb	sy
 800ae7a:	60bb      	str	r3, [r7, #8]
}
 800ae7c:	bf00      	nop
 800ae7e:	e7fe      	b.n	800ae7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ae80:	f000 f88a 	bl	800af98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae84:	2100      	movs	r1, #0
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fdfc 	bl	800ba84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae8c:	f000 f892 	bl	800afb4 <xTaskResumeAll>
 800ae90:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d107      	bne.n	800aea8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ae98:	4b06      	ldr	r3, [pc, #24]	; (800aeb4 <vTaskDelay+0x64>)
 800ae9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae9e:	601a      	str	r2, [r3, #0]
 800aea0:	f3bf 8f4f 	dsb	sy
 800aea4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aea8:	bf00      	nop
 800aeaa:	3710      	adds	r7, #16
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	200011c8 	.word	0x200011c8
 800aeb4:	e000ed04 	.word	0xe000ed04

0800aeb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b08a      	sub	sp, #40	; 0x28
 800aebc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aebe:	2300      	movs	r3, #0
 800aec0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aec2:	2300      	movs	r3, #0
 800aec4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aec6:	463a      	mov	r2, r7
 800aec8:	1d39      	adds	r1, r7, #4
 800aeca:	f107 0308 	add.w	r3, r7, #8
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fe fd10 	bl	80098f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	9202      	str	r2, [sp, #8]
 800aedc:	9301      	str	r3, [sp, #4]
 800aede:	2300      	movs	r3, #0
 800aee0:	9300      	str	r3, [sp, #0]
 800aee2:	2300      	movs	r3, #0
 800aee4:	460a      	mov	r2, r1
 800aee6:	4924      	ldr	r1, [pc, #144]	; (800af78 <vTaskStartScheduler+0xc0>)
 800aee8:	4824      	ldr	r0, [pc, #144]	; (800af7c <vTaskStartScheduler+0xc4>)
 800aeea:	f7ff fdf9 	bl	800aae0 <xTaskCreateStatic>
 800aeee:	4603      	mov	r3, r0
 800aef0:	4a23      	ldr	r2, [pc, #140]	; (800af80 <vTaskStartScheduler+0xc8>)
 800aef2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aef4:	4b22      	ldr	r3, [pc, #136]	; (800af80 <vTaskStartScheduler+0xc8>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d002      	beq.n	800af02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aefc:	2301      	movs	r3, #1
 800aefe:	617b      	str	r3, [r7, #20]
 800af00:	e001      	b.n	800af06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af02:	2300      	movs	r3, #0
 800af04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d102      	bne.n	800af12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800af0c:	f000 fe0e 	bl	800bb2c <xTimerCreateTimerTask>
 800af10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	2b01      	cmp	r3, #1
 800af16:	d11b      	bne.n	800af50 <vTaskStartScheduler+0x98>
	__asm volatile
 800af18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1c:	f383 8811 	msr	BASEPRI, r3
 800af20:	f3bf 8f6f 	isb	sy
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	613b      	str	r3, [r7, #16]
}
 800af2a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800af2c:	4b15      	ldr	r3, [pc, #84]	; (800af84 <vTaskStartScheduler+0xcc>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	3354      	adds	r3, #84	; 0x54
 800af32:	4a15      	ldr	r2, [pc, #84]	; (800af88 <vTaskStartScheduler+0xd0>)
 800af34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800af36:	4b15      	ldr	r3, [pc, #84]	; (800af8c <vTaskStartScheduler+0xd4>)
 800af38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af3e:	4b14      	ldr	r3, [pc, #80]	; (800af90 <vTaskStartScheduler+0xd8>)
 800af40:	2201      	movs	r2, #1
 800af42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800af44:	4b13      	ldr	r3, [pc, #76]	; (800af94 <vTaskStartScheduler+0xdc>)
 800af46:	2200      	movs	r2, #0
 800af48:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af4a:	f001 f9c9 	bl	800c2e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af4e:	e00e      	b.n	800af6e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af56:	d10a      	bne.n	800af6e <vTaskStartScheduler+0xb6>
	__asm volatile
 800af58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5c:	f383 8811 	msr	BASEPRI, r3
 800af60:	f3bf 8f6f 	isb	sy
 800af64:	f3bf 8f4f 	dsb	sy
 800af68:	60fb      	str	r3, [r7, #12]
}
 800af6a:	bf00      	nop
 800af6c:	e7fe      	b.n	800af6c <vTaskStartScheduler+0xb4>
}
 800af6e:	bf00      	nop
 800af70:	3718      	adds	r7, #24
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	0800d644 	.word	0x0800d644
 800af7c:	0800b5bd 	.word	0x0800b5bd
 800af80:	200011c4 	.word	0x200011c4
 800af84:	20000ccc 	.word	0x20000ccc
 800af88:	2000002c 	.word	0x2000002c
 800af8c:	200011c0 	.word	0x200011c0
 800af90:	200011ac 	.word	0x200011ac
 800af94:	200011a4 	.word	0x200011a4

0800af98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af98:	b480      	push	{r7}
 800af9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800af9c:	4b04      	ldr	r3, [pc, #16]	; (800afb0 <vTaskSuspendAll+0x18>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	3301      	adds	r3, #1
 800afa2:	4a03      	ldr	r2, [pc, #12]	; (800afb0 <vTaskSuspendAll+0x18>)
 800afa4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800afa6:	bf00      	nop
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	200011c8 	.word	0x200011c8

0800afb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800afba:	2300      	movs	r3, #0
 800afbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800afbe:	2300      	movs	r3, #0
 800afc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800afc2:	4b42      	ldr	r3, [pc, #264]	; (800b0cc <xTaskResumeAll+0x118>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d10a      	bne.n	800afe0 <xTaskResumeAll+0x2c>
	__asm volatile
 800afca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afce:	f383 8811 	msr	BASEPRI, r3
 800afd2:	f3bf 8f6f 	isb	sy
 800afd6:	f3bf 8f4f 	dsb	sy
 800afda:	603b      	str	r3, [r7, #0]
}
 800afdc:	bf00      	nop
 800afde:	e7fe      	b.n	800afde <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800afe0:	f001 fa20 	bl	800c424 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800afe4:	4b39      	ldr	r3, [pc, #228]	; (800b0cc <xTaskResumeAll+0x118>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	3b01      	subs	r3, #1
 800afea:	4a38      	ldr	r2, [pc, #224]	; (800b0cc <xTaskResumeAll+0x118>)
 800afec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afee:	4b37      	ldr	r3, [pc, #220]	; (800b0cc <xTaskResumeAll+0x118>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d162      	bne.n	800b0bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aff6:	4b36      	ldr	r3, [pc, #216]	; (800b0d0 <xTaskResumeAll+0x11c>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d05e      	beq.n	800b0bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800affe:	e02f      	b.n	800b060 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b000:	4b34      	ldr	r3, [pc, #208]	; (800b0d4 <xTaskResumeAll+0x120>)
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	68db      	ldr	r3, [r3, #12]
 800b006:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	3318      	adds	r3, #24
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7fe fd2f 	bl	8009a70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	3304      	adds	r3, #4
 800b016:	4618      	mov	r0, r3
 800b018:	f7fe fd2a 	bl	8009a70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b020:	4b2d      	ldr	r3, [pc, #180]	; (800b0d8 <xTaskResumeAll+0x124>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	429a      	cmp	r2, r3
 800b026:	d903      	bls.n	800b030 <xTaskResumeAll+0x7c>
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b02c:	4a2a      	ldr	r2, [pc, #168]	; (800b0d8 <xTaskResumeAll+0x124>)
 800b02e:	6013      	str	r3, [r2, #0]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b034:	4613      	mov	r3, r2
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	4413      	add	r3, r2
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	4a27      	ldr	r2, [pc, #156]	; (800b0dc <xTaskResumeAll+0x128>)
 800b03e:	441a      	add	r2, r3
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	3304      	adds	r3, #4
 800b044:	4619      	mov	r1, r3
 800b046:	4610      	mov	r0, r2
 800b048:	f7fe fcb5 	bl	80099b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b050:	4b23      	ldr	r3, [pc, #140]	; (800b0e0 <xTaskResumeAll+0x12c>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b056:	429a      	cmp	r2, r3
 800b058:	d302      	bcc.n	800b060 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b05a:	4b22      	ldr	r3, [pc, #136]	; (800b0e4 <xTaskResumeAll+0x130>)
 800b05c:	2201      	movs	r2, #1
 800b05e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b060:	4b1c      	ldr	r3, [pc, #112]	; (800b0d4 <xTaskResumeAll+0x120>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1cb      	bne.n	800b000 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d001      	beq.n	800b072 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b06e:	f000 fb5f 	bl	800b730 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b072:	4b1d      	ldr	r3, [pc, #116]	; (800b0e8 <xTaskResumeAll+0x134>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d010      	beq.n	800b0a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b07e:	f000 f847 	bl	800b110 <xTaskIncrementTick>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d002      	beq.n	800b08e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b088:	4b16      	ldr	r3, [pc, #88]	; (800b0e4 <xTaskResumeAll+0x130>)
 800b08a:	2201      	movs	r2, #1
 800b08c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	3b01      	subs	r3, #1
 800b092:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d1f1      	bne.n	800b07e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b09a:	4b13      	ldr	r3, [pc, #76]	; (800b0e8 <xTaskResumeAll+0x134>)
 800b09c:	2200      	movs	r2, #0
 800b09e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b0a0:	4b10      	ldr	r3, [pc, #64]	; (800b0e4 <xTaskResumeAll+0x130>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d009      	beq.n	800b0bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b0ac:	4b0f      	ldr	r3, [pc, #60]	; (800b0ec <xTaskResumeAll+0x138>)
 800b0ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0b2:	601a      	str	r2, [r3, #0]
 800b0b4:	f3bf 8f4f 	dsb	sy
 800b0b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0bc:	f001 f9e2 	bl	800c484 <vPortExitCritical>

	return xAlreadyYielded;
 800b0c0:	68bb      	ldr	r3, [r7, #8]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	200011c8 	.word	0x200011c8
 800b0d0:	200011a0 	.word	0x200011a0
 800b0d4:	20001160 	.word	0x20001160
 800b0d8:	200011a8 	.word	0x200011a8
 800b0dc:	20000cd0 	.word	0x20000cd0
 800b0e0:	20000ccc 	.word	0x20000ccc
 800b0e4:	200011b4 	.word	0x200011b4
 800b0e8:	200011b0 	.word	0x200011b0
 800b0ec:	e000ed04 	.word	0xe000ed04

0800b0f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b083      	sub	sp, #12
 800b0f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b0f6:	4b05      	ldr	r3, [pc, #20]	; (800b10c <xTaskGetTickCount+0x1c>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b0fc:	687b      	ldr	r3, [r7, #4]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	370c      	adds	r7, #12
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	200011a4 	.word	0x200011a4

0800b110 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b086      	sub	sp, #24
 800b114:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b116:	2300      	movs	r3, #0
 800b118:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b11a:	4b4f      	ldr	r3, [pc, #316]	; (800b258 <xTaskIncrementTick+0x148>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	f040 808f 	bne.w	800b242 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b124:	4b4d      	ldr	r3, [pc, #308]	; (800b25c <xTaskIncrementTick+0x14c>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	3301      	adds	r3, #1
 800b12a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b12c:	4a4b      	ldr	r2, [pc, #300]	; (800b25c <xTaskIncrementTick+0x14c>)
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d120      	bne.n	800b17a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b138:	4b49      	ldr	r3, [pc, #292]	; (800b260 <xTaskIncrementTick+0x150>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00a      	beq.n	800b158 <xTaskIncrementTick+0x48>
	__asm volatile
 800b142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b146:	f383 8811 	msr	BASEPRI, r3
 800b14a:	f3bf 8f6f 	isb	sy
 800b14e:	f3bf 8f4f 	dsb	sy
 800b152:	603b      	str	r3, [r7, #0]
}
 800b154:	bf00      	nop
 800b156:	e7fe      	b.n	800b156 <xTaskIncrementTick+0x46>
 800b158:	4b41      	ldr	r3, [pc, #260]	; (800b260 <xTaskIncrementTick+0x150>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	60fb      	str	r3, [r7, #12]
 800b15e:	4b41      	ldr	r3, [pc, #260]	; (800b264 <xTaskIncrementTick+0x154>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a3f      	ldr	r2, [pc, #252]	; (800b260 <xTaskIncrementTick+0x150>)
 800b164:	6013      	str	r3, [r2, #0]
 800b166:	4a3f      	ldr	r2, [pc, #252]	; (800b264 <xTaskIncrementTick+0x154>)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6013      	str	r3, [r2, #0]
 800b16c:	4b3e      	ldr	r3, [pc, #248]	; (800b268 <xTaskIncrementTick+0x158>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	3301      	adds	r3, #1
 800b172:	4a3d      	ldr	r2, [pc, #244]	; (800b268 <xTaskIncrementTick+0x158>)
 800b174:	6013      	str	r3, [r2, #0]
 800b176:	f000 fadb 	bl	800b730 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b17a:	4b3c      	ldr	r3, [pc, #240]	; (800b26c <xTaskIncrementTick+0x15c>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	693a      	ldr	r2, [r7, #16]
 800b180:	429a      	cmp	r2, r3
 800b182:	d349      	bcc.n	800b218 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b184:	4b36      	ldr	r3, [pc, #216]	; (800b260 <xTaskIncrementTick+0x150>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d104      	bne.n	800b198 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b18e:	4b37      	ldr	r3, [pc, #220]	; (800b26c <xTaskIncrementTick+0x15c>)
 800b190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b194:	601a      	str	r2, [r3, #0]
					break;
 800b196:	e03f      	b.n	800b218 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b198:	4b31      	ldr	r3, [pc, #196]	; (800b260 <xTaskIncrementTick+0x150>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b1a8:	693a      	ldr	r2, [r7, #16]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d203      	bcs.n	800b1b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b1b0:	4a2e      	ldr	r2, [pc, #184]	; (800b26c <xTaskIncrementTick+0x15c>)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b1b6:	e02f      	b.n	800b218 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	3304      	adds	r3, #4
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7fe fc57 	bl	8009a70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d004      	beq.n	800b1d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	3318      	adds	r3, #24
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7fe fc4e 	bl	8009a70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d8:	4b25      	ldr	r3, [pc, #148]	; (800b270 <xTaskIncrementTick+0x160>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d903      	bls.n	800b1e8 <xTaskIncrementTick+0xd8>
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e4:	4a22      	ldr	r2, [pc, #136]	; (800b270 <xTaskIncrementTick+0x160>)
 800b1e6:	6013      	str	r3, [r2, #0]
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	4413      	add	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	4a1f      	ldr	r2, [pc, #124]	; (800b274 <xTaskIncrementTick+0x164>)
 800b1f6:	441a      	add	r2, r3
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	3304      	adds	r3, #4
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	4610      	mov	r0, r2
 800b200:	f7fe fbd9 	bl	80099b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b208:	4b1b      	ldr	r3, [pc, #108]	; (800b278 <xTaskIncrementTick+0x168>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b20e:	429a      	cmp	r2, r3
 800b210:	d3b8      	bcc.n	800b184 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b212:	2301      	movs	r3, #1
 800b214:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b216:	e7b5      	b.n	800b184 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b218:	4b17      	ldr	r3, [pc, #92]	; (800b278 <xTaskIncrementTick+0x168>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b21e:	4915      	ldr	r1, [pc, #84]	; (800b274 <xTaskIncrementTick+0x164>)
 800b220:	4613      	mov	r3, r2
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	4413      	add	r3, r2
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	440b      	add	r3, r1
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d901      	bls.n	800b234 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b230:	2301      	movs	r3, #1
 800b232:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b234:	4b11      	ldr	r3, [pc, #68]	; (800b27c <xTaskIncrementTick+0x16c>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d007      	beq.n	800b24c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b23c:	2301      	movs	r3, #1
 800b23e:	617b      	str	r3, [r7, #20]
 800b240:	e004      	b.n	800b24c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b242:	4b0f      	ldr	r3, [pc, #60]	; (800b280 <xTaskIncrementTick+0x170>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	3301      	adds	r3, #1
 800b248:	4a0d      	ldr	r2, [pc, #52]	; (800b280 <xTaskIncrementTick+0x170>)
 800b24a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b24c:	697b      	ldr	r3, [r7, #20]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3718      	adds	r7, #24
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	200011c8 	.word	0x200011c8
 800b25c:	200011a4 	.word	0x200011a4
 800b260:	20001158 	.word	0x20001158
 800b264:	2000115c 	.word	0x2000115c
 800b268:	200011b8 	.word	0x200011b8
 800b26c:	200011c0 	.word	0x200011c0
 800b270:	200011a8 	.word	0x200011a8
 800b274:	20000cd0 	.word	0x20000cd0
 800b278:	20000ccc 	.word	0x20000ccc
 800b27c:	200011b4 	.word	0x200011b4
 800b280:	200011b0 	.word	0x200011b0

0800b284 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b28a:	4b2a      	ldr	r3, [pc, #168]	; (800b334 <vTaskSwitchContext+0xb0>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d003      	beq.n	800b29a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b292:	4b29      	ldr	r3, [pc, #164]	; (800b338 <vTaskSwitchContext+0xb4>)
 800b294:	2201      	movs	r2, #1
 800b296:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b298:	e046      	b.n	800b328 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b29a:	4b27      	ldr	r3, [pc, #156]	; (800b338 <vTaskSwitchContext+0xb4>)
 800b29c:	2200      	movs	r2, #0
 800b29e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2a0:	4b26      	ldr	r3, [pc, #152]	; (800b33c <vTaskSwitchContext+0xb8>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	60fb      	str	r3, [r7, #12]
 800b2a6:	e010      	b.n	800b2ca <vTaskSwitchContext+0x46>
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10a      	bne.n	800b2c4 <vTaskSwitchContext+0x40>
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b2:	f383 8811 	msr	BASEPRI, r3
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	607b      	str	r3, [r7, #4]
}
 800b2c0:	bf00      	nop
 800b2c2:	e7fe      	b.n	800b2c2 <vTaskSwitchContext+0x3e>
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	60fb      	str	r3, [r7, #12]
 800b2ca:	491d      	ldr	r1, [pc, #116]	; (800b340 <vTaskSwitchContext+0xbc>)
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	4413      	add	r3, r2
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	440b      	add	r3, r1
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d0e4      	beq.n	800b2a8 <vTaskSwitchContext+0x24>
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	4413      	add	r3, r2
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	4a15      	ldr	r2, [pc, #84]	; (800b340 <vTaskSwitchContext+0xbc>)
 800b2ea:	4413      	add	r3, r2
 800b2ec:	60bb      	str	r3, [r7, #8]
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	685a      	ldr	r2, [r3, #4]
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	605a      	str	r2, [r3, #4]
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	685a      	ldr	r2, [r3, #4]
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	3308      	adds	r3, #8
 800b300:	429a      	cmp	r2, r3
 800b302:	d104      	bne.n	800b30e <vTaskSwitchContext+0x8a>
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	685a      	ldr	r2, [r3, #4]
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	605a      	str	r2, [r3, #4]
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	4a0b      	ldr	r2, [pc, #44]	; (800b344 <vTaskSwitchContext+0xc0>)
 800b316:	6013      	str	r3, [r2, #0]
 800b318:	4a08      	ldr	r2, [pc, #32]	; (800b33c <vTaskSwitchContext+0xb8>)
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b31e:	4b09      	ldr	r3, [pc, #36]	; (800b344 <vTaskSwitchContext+0xc0>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	3354      	adds	r3, #84	; 0x54
 800b324:	4a08      	ldr	r2, [pc, #32]	; (800b348 <vTaskSwitchContext+0xc4>)
 800b326:	6013      	str	r3, [r2, #0]
}
 800b328:	bf00      	nop
 800b32a:	3714      	adds	r7, #20
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr
 800b334:	200011c8 	.word	0x200011c8
 800b338:	200011b4 	.word	0x200011b4
 800b33c:	200011a8 	.word	0x200011a8
 800b340:	20000cd0 	.word	0x20000cd0
 800b344:	20000ccc 	.word	0x20000ccc
 800b348:	2000002c 	.word	0x2000002c

0800b34c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d10a      	bne.n	800b372 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b360:	f383 8811 	msr	BASEPRI, r3
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	60fb      	str	r3, [r7, #12]
}
 800b36e:	bf00      	nop
 800b370:	e7fe      	b.n	800b370 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b372:	4b07      	ldr	r3, [pc, #28]	; (800b390 <vTaskPlaceOnEventList+0x44>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	3318      	adds	r3, #24
 800b378:	4619      	mov	r1, r3
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7fe fb3f 	bl	80099fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b380:	2101      	movs	r1, #1
 800b382:	6838      	ldr	r0, [r7, #0]
 800b384:	f000 fb7e 	bl	800ba84 <prvAddCurrentTaskToDelayedList>
}
 800b388:	bf00      	nop
 800b38a:	3710      	adds	r7, #16
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	20000ccc 	.word	0x20000ccc

0800b394 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d10a      	bne.n	800b3bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3aa:	f383 8811 	msr	BASEPRI, r3
 800b3ae:	f3bf 8f6f 	isb	sy
 800b3b2:	f3bf 8f4f 	dsb	sy
 800b3b6:	617b      	str	r3, [r7, #20]
}
 800b3b8:	bf00      	nop
 800b3ba:	e7fe      	b.n	800b3ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3bc:	4b0a      	ldr	r3, [pc, #40]	; (800b3e8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	3318      	adds	r3, #24
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f7fe faf6 	bl	80099b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d002      	beq.n	800b3d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b3d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b3d6:	6879      	ldr	r1, [r7, #4]
 800b3d8:	68b8      	ldr	r0, [r7, #8]
 800b3da:	f000 fb53 	bl	800ba84 <prvAddCurrentTaskToDelayedList>
	}
 800b3de:	bf00      	nop
 800b3e0:	3718      	adds	r7, #24
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	20000ccc 	.word	0x20000ccc

0800b3ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	68db      	ldr	r3, [r3, #12]
 800b3fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10a      	bne.n	800b418 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b406:	f383 8811 	msr	BASEPRI, r3
 800b40a:	f3bf 8f6f 	isb	sy
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	60fb      	str	r3, [r7, #12]
}
 800b414:	bf00      	nop
 800b416:	e7fe      	b.n	800b416 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	3318      	adds	r3, #24
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7fe fb27 	bl	8009a70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b422:	4b1e      	ldr	r3, [pc, #120]	; (800b49c <xTaskRemoveFromEventList+0xb0>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d11d      	bne.n	800b466 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	3304      	adds	r3, #4
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fe fb1e 	bl	8009a70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b438:	4b19      	ldr	r3, [pc, #100]	; (800b4a0 <xTaskRemoveFromEventList+0xb4>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d903      	bls.n	800b448 <xTaskRemoveFromEventList+0x5c>
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b444:	4a16      	ldr	r2, [pc, #88]	; (800b4a0 <xTaskRemoveFromEventList+0xb4>)
 800b446:	6013      	str	r3, [r2, #0]
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b44c:	4613      	mov	r3, r2
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	4413      	add	r3, r2
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	4a13      	ldr	r2, [pc, #76]	; (800b4a4 <xTaskRemoveFromEventList+0xb8>)
 800b456:	441a      	add	r2, r3
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	3304      	adds	r3, #4
 800b45c:	4619      	mov	r1, r3
 800b45e:	4610      	mov	r0, r2
 800b460:	f7fe faa9 	bl	80099b6 <vListInsertEnd>
 800b464:	e005      	b.n	800b472 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	3318      	adds	r3, #24
 800b46a:	4619      	mov	r1, r3
 800b46c:	480e      	ldr	r0, [pc, #56]	; (800b4a8 <xTaskRemoveFromEventList+0xbc>)
 800b46e:	f7fe faa2 	bl	80099b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b476:	4b0d      	ldr	r3, [pc, #52]	; (800b4ac <xTaskRemoveFromEventList+0xc0>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d905      	bls.n	800b48c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b480:	2301      	movs	r3, #1
 800b482:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b484:	4b0a      	ldr	r3, [pc, #40]	; (800b4b0 <xTaskRemoveFromEventList+0xc4>)
 800b486:	2201      	movs	r2, #1
 800b488:	601a      	str	r2, [r3, #0]
 800b48a:	e001      	b.n	800b490 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b48c:	2300      	movs	r3, #0
 800b48e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b490:	697b      	ldr	r3, [r7, #20]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3718      	adds	r7, #24
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	200011c8 	.word	0x200011c8
 800b4a0:	200011a8 	.word	0x200011a8
 800b4a4:	20000cd0 	.word	0x20000cd0
 800b4a8:	20001160 	.word	0x20001160
 800b4ac:	20000ccc 	.word	0x20000ccc
 800b4b0:	200011b4 	.word	0x200011b4

0800b4b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b4bc:	4b06      	ldr	r3, [pc, #24]	; (800b4d8 <vTaskInternalSetTimeOutState+0x24>)
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b4c4:	4b05      	ldr	r3, [pc, #20]	; (800b4dc <vTaskInternalSetTimeOutState+0x28>)
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	605a      	str	r2, [r3, #4]
}
 800b4cc:	bf00      	nop
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr
 800b4d8:	200011b8 	.word	0x200011b8
 800b4dc:	200011a4 	.word	0x200011a4

0800b4e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b088      	sub	sp, #32
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d10a      	bne.n	800b506 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f4:	f383 8811 	msr	BASEPRI, r3
 800b4f8:	f3bf 8f6f 	isb	sy
 800b4fc:	f3bf 8f4f 	dsb	sy
 800b500:	613b      	str	r3, [r7, #16]
}
 800b502:	bf00      	nop
 800b504:	e7fe      	b.n	800b504 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d10a      	bne.n	800b522 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b510:	f383 8811 	msr	BASEPRI, r3
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	60fb      	str	r3, [r7, #12]
}
 800b51e:	bf00      	nop
 800b520:	e7fe      	b.n	800b520 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b522:	f000 ff7f 	bl	800c424 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b526:	4b1d      	ldr	r3, [pc, #116]	; (800b59c <xTaskCheckForTimeOut+0xbc>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	69ba      	ldr	r2, [r7, #24]
 800b532:	1ad3      	subs	r3, r2, r3
 800b534:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b53e:	d102      	bne.n	800b546 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b540:	2300      	movs	r3, #0
 800b542:	61fb      	str	r3, [r7, #28]
 800b544:	e023      	b.n	800b58e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	4b15      	ldr	r3, [pc, #84]	; (800b5a0 <xTaskCheckForTimeOut+0xc0>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	429a      	cmp	r2, r3
 800b550:	d007      	beq.n	800b562 <xTaskCheckForTimeOut+0x82>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	69ba      	ldr	r2, [r7, #24]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d302      	bcc.n	800b562 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b55c:	2301      	movs	r3, #1
 800b55e:	61fb      	str	r3, [r7, #28]
 800b560:	e015      	b.n	800b58e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	697a      	ldr	r2, [r7, #20]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d20b      	bcs.n	800b584 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	1ad2      	subs	r2, r2, r3
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f7ff ff9b 	bl	800b4b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b57e:	2300      	movs	r3, #0
 800b580:	61fb      	str	r3, [r7, #28]
 800b582:	e004      	b.n	800b58e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	2200      	movs	r2, #0
 800b588:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b58a:	2301      	movs	r3, #1
 800b58c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b58e:	f000 ff79 	bl	800c484 <vPortExitCritical>

	return xReturn;
 800b592:	69fb      	ldr	r3, [r7, #28]
}
 800b594:	4618      	mov	r0, r3
 800b596:	3720      	adds	r7, #32
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	200011a4 	.word	0x200011a4
 800b5a0:	200011b8 	.word	0x200011b8

0800b5a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b5a8:	4b03      	ldr	r3, [pc, #12]	; (800b5b8 <vTaskMissedYield+0x14>)
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	601a      	str	r2, [r3, #0]
}
 800b5ae:	bf00      	nop
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr
 800b5b8:	200011b4 	.word	0x200011b4

0800b5bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b5c4:	f000 f852 	bl	800b66c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b5c8:	4b06      	ldr	r3, [pc, #24]	; (800b5e4 <prvIdleTask+0x28>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d9f9      	bls.n	800b5c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b5d0:	4b05      	ldr	r3, [pc, #20]	; (800b5e8 <prvIdleTask+0x2c>)
 800b5d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5d6:	601a      	str	r2, [r3, #0]
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b5e0:	e7f0      	b.n	800b5c4 <prvIdleTask+0x8>
 800b5e2:	bf00      	nop
 800b5e4:	20000cd0 	.word	0x20000cd0
 800b5e8:	e000ed04 	.word	0xe000ed04

0800b5ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	607b      	str	r3, [r7, #4]
 800b5f6:	e00c      	b.n	800b612 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	4613      	mov	r3, r2
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	4413      	add	r3, r2
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	4a12      	ldr	r2, [pc, #72]	; (800b64c <prvInitialiseTaskLists+0x60>)
 800b604:	4413      	add	r3, r2
 800b606:	4618      	mov	r0, r3
 800b608:	f7fe f9a8 	bl	800995c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	3301      	adds	r3, #1
 800b610:	607b      	str	r3, [r7, #4]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2b37      	cmp	r3, #55	; 0x37
 800b616:	d9ef      	bls.n	800b5f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b618:	480d      	ldr	r0, [pc, #52]	; (800b650 <prvInitialiseTaskLists+0x64>)
 800b61a:	f7fe f99f 	bl	800995c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b61e:	480d      	ldr	r0, [pc, #52]	; (800b654 <prvInitialiseTaskLists+0x68>)
 800b620:	f7fe f99c 	bl	800995c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b624:	480c      	ldr	r0, [pc, #48]	; (800b658 <prvInitialiseTaskLists+0x6c>)
 800b626:	f7fe f999 	bl	800995c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b62a:	480c      	ldr	r0, [pc, #48]	; (800b65c <prvInitialiseTaskLists+0x70>)
 800b62c:	f7fe f996 	bl	800995c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b630:	480b      	ldr	r0, [pc, #44]	; (800b660 <prvInitialiseTaskLists+0x74>)
 800b632:	f7fe f993 	bl	800995c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b636:	4b0b      	ldr	r3, [pc, #44]	; (800b664 <prvInitialiseTaskLists+0x78>)
 800b638:	4a05      	ldr	r2, [pc, #20]	; (800b650 <prvInitialiseTaskLists+0x64>)
 800b63a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b63c:	4b0a      	ldr	r3, [pc, #40]	; (800b668 <prvInitialiseTaskLists+0x7c>)
 800b63e:	4a05      	ldr	r2, [pc, #20]	; (800b654 <prvInitialiseTaskLists+0x68>)
 800b640:	601a      	str	r2, [r3, #0]
}
 800b642:	bf00      	nop
 800b644:	3708      	adds	r7, #8
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop
 800b64c:	20000cd0 	.word	0x20000cd0
 800b650:	20001130 	.word	0x20001130
 800b654:	20001144 	.word	0x20001144
 800b658:	20001160 	.word	0x20001160
 800b65c:	20001174 	.word	0x20001174
 800b660:	2000118c 	.word	0x2000118c
 800b664:	20001158 	.word	0x20001158
 800b668:	2000115c 	.word	0x2000115c

0800b66c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b672:	e019      	b.n	800b6a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b674:	f000 fed6 	bl	800c424 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b678:	4b10      	ldr	r3, [pc, #64]	; (800b6bc <prvCheckTasksWaitingTermination+0x50>)
 800b67a:	68db      	ldr	r3, [r3, #12]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	3304      	adds	r3, #4
 800b684:	4618      	mov	r0, r3
 800b686:	f7fe f9f3 	bl	8009a70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b68a:	4b0d      	ldr	r3, [pc, #52]	; (800b6c0 <prvCheckTasksWaitingTermination+0x54>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	3b01      	subs	r3, #1
 800b690:	4a0b      	ldr	r2, [pc, #44]	; (800b6c0 <prvCheckTasksWaitingTermination+0x54>)
 800b692:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b694:	4b0b      	ldr	r3, [pc, #44]	; (800b6c4 <prvCheckTasksWaitingTermination+0x58>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	3b01      	subs	r3, #1
 800b69a:	4a0a      	ldr	r2, [pc, #40]	; (800b6c4 <prvCheckTasksWaitingTermination+0x58>)
 800b69c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b69e:	f000 fef1 	bl	800c484 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 f810 	bl	800b6c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6a8:	4b06      	ldr	r3, [pc, #24]	; (800b6c4 <prvCheckTasksWaitingTermination+0x58>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1e1      	bne.n	800b674 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b6b0:	bf00      	nop
 800b6b2:	bf00      	nop
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	20001174 	.word	0x20001174
 800b6c0:	200011a0 	.word	0x200011a0
 800b6c4:	20001188 	.word	0x20001188

0800b6c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	3354      	adds	r3, #84	; 0x54
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f001 fb1f 	bl	800cd18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d108      	bne.n	800b6f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f001 f889 	bl	800c800 <vPortFree>
				vPortFree( pxTCB );
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f001 f886 	bl	800c800 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b6f4:	e018      	b.n	800b728 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d103      	bne.n	800b708 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f001 f87d 	bl	800c800 <vPortFree>
	}
 800b706:	e00f      	b.n	800b728 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d00a      	beq.n	800b728 <prvDeleteTCB+0x60>
	__asm volatile
 800b712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b716:	f383 8811 	msr	BASEPRI, r3
 800b71a:	f3bf 8f6f 	isb	sy
 800b71e:	f3bf 8f4f 	dsb	sy
 800b722:	60fb      	str	r3, [r7, #12]
}
 800b724:	bf00      	nop
 800b726:	e7fe      	b.n	800b726 <prvDeleteTCB+0x5e>
	}
 800b728:	bf00      	nop
 800b72a:	3710      	adds	r7, #16
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b736:	4b0c      	ldr	r3, [pc, #48]	; (800b768 <prvResetNextTaskUnblockTime+0x38>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d104      	bne.n	800b74a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b740:	4b0a      	ldr	r3, [pc, #40]	; (800b76c <prvResetNextTaskUnblockTime+0x3c>)
 800b742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b746:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b748:	e008      	b.n	800b75c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b74a:	4b07      	ldr	r3, [pc, #28]	; (800b768 <prvResetNextTaskUnblockTime+0x38>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	4a04      	ldr	r2, [pc, #16]	; (800b76c <prvResetNextTaskUnblockTime+0x3c>)
 800b75a:	6013      	str	r3, [r2, #0]
}
 800b75c:	bf00      	nop
 800b75e:	370c      	adds	r7, #12
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr
 800b768:	20001158 	.word	0x20001158
 800b76c:	200011c0 	.word	0x200011c0

0800b770 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b776:	4b0b      	ldr	r3, [pc, #44]	; (800b7a4 <xTaskGetSchedulerState+0x34>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d102      	bne.n	800b784 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b77e:	2301      	movs	r3, #1
 800b780:	607b      	str	r3, [r7, #4]
 800b782:	e008      	b.n	800b796 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b784:	4b08      	ldr	r3, [pc, #32]	; (800b7a8 <xTaskGetSchedulerState+0x38>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d102      	bne.n	800b792 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b78c:	2302      	movs	r3, #2
 800b78e:	607b      	str	r3, [r7, #4]
 800b790:	e001      	b.n	800b796 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b792:	2300      	movs	r3, #0
 800b794:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b796:	687b      	ldr	r3, [r7, #4]
	}
 800b798:	4618      	mov	r0, r3
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr
 800b7a4:	200011ac 	.word	0x200011ac
 800b7a8:	200011c8 	.word	0x200011c8

0800b7ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d051      	beq.n	800b866 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c6:	4b2a      	ldr	r3, [pc, #168]	; (800b870 <xTaskPriorityInherit+0xc4>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d241      	bcs.n	800b854 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	699b      	ldr	r3, [r3, #24]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	db06      	blt.n	800b7e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7d8:	4b25      	ldr	r3, [pc, #148]	; (800b870 <xTaskPriorityInherit+0xc4>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	6959      	ldr	r1, [r3, #20]
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	4413      	add	r3, r2
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	4a1f      	ldr	r2, [pc, #124]	; (800b874 <xTaskPriorityInherit+0xc8>)
 800b7f8:	4413      	add	r3, r2
 800b7fa:	4299      	cmp	r1, r3
 800b7fc:	d122      	bne.n	800b844 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	3304      	adds	r3, #4
 800b802:	4618      	mov	r0, r3
 800b804:	f7fe f934 	bl	8009a70 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b808:	4b19      	ldr	r3, [pc, #100]	; (800b870 <xTaskPriorityInherit+0xc4>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b816:	4b18      	ldr	r3, [pc, #96]	; (800b878 <xTaskPriorityInherit+0xcc>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d903      	bls.n	800b826 <xTaskPriorityInherit+0x7a>
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b822:	4a15      	ldr	r2, [pc, #84]	; (800b878 <xTaskPriorityInherit+0xcc>)
 800b824:	6013      	str	r3, [r2, #0]
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b82a:	4613      	mov	r3, r2
 800b82c:	009b      	lsls	r3, r3, #2
 800b82e:	4413      	add	r3, r2
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	4a10      	ldr	r2, [pc, #64]	; (800b874 <xTaskPriorityInherit+0xc8>)
 800b834:	441a      	add	r2, r3
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	3304      	adds	r3, #4
 800b83a:	4619      	mov	r1, r3
 800b83c:	4610      	mov	r0, r2
 800b83e:	f7fe f8ba 	bl	80099b6 <vListInsertEnd>
 800b842:	e004      	b.n	800b84e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b844:	4b0a      	ldr	r3, [pc, #40]	; (800b870 <xTaskPriorityInherit+0xc4>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b84e:	2301      	movs	r3, #1
 800b850:	60fb      	str	r3, [r7, #12]
 800b852:	e008      	b.n	800b866 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b858:	4b05      	ldr	r3, [pc, #20]	; (800b870 <xTaskPriorityInherit+0xc4>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85e:	429a      	cmp	r2, r3
 800b860:	d201      	bcs.n	800b866 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b862:	2301      	movs	r3, #1
 800b864:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b866:	68fb      	ldr	r3, [r7, #12]
	}
 800b868:	4618      	mov	r0, r3
 800b86a:	3710      	adds	r7, #16
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}
 800b870:	20000ccc 	.word	0x20000ccc
 800b874:	20000cd0 	.word	0x20000cd0
 800b878:	200011a8 	.word	0x200011a8

0800b87c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b086      	sub	sp, #24
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b888:	2300      	movs	r3, #0
 800b88a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d056      	beq.n	800b940 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b892:	4b2e      	ldr	r3, [pc, #184]	; (800b94c <xTaskPriorityDisinherit+0xd0>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	693a      	ldr	r2, [r7, #16]
 800b898:	429a      	cmp	r2, r3
 800b89a:	d00a      	beq.n	800b8b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a0:	f383 8811 	msr	BASEPRI, r3
 800b8a4:	f3bf 8f6f 	isb	sy
 800b8a8:	f3bf 8f4f 	dsb	sy
 800b8ac:	60fb      	str	r3, [r7, #12]
}
 800b8ae:	bf00      	nop
 800b8b0:	e7fe      	b.n	800b8b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10a      	bne.n	800b8d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	60bb      	str	r3, [r7, #8]
}
 800b8cc:	bf00      	nop
 800b8ce:	e7fe      	b.n	800b8ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8d4:	1e5a      	subs	r2, r3, #1
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d02c      	beq.n	800b940 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d128      	bne.n	800b940 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fe f8bc 	bl	8009a70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b904:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b910:	4b0f      	ldr	r3, [pc, #60]	; (800b950 <xTaskPriorityDisinherit+0xd4>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	429a      	cmp	r2, r3
 800b916:	d903      	bls.n	800b920 <xTaskPriorityDisinherit+0xa4>
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91c:	4a0c      	ldr	r2, [pc, #48]	; (800b950 <xTaskPriorityDisinherit+0xd4>)
 800b91e:	6013      	str	r3, [r2, #0]
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b924:	4613      	mov	r3, r2
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	4413      	add	r3, r2
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	4a09      	ldr	r2, [pc, #36]	; (800b954 <xTaskPriorityDisinherit+0xd8>)
 800b92e:	441a      	add	r2, r3
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	3304      	adds	r3, #4
 800b934:	4619      	mov	r1, r3
 800b936:	4610      	mov	r0, r2
 800b938:	f7fe f83d 	bl	80099b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b93c:	2301      	movs	r3, #1
 800b93e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b940:	697b      	ldr	r3, [r7, #20]
	}
 800b942:	4618      	mov	r0, r3
 800b944:	3718      	adds	r7, #24
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	20000ccc 	.word	0x20000ccc
 800b950:	200011a8 	.word	0x200011a8
 800b954:	20000cd0 	.word	0x20000cd0

0800b958 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b088      	sub	sp, #32
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b966:	2301      	movs	r3, #1
 800b968:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d06a      	beq.n	800ba46 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b974:	2b00      	cmp	r3, #0
 800b976:	d10a      	bne.n	800b98e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97c:	f383 8811 	msr	BASEPRI, r3
 800b980:	f3bf 8f6f 	isb	sy
 800b984:	f3bf 8f4f 	dsb	sy
 800b988:	60fb      	str	r3, [r7, #12]
}
 800b98a:	bf00      	nop
 800b98c:	e7fe      	b.n	800b98c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b992:	683a      	ldr	r2, [r7, #0]
 800b994:	429a      	cmp	r2, r3
 800b996:	d902      	bls.n	800b99e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	61fb      	str	r3, [r7, #28]
 800b99c:	e002      	b.n	800b9a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a8:	69fa      	ldr	r2, [r7, #28]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d04b      	beq.n	800ba46 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9b2:	697a      	ldr	r2, [r7, #20]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d146      	bne.n	800ba46 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b9b8:	4b25      	ldr	r3, [pc, #148]	; (800ba50 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	69ba      	ldr	r2, [r7, #24]
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d10a      	bne.n	800b9d8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c6:	f383 8811 	msr	BASEPRI, r3
 800b9ca:	f3bf 8f6f 	isb	sy
 800b9ce:	f3bf 8f4f 	dsb	sy
 800b9d2:	60bb      	str	r3, [r7, #8]
}
 800b9d4:	bf00      	nop
 800b9d6:	e7fe      	b.n	800b9d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b9d8:	69bb      	ldr	r3, [r7, #24]
 800b9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b9de:	69bb      	ldr	r3, [r7, #24]
 800b9e0:	69fa      	ldr	r2, [r7, #28]
 800b9e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b9e4:	69bb      	ldr	r3, [r7, #24]
 800b9e6:	699b      	ldr	r3, [r3, #24]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	db04      	blt.n	800b9f6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	6959      	ldr	r1, [r3, #20]
 800b9fa:	693a      	ldr	r2, [r7, #16]
 800b9fc:	4613      	mov	r3, r2
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	4413      	add	r3, r2
 800ba02:	009b      	lsls	r3, r3, #2
 800ba04:	4a13      	ldr	r2, [pc, #76]	; (800ba54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ba06:	4413      	add	r3, r2
 800ba08:	4299      	cmp	r1, r3
 800ba0a:	d11c      	bne.n	800ba46 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	3304      	adds	r3, #4
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7fe f82d 	bl	8009a70 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba1a:	4b0f      	ldr	r3, [pc, #60]	; (800ba58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d903      	bls.n	800ba2a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba26:	4a0c      	ldr	r2, [pc, #48]	; (800ba58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ba28:	6013      	str	r3, [r2, #0]
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba2e:	4613      	mov	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	4413      	add	r3, r2
 800ba34:	009b      	lsls	r3, r3, #2
 800ba36:	4a07      	ldr	r2, [pc, #28]	; (800ba54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ba38:	441a      	add	r2, r3
 800ba3a:	69bb      	ldr	r3, [r7, #24]
 800ba3c:	3304      	adds	r3, #4
 800ba3e:	4619      	mov	r1, r3
 800ba40:	4610      	mov	r0, r2
 800ba42:	f7fd ffb8 	bl	80099b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba46:	bf00      	nop
 800ba48:	3720      	adds	r7, #32
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	20000ccc 	.word	0x20000ccc
 800ba54:	20000cd0 	.word	0x20000cd0
 800ba58:	200011a8 	.word	0x200011a8

0800ba5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ba5c:	b480      	push	{r7}
 800ba5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ba60:	4b07      	ldr	r3, [pc, #28]	; (800ba80 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d004      	beq.n	800ba72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ba68:	4b05      	ldr	r3, [pc, #20]	; (800ba80 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba6e:	3201      	adds	r2, #1
 800ba70:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ba72:	4b03      	ldr	r3, [pc, #12]	; (800ba80 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba74:	681b      	ldr	r3, [r3, #0]
	}
 800ba76:	4618      	mov	r0, r3
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr
 800ba80:	20000ccc 	.word	0x20000ccc

0800ba84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba8e:	4b21      	ldr	r3, [pc, #132]	; (800bb14 <prvAddCurrentTaskToDelayedList+0x90>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba94:	4b20      	ldr	r3, [pc, #128]	; (800bb18 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	3304      	adds	r3, #4
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7fd ffe8 	bl	8009a70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800baa6:	d10a      	bne.n	800babe <prvAddCurrentTaskToDelayedList+0x3a>
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d007      	beq.n	800babe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800baae:	4b1a      	ldr	r3, [pc, #104]	; (800bb18 <prvAddCurrentTaskToDelayedList+0x94>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	3304      	adds	r3, #4
 800bab4:	4619      	mov	r1, r3
 800bab6:	4819      	ldr	r0, [pc, #100]	; (800bb1c <prvAddCurrentTaskToDelayedList+0x98>)
 800bab8:	f7fd ff7d 	bl	80099b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800babc:	e026      	b.n	800bb0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	4413      	add	r3, r2
 800bac4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bac6:	4b14      	ldr	r3, [pc, #80]	; (800bb18 <prvAddCurrentTaskToDelayedList+0x94>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	68ba      	ldr	r2, [r7, #8]
 800bacc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bace:	68ba      	ldr	r2, [r7, #8]
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d209      	bcs.n	800baea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bad6:	4b12      	ldr	r3, [pc, #72]	; (800bb20 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	4b0f      	ldr	r3, [pc, #60]	; (800bb18 <prvAddCurrentTaskToDelayedList+0x94>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	3304      	adds	r3, #4
 800bae0:	4619      	mov	r1, r3
 800bae2:	4610      	mov	r0, r2
 800bae4:	f7fd ff8b 	bl	80099fe <vListInsert>
}
 800bae8:	e010      	b.n	800bb0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800baea:	4b0e      	ldr	r3, [pc, #56]	; (800bb24 <prvAddCurrentTaskToDelayedList+0xa0>)
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	4b0a      	ldr	r3, [pc, #40]	; (800bb18 <prvAddCurrentTaskToDelayedList+0x94>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	3304      	adds	r3, #4
 800baf4:	4619      	mov	r1, r3
 800baf6:	4610      	mov	r0, r2
 800baf8:	f7fd ff81 	bl	80099fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bafc:	4b0a      	ldr	r3, [pc, #40]	; (800bb28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	68ba      	ldr	r2, [r7, #8]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d202      	bcs.n	800bb0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bb06:	4a08      	ldr	r2, [pc, #32]	; (800bb28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	6013      	str	r3, [r2, #0]
}
 800bb0c:	bf00      	nop
 800bb0e:	3710      	adds	r7, #16
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	200011a4 	.word	0x200011a4
 800bb18:	20000ccc 	.word	0x20000ccc
 800bb1c:	2000118c 	.word	0x2000118c
 800bb20:	2000115c 	.word	0x2000115c
 800bb24:	20001158 	.word	0x20001158
 800bb28:	200011c0 	.word	0x200011c0

0800bb2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b08a      	sub	sp, #40	; 0x28
 800bb30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bb32:	2300      	movs	r3, #0
 800bb34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bb36:	f000 fb07 	bl	800c148 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bb3a:	4b1c      	ldr	r3, [pc, #112]	; (800bbac <xTimerCreateTimerTask+0x80>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d021      	beq.n	800bb86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bb42:	2300      	movs	r3, #0
 800bb44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bb46:	2300      	movs	r3, #0
 800bb48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bb4a:	1d3a      	adds	r2, r7, #4
 800bb4c:	f107 0108 	add.w	r1, r7, #8
 800bb50:	f107 030c 	add.w	r3, r7, #12
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7fd fee7 	bl	8009928 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bb5a:	6879      	ldr	r1, [r7, #4]
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	9202      	str	r2, [sp, #8]
 800bb62:	9301      	str	r3, [sp, #4]
 800bb64:	2302      	movs	r3, #2
 800bb66:	9300      	str	r3, [sp, #0]
 800bb68:	2300      	movs	r3, #0
 800bb6a:	460a      	mov	r2, r1
 800bb6c:	4910      	ldr	r1, [pc, #64]	; (800bbb0 <xTimerCreateTimerTask+0x84>)
 800bb6e:	4811      	ldr	r0, [pc, #68]	; (800bbb4 <xTimerCreateTimerTask+0x88>)
 800bb70:	f7fe ffb6 	bl	800aae0 <xTaskCreateStatic>
 800bb74:	4603      	mov	r3, r0
 800bb76:	4a10      	ldr	r2, [pc, #64]	; (800bbb8 <xTimerCreateTimerTask+0x8c>)
 800bb78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bb7a:	4b0f      	ldr	r3, [pc, #60]	; (800bbb8 <xTimerCreateTimerTask+0x8c>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d001      	beq.n	800bb86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bb82:	2301      	movs	r3, #1
 800bb84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10a      	bne.n	800bba2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb90:	f383 8811 	msr	BASEPRI, r3
 800bb94:	f3bf 8f6f 	isb	sy
 800bb98:	f3bf 8f4f 	dsb	sy
 800bb9c:	613b      	str	r3, [r7, #16]
}
 800bb9e:	bf00      	nop
 800bba0:	e7fe      	b.n	800bba0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bba2:	697b      	ldr	r3, [r7, #20]
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3718      	adds	r7, #24
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}
 800bbac:	200011fc 	.word	0x200011fc
 800bbb0:	0800d64c 	.word	0x0800d64c
 800bbb4:	0800bcf1 	.word	0x0800bcf1
 800bbb8:	20001200 	.word	0x20001200

0800bbbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b08a      	sub	sp, #40	; 0x28
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	607a      	str	r2, [r7, #4]
 800bbc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d10a      	bne.n	800bbea <xTimerGenericCommand+0x2e>
	__asm volatile
 800bbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd8:	f383 8811 	msr	BASEPRI, r3
 800bbdc:	f3bf 8f6f 	isb	sy
 800bbe0:	f3bf 8f4f 	dsb	sy
 800bbe4:	623b      	str	r3, [r7, #32]
}
 800bbe6:	bf00      	nop
 800bbe8:	e7fe      	b.n	800bbe8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bbea:	4b1a      	ldr	r3, [pc, #104]	; (800bc54 <xTimerGenericCommand+0x98>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d02a      	beq.n	800bc48 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	2b05      	cmp	r3, #5
 800bc02:	dc18      	bgt.n	800bc36 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bc04:	f7ff fdb4 	bl	800b770 <xTaskGetSchedulerState>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b02      	cmp	r3, #2
 800bc0c:	d109      	bne.n	800bc22 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bc0e:	4b11      	ldr	r3, [pc, #68]	; (800bc54 <xTimerGenericCommand+0x98>)
 800bc10:	6818      	ldr	r0, [r3, #0]
 800bc12:	f107 0110 	add.w	r1, r7, #16
 800bc16:	2300      	movs	r3, #0
 800bc18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc1a:	f7fe f8fb 	bl	8009e14 <xQueueGenericSend>
 800bc1e:	6278      	str	r0, [r7, #36]	; 0x24
 800bc20:	e012      	b.n	800bc48 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bc22:	4b0c      	ldr	r3, [pc, #48]	; (800bc54 <xTimerGenericCommand+0x98>)
 800bc24:	6818      	ldr	r0, [r3, #0]
 800bc26:	f107 0110 	add.w	r1, r7, #16
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f7fe f8f1 	bl	8009e14 <xQueueGenericSend>
 800bc32:	6278      	str	r0, [r7, #36]	; 0x24
 800bc34:	e008      	b.n	800bc48 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bc36:	4b07      	ldr	r3, [pc, #28]	; (800bc54 <xTimerGenericCommand+0x98>)
 800bc38:	6818      	ldr	r0, [r3, #0]
 800bc3a:	f107 0110 	add.w	r1, r7, #16
 800bc3e:	2300      	movs	r3, #0
 800bc40:	683a      	ldr	r2, [r7, #0]
 800bc42:	f7fe f9e5 	bl	800a010 <xQueueGenericSendFromISR>
 800bc46:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3728      	adds	r7, #40	; 0x28
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop
 800bc54:	200011fc 	.word	0x200011fc

0800bc58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b088      	sub	sp, #32
 800bc5c:	af02      	add	r7, sp, #8
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc62:	4b22      	ldr	r3, [pc, #136]	; (800bcec <prvProcessExpiredTimer+0x94>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	68db      	ldr	r3, [r3, #12]
 800bc6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	3304      	adds	r3, #4
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7fd fefd 	bl	8009a70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc7c:	f003 0304 	and.w	r3, r3, #4
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d022      	beq.n	800bcca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	699a      	ldr	r2, [r3, #24]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	18d1      	adds	r1, r2, r3
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	683a      	ldr	r2, [r7, #0]
 800bc90:	6978      	ldr	r0, [r7, #20]
 800bc92:	f000 f8d1 	bl	800be38 <prvInsertTimerInActiveList>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d01f      	beq.n	800bcdc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	9300      	str	r3, [sp, #0]
 800bca0:	2300      	movs	r3, #0
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	2100      	movs	r1, #0
 800bca6:	6978      	ldr	r0, [r7, #20]
 800bca8:	f7ff ff88 	bl	800bbbc <xTimerGenericCommand>
 800bcac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d113      	bne.n	800bcdc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb8:	f383 8811 	msr	BASEPRI, r3
 800bcbc:	f3bf 8f6f 	isb	sy
 800bcc0:	f3bf 8f4f 	dsb	sy
 800bcc4:	60fb      	str	r3, [r7, #12]
}
 800bcc6:	bf00      	nop
 800bcc8:	e7fe      	b.n	800bcc8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcd0:	f023 0301 	bic.w	r3, r3, #1
 800bcd4:	b2da      	uxtb	r2, r3
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	6a1b      	ldr	r3, [r3, #32]
 800bce0:	6978      	ldr	r0, [r7, #20]
 800bce2:	4798      	blx	r3
}
 800bce4:	bf00      	nop
 800bce6:	3718      	adds	r7, #24
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	200011f4 	.word	0x200011f4

0800bcf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bcf8:	f107 0308 	add.w	r3, r7, #8
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f000 f857 	bl	800bdb0 <prvGetNextExpireTime>
 800bd02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	4619      	mov	r1, r3
 800bd08:	68f8      	ldr	r0, [r7, #12]
 800bd0a:	f000 f803 	bl	800bd14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bd0e:	f000 f8d5 	bl	800bebc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd12:	e7f1      	b.n	800bcf8 <prvTimerTask+0x8>

0800bd14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bd1e:	f7ff f93b 	bl	800af98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd22:	f107 0308 	add.w	r3, r7, #8
 800bd26:	4618      	mov	r0, r3
 800bd28:	f000 f866 	bl	800bdf8 <prvSampleTimeNow>
 800bd2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d130      	bne.n	800bd96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d10a      	bne.n	800bd50 <prvProcessTimerOrBlockTask+0x3c>
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d806      	bhi.n	800bd50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bd42:	f7ff f937 	bl	800afb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bd46:	68f9      	ldr	r1, [r7, #12]
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f7ff ff85 	bl	800bc58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bd4e:	e024      	b.n	800bd9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d008      	beq.n	800bd68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bd56:	4b13      	ldr	r3, [pc, #76]	; (800bda4 <prvProcessTimerOrBlockTask+0x90>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d101      	bne.n	800bd64 <prvProcessTimerOrBlockTask+0x50>
 800bd60:	2301      	movs	r3, #1
 800bd62:	e000      	b.n	800bd66 <prvProcessTimerOrBlockTask+0x52>
 800bd64:	2300      	movs	r3, #0
 800bd66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bd68:	4b0f      	ldr	r3, [pc, #60]	; (800bda8 <prvProcessTimerOrBlockTask+0x94>)
 800bd6a:	6818      	ldr	r0, [r3, #0]
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	1ad3      	subs	r3, r2, r3
 800bd72:	683a      	ldr	r2, [r7, #0]
 800bd74:	4619      	mov	r1, r3
 800bd76:	f7fe fe7f 	bl	800aa78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bd7a:	f7ff f91b 	bl	800afb4 <xTaskResumeAll>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d10a      	bne.n	800bd9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bd84:	4b09      	ldr	r3, [pc, #36]	; (800bdac <prvProcessTimerOrBlockTask+0x98>)
 800bd86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd8a:	601a      	str	r2, [r3, #0]
 800bd8c:	f3bf 8f4f 	dsb	sy
 800bd90:	f3bf 8f6f 	isb	sy
}
 800bd94:	e001      	b.n	800bd9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bd96:	f7ff f90d 	bl	800afb4 <xTaskResumeAll>
}
 800bd9a:	bf00      	nop
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	200011f8 	.word	0x200011f8
 800bda8:	200011fc 	.word	0x200011fc
 800bdac:	e000ed04 	.word	0xe000ed04

0800bdb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bdb8:	4b0e      	ldr	r3, [pc, #56]	; (800bdf4 <prvGetNextExpireTime+0x44>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d101      	bne.n	800bdc6 <prvGetNextExpireTime+0x16>
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	e000      	b.n	800bdc8 <prvGetNextExpireTime+0x18>
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d105      	bne.n	800bde0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bdd4:	4b07      	ldr	r3, [pc, #28]	; (800bdf4 <prvGetNextExpireTime+0x44>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	60fb      	str	r3, [r7, #12]
 800bdde:	e001      	b.n	800bde4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bde0:	2300      	movs	r3, #0
 800bde2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bde4:	68fb      	ldr	r3, [r7, #12]
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3714      	adds	r7, #20
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	200011f4 	.word	0x200011f4

0800bdf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800be00:	f7ff f976 	bl	800b0f0 <xTaskGetTickCount>
 800be04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800be06:	4b0b      	ldr	r3, [pc, #44]	; (800be34 <prvSampleTimeNow+0x3c>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d205      	bcs.n	800be1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800be10:	f000 f936 	bl	800c080 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2201      	movs	r2, #1
 800be18:	601a      	str	r2, [r3, #0]
 800be1a:	e002      	b.n	800be22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800be22:	4a04      	ldr	r2, [pc, #16]	; (800be34 <prvSampleTimeNow+0x3c>)
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800be28:	68fb      	ldr	r3, [r7, #12]
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3710      	adds	r7, #16
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	20001204 	.word	0x20001204

0800be38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b086      	sub	sp, #24
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	607a      	str	r2, [r7, #4]
 800be44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800be46:	2300      	movs	r3, #0
 800be48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	68ba      	ldr	r2, [r7, #8]
 800be4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	68fa      	ldr	r2, [r7, #12]
 800be54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800be56:	68ba      	ldr	r2, [r7, #8]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d812      	bhi.n	800be84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	1ad2      	subs	r2, r2, r3
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	699b      	ldr	r3, [r3, #24]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d302      	bcc.n	800be72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800be6c:	2301      	movs	r3, #1
 800be6e:	617b      	str	r3, [r7, #20]
 800be70:	e01b      	b.n	800beaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800be72:	4b10      	ldr	r3, [pc, #64]	; (800beb4 <prvInsertTimerInActiveList+0x7c>)
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	3304      	adds	r3, #4
 800be7a:	4619      	mov	r1, r3
 800be7c:	4610      	mov	r0, r2
 800be7e:	f7fd fdbe 	bl	80099fe <vListInsert>
 800be82:	e012      	b.n	800beaa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d206      	bcs.n	800be9a <prvInsertTimerInActiveList+0x62>
 800be8c:	68ba      	ldr	r2, [r7, #8]
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	429a      	cmp	r2, r3
 800be92:	d302      	bcc.n	800be9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800be94:	2301      	movs	r3, #1
 800be96:	617b      	str	r3, [r7, #20]
 800be98:	e007      	b.n	800beaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be9a:	4b07      	ldr	r3, [pc, #28]	; (800beb8 <prvInsertTimerInActiveList+0x80>)
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	3304      	adds	r3, #4
 800bea2:	4619      	mov	r1, r3
 800bea4:	4610      	mov	r0, r2
 800bea6:	f7fd fdaa 	bl	80099fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800beaa:	697b      	ldr	r3, [r7, #20]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3718      	adds	r7, #24
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	200011f8 	.word	0x200011f8
 800beb8:	200011f4 	.word	0x200011f4

0800bebc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b08e      	sub	sp, #56	; 0x38
 800bec0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bec2:	e0ca      	b.n	800c05a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	da18      	bge.n	800befc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800beca:	1d3b      	adds	r3, r7, #4
 800becc:	3304      	adds	r3, #4
 800bece:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d10a      	bne.n	800beec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beda:	f383 8811 	msr	BASEPRI, r3
 800bede:	f3bf 8f6f 	isb	sy
 800bee2:	f3bf 8f4f 	dsb	sy
 800bee6:	61fb      	str	r3, [r7, #28]
}
 800bee8:	bf00      	nop
 800beea:	e7fe      	b.n	800beea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800beec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bef2:	6850      	ldr	r0, [r2, #4]
 800bef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bef6:	6892      	ldr	r2, [r2, #8]
 800bef8:	4611      	mov	r1, r2
 800befa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	f2c0 80aa 	blt.w	800c058 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bf08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf0a:	695b      	ldr	r3, [r3, #20]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d004      	beq.n	800bf1a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf12:	3304      	adds	r3, #4
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7fd fdab 	bl	8009a70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf1a:	463b      	mov	r3, r7
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7ff ff6b 	bl	800bdf8 <prvSampleTimeNow>
 800bf22:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2b09      	cmp	r3, #9
 800bf28:	f200 8097 	bhi.w	800c05a <prvProcessReceivedCommands+0x19e>
 800bf2c:	a201      	add	r2, pc, #4	; (adr r2, 800bf34 <prvProcessReceivedCommands+0x78>)
 800bf2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf32:	bf00      	nop
 800bf34:	0800bf5d 	.word	0x0800bf5d
 800bf38:	0800bf5d 	.word	0x0800bf5d
 800bf3c:	0800bf5d 	.word	0x0800bf5d
 800bf40:	0800bfd1 	.word	0x0800bfd1
 800bf44:	0800bfe5 	.word	0x0800bfe5
 800bf48:	0800c02f 	.word	0x0800c02f
 800bf4c:	0800bf5d 	.word	0x0800bf5d
 800bf50:	0800bf5d 	.word	0x0800bf5d
 800bf54:	0800bfd1 	.word	0x0800bfd1
 800bf58:	0800bfe5 	.word	0x0800bfe5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf62:	f043 0301 	orr.w	r3, r3, #1
 800bf66:	b2da      	uxtb	r2, r3
 800bf68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf6e:	68ba      	ldr	r2, [r7, #8]
 800bf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf72:	699b      	ldr	r3, [r3, #24]
 800bf74:	18d1      	adds	r1, r2, r3
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf7c:	f7ff ff5c 	bl	800be38 <prvInsertTimerInActiveList>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d069      	beq.n	800c05a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf94:	f003 0304 	and.w	r3, r3, #4
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d05e      	beq.n	800c05a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf9c:	68ba      	ldr	r2, [r7, #8]
 800bf9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa0:	699b      	ldr	r3, [r3, #24]
 800bfa2:	441a      	add	r2, r3
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	9300      	str	r3, [sp, #0]
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	2100      	movs	r1, #0
 800bfac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfae:	f7ff fe05 	bl	800bbbc <xTimerGenericCommand>
 800bfb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bfb4:	6a3b      	ldr	r3, [r7, #32]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d14f      	bne.n	800c05a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfbe:	f383 8811 	msr	BASEPRI, r3
 800bfc2:	f3bf 8f6f 	isb	sy
 800bfc6:	f3bf 8f4f 	dsb	sy
 800bfca:	61bb      	str	r3, [r7, #24]
}
 800bfcc:	bf00      	nop
 800bfce:	e7fe      	b.n	800bfce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfd6:	f023 0301 	bic.w	r3, r3, #1
 800bfda:	b2da      	uxtb	r2, r3
 800bfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bfe2:	e03a      	b.n	800c05a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfea:	f043 0301 	orr.w	r3, r3, #1
 800bfee:	b2da      	uxtb	r2, r3
 800bff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bff6:	68ba      	ldr	r2, [r7, #8]
 800bff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffe:	699b      	ldr	r3, [r3, #24]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10a      	bne.n	800c01a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c008:	f383 8811 	msr	BASEPRI, r3
 800c00c:	f3bf 8f6f 	isb	sy
 800c010:	f3bf 8f4f 	dsb	sy
 800c014:	617b      	str	r3, [r7, #20]
}
 800c016:	bf00      	nop
 800c018:	e7fe      	b.n	800c018 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01c:	699a      	ldr	r2, [r3, #24]
 800c01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c020:	18d1      	adds	r1, r2, r3
 800c022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c028:	f7ff ff06 	bl	800be38 <prvInsertTimerInActiveList>
					break;
 800c02c:	e015      	b.n	800c05a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c030:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c034:	f003 0302 	and.w	r3, r3, #2
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d103      	bne.n	800c044 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c03c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c03e:	f000 fbdf 	bl	800c800 <vPortFree>
 800c042:	e00a      	b.n	800c05a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c046:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c04a:	f023 0301 	bic.w	r3, r3, #1
 800c04e:	b2da      	uxtb	r2, r3
 800c050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c052:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c056:	e000      	b.n	800c05a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c058:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c05a:	4b08      	ldr	r3, [pc, #32]	; (800c07c <prvProcessReceivedCommands+0x1c0>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	1d39      	adds	r1, r7, #4
 800c060:	2200      	movs	r2, #0
 800c062:	4618      	mov	r0, r3
 800c064:	f7fe f8fc 	bl	800a260 <xQueueReceive>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f47f af2a 	bne.w	800bec4 <prvProcessReceivedCommands+0x8>
	}
}
 800c070:	bf00      	nop
 800c072:	bf00      	nop
 800c074:	3730      	adds	r7, #48	; 0x30
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	200011fc 	.word	0x200011fc

0800c080 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b088      	sub	sp, #32
 800c084:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c086:	e048      	b.n	800c11a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c088:	4b2d      	ldr	r3, [pc, #180]	; (800c140 <prvSwitchTimerLists+0xc0>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	68db      	ldr	r3, [r3, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c092:	4b2b      	ldr	r3, [pc, #172]	; (800c140 <prvSwitchTimerLists+0xc0>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	68db      	ldr	r3, [r3, #12]
 800c09a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	3304      	adds	r3, #4
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7fd fce5 	bl	8009a70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	6a1b      	ldr	r3, [r3, #32]
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0b4:	f003 0304 	and.w	r3, r3, #4
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d02e      	beq.n	800c11a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	699b      	ldr	r3, [r3, #24]
 800c0c0:	693a      	ldr	r2, [r7, #16]
 800c0c2:	4413      	add	r3, r2
 800c0c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c0c6:	68ba      	ldr	r2, [r7, #8]
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d90e      	bls.n	800c0ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	68ba      	ldr	r2, [r7, #8]
 800c0d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	68fa      	ldr	r2, [r7, #12]
 800c0d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0da:	4b19      	ldr	r3, [pc, #100]	; (800c140 <prvSwitchTimerLists+0xc0>)
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	3304      	adds	r3, #4
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	4610      	mov	r0, r2
 800c0e6:	f7fd fc8a 	bl	80099fe <vListInsert>
 800c0ea:	e016      	b.n	800c11a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	9300      	str	r3, [sp, #0]
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	693a      	ldr	r2, [r7, #16]
 800c0f4:	2100      	movs	r1, #0
 800c0f6:	68f8      	ldr	r0, [r7, #12]
 800c0f8:	f7ff fd60 	bl	800bbbc <xTimerGenericCommand>
 800c0fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d10a      	bne.n	800c11a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c108:	f383 8811 	msr	BASEPRI, r3
 800c10c:	f3bf 8f6f 	isb	sy
 800c110:	f3bf 8f4f 	dsb	sy
 800c114:	603b      	str	r3, [r7, #0]
}
 800c116:	bf00      	nop
 800c118:	e7fe      	b.n	800c118 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c11a:	4b09      	ldr	r3, [pc, #36]	; (800c140 <prvSwitchTimerLists+0xc0>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d1b1      	bne.n	800c088 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c124:	4b06      	ldr	r3, [pc, #24]	; (800c140 <prvSwitchTimerLists+0xc0>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c12a:	4b06      	ldr	r3, [pc, #24]	; (800c144 <prvSwitchTimerLists+0xc4>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a04      	ldr	r2, [pc, #16]	; (800c140 <prvSwitchTimerLists+0xc0>)
 800c130:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c132:	4a04      	ldr	r2, [pc, #16]	; (800c144 <prvSwitchTimerLists+0xc4>)
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	6013      	str	r3, [r2, #0]
}
 800c138:	bf00      	nop
 800c13a:	3718      	adds	r7, #24
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	200011f4 	.word	0x200011f4
 800c144:	200011f8 	.word	0x200011f8

0800c148 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c14e:	f000 f969 	bl	800c424 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c152:	4b15      	ldr	r3, [pc, #84]	; (800c1a8 <prvCheckForValidListAndQueue+0x60>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d120      	bne.n	800c19c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c15a:	4814      	ldr	r0, [pc, #80]	; (800c1ac <prvCheckForValidListAndQueue+0x64>)
 800c15c:	f7fd fbfe 	bl	800995c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c160:	4813      	ldr	r0, [pc, #76]	; (800c1b0 <prvCheckForValidListAndQueue+0x68>)
 800c162:	f7fd fbfb 	bl	800995c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c166:	4b13      	ldr	r3, [pc, #76]	; (800c1b4 <prvCheckForValidListAndQueue+0x6c>)
 800c168:	4a10      	ldr	r2, [pc, #64]	; (800c1ac <prvCheckForValidListAndQueue+0x64>)
 800c16a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c16c:	4b12      	ldr	r3, [pc, #72]	; (800c1b8 <prvCheckForValidListAndQueue+0x70>)
 800c16e:	4a10      	ldr	r2, [pc, #64]	; (800c1b0 <prvCheckForValidListAndQueue+0x68>)
 800c170:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c172:	2300      	movs	r3, #0
 800c174:	9300      	str	r3, [sp, #0]
 800c176:	4b11      	ldr	r3, [pc, #68]	; (800c1bc <prvCheckForValidListAndQueue+0x74>)
 800c178:	4a11      	ldr	r2, [pc, #68]	; (800c1c0 <prvCheckForValidListAndQueue+0x78>)
 800c17a:	2110      	movs	r1, #16
 800c17c:	200a      	movs	r0, #10
 800c17e:	f7fd fd09 	bl	8009b94 <xQueueGenericCreateStatic>
 800c182:	4603      	mov	r3, r0
 800c184:	4a08      	ldr	r2, [pc, #32]	; (800c1a8 <prvCheckForValidListAndQueue+0x60>)
 800c186:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c188:	4b07      	ldr	r3, [pc, #28]	; (800c1a8 <prvCheckForValidListAndQueue+0x60>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d005      	beq.n	800c19c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c190:	4b05      	ldr	r3, [pc, #20]	; (800c1a8 <prvCheckForValidListAndQueue+0x60>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	490b      	ldr	r1, [pc, #44]	; (800c1c4 <prvCheckForValidListAndQueue+0x7c>)
 800c196:	4618      	mov	r0, r3
 800c198:	f7fe fc1a 	bl	800a9d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c19c:	f000 f972 	bl	800c484 <vPortExitCritical>
}
 800c1a0:	bf00      	nop
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	200011fc 	.word	0x200011fc
 800c1ac:	200011cc 	.word	0x200011cc
 800c1b0:	200011e0 	.word	0x200011e0
 800c1b4:	200011f4 	.word	0x200011f4
 800c1b8:	200011f8 	.word	0x200011f8
 800c1bc:	200012a8 	.word	0x200012a8
 800c1c0:	20001208 	.word	0x20001208
 800c1c4:	0800d654 	.word	0x0800d654

0800c1c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b085      	sub	sp, #20
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	3b04      	subs	r3, #4
 800c1d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c1e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	3b04      	subs	r3, #4
 800c1e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	f023 0201 	bic.w	r2, r3, #1
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	3b04      	subs	r3, #4
 800c1f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1f8:	4a0c      	ldr	r2, [pc, #48]	; (800c22c <pxPortInitialiseStack+0x64>)
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	3b14      	subs	r3, #20
 800c202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	3b04      	subs	r3, #4
 800c20e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f06f 0202 	mvn.w	r2, #2
 800c216:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	3b20      	subs	r3, #32
 800c21c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c21e:	68fb      	ldr	r3, [r7, #12]
}
 800c220:	4618      	mov	r0, r3
 800c222:	3714      	adds	r7, #20
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr
 800c22c:	0800c231 	.word	0x0800c231

0800c230 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c230:	b480      	push	{r7}
 800c232:	b085      	sub	sp, #20
 800c234:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c236:	2300      	movs	r3, #0
 800c238:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c23a:	4b12      	ldr	r3, [pc, #72]	; (800c284 <prvTaskExitError+0x54>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c242:	d00a      	beq.n	800c25a <prvTaskExitError+0x2a>
	__asm volatile
 800c244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c248:	f383 8811 	msr	BASEPRI, r3
 800c24c:	f3bf 8f6f 	isb	sy
 800c250:	f3bf 8f4f 	dsb	sy
 800c254:	60fb      	str	r3, [r7, #12]
}
 800c256:	bf00      	nop
 800c258:	e7fe      	b.n	800c258 <prvTaskExitError+0x28>
	__asm volatile
 800c25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25e:	f383 8811 	msr	BASEPRI, r3
 800c262:	f3bf 8f6f 	isb	sy
 800c266:	f3bf 8f4f 	dsb	sy
 800c26a:	60bb      	str	r3, [r7, #8]
}
 800c26c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c26e:	bf00      	nop
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d0fc      	beq.n	800c270 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c276:	bf00      	nop
 800c278:	bf00      	nop
 800c27a:	3714      	adds	r7, #20
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr
 800c284:	20000028 	.word	0x20000028
	...

0800c290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c290:	4b07      	ldr	r3, [pc, #28]	; (800c2b0 <pxCurrentTCBConst2>)
 800c292:	6819      	ldr	r1, [r3, #0]
 800c294:	6808      	ldr	r0, [r1, #0]
 800c296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c29a:	f380 8809 	msr	PSP, r0
 800c29e:	f3bf 8f6f 	isb	sy
 800c2a2:	f04f 0000 	mov.w	r0, #0
 800c2a6:	f380 8811 	msr	BASEPRI, r0
 800c2aa:	4770      	bx	lr
 800c2ac:	f3af 8000 	nop.w

0800c2b0 <pxCurrentTCBConst2>:
 800c2b0:	20000ccc 	.word	0x20000ccc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c2b4:	bf00      	nop
 800c2b6:	bf00      	nop

0800c2b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c2b8:	4808      	ldr	r0, [pc, #32]	; (800c2dc <prvPortStartFirstTask+0x24>)
 800c2ba:	6800      	ldr	r0, [r0, #0]
 800c2bc:	6800      	ldr	r0, [r0, #0]
 800c2be:	f380 8808 	msr	MSP, r0
 800c2c2:	f04f 0000 	mov.w	r0, #0
 800c2c6:	f380 8814 	msr	CONTROL, r0
 800c2ca:	b662      	cpsie	i
 800c2cc:	b661      	cpsie	f
 800c2ce:	f3bf 8f4f 	dsb	sy
 800c2d2:	f3bf 8f6f 	isb	sy
 800c2d6:	df00      	svc	0
 800c2d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c2da:	bf00      	nop
 800c2dc:	e000ed08 	.word	0xe000ed08

0800c2e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b086      	sub	sp, #24
 800c2e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c2e6:	4b46      	ldr	r3, [pc, #280]	; (800c400 <xPortStartScheduler+0x120>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a46      	ldr	r2, [pc, #280]	; (800c404 <xPortStartScheduler+0x124>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d10a      	bne.n	800c306 <xPortStartScheduler+0x26>
	__asm volatile
 800c2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f4:	f383 8811 	msr	BASEPRI, r3
 800c2f8:	f3bf 8f6f 	isb	sy
 800c2fc:	f3bf 8f4f 	dsb	sy
 800c300:	613b      	str	r3, [r7, #16]
}
 800c302:	bf00      	nop
 800c304:	e7fe      	b.n	800c304 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c306:	4b3e      	ldr	r3, [pc, #248]	; (800c400 <xPortStartScheduler+0x120>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a3f      	ldr	r2, [pc, #252]	; (800c408 <xPortStartScheduler+0x128>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d10a      	bne.n	800c326 <xPortStartScheduler+0x46>
	__asm volatile
 800c310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c314:	f383 8811 	msr	BASEPRI, r3
 800c318:	f3bf 8f6f 	isb	sy
 800c31c:	f3bf 8f4f 	dsb	sy
 800c320:	60fb      	str	r3, [r7, #12]
}
 800c322:	bf00      	nop
 800c324:	e7fe      	b.n	800c324 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c326:	4b39      	ldr	r3, [pc, #228]	; (800c40c <xPortStartScheduler+0x12c>)
 800c328:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	b2db      	uxtb	r3, r3
 800c330:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	22ff      	movs	r2, #255	; 0xff
 800c336:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c340:	78fb      	ldrb	r3, [r7, #3]
 800c342:	b2db      	uxtb	r3, r3
 800c344:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c348:	b2da      	uxtb	r2, r3
 800c34a:	4b31      	ldr	r3, [pc, #196]	; (800c410 <xPortStartScheduler+0x130>)
 800c34c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c34e:	4b31      	ldr	r3, [pc, #196]	; (800c414 <xPortStartScheduler+0x134>)
 800c350:	2207      	movs	r2, #7
 800c352:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c354:	e009      	b.n	800c36a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c356:	4b2f      	ldr	r3, [pc, #188]	; (800c414 <xPortStartScheduler+0x134>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	3b01      	subs	r3, #1
 800c35c:	4a2d      	ldr	r2, [pc, #180]	; (800c414 <xPortStartScheduler+0x134>)
 800c35e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c360:	78fb      	ldrb	r3, [r7, #3]
 800c362:	b2db      	uxtb	r3, r3
 800c364:	005b      	lsls	r3, r3, #1
 800c366:	b2db      	uxtb	r3, r3
 800c368:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c36a:	78fb      	ldrb	r3, [r7, #3]
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c372:	2b80      	cmp	r3, #128	; 0x80
 800c374:	d0ef      	beq.n	800c356 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c376:	4b27      	ldr	r3, [pc, #156]	; (800c414 <xPortStartScheduler+0x134>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f1c3 0307 	rsb	r3, r3, #7
 800c37e:	2b04      	cmp	r3, #4
 800c380:	d00a      	beq.n	800c398 <xPortStartScheduler+0xb8>
	__asm volatile
 800c382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c386:	f383 8811 	msr	BASEPRI, r3
 800c38a:	f3bf 8f6f 	isb	sy
 800c38e:	f3bf 8f4f 	dsb	sy
 800c392:	60bb      	str	r3, [r7, #8]
}
 800c394:	bf00      	nop
 800c396:	e7fe      	b.n	800c396 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c398:	4b1e      	ldr	r3, [pc, #120]	; (800c414 <xPortStartScheduler+0x134>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	021b      	lsls	r3, r3, #8
 800c39e:	4a1d      	ldr	r2, [pc, #116]	; (800c414 <xPortStartScheduler+0x134>)
 800c3a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c3a2:	4b1c      	ldr	r3, [pc, #112]	; (800c414 <xPortStartScheduler+0x134>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c3aa:	4a1a      	ldr	r2, [pc, #104]	; (800c414 <xPortStartScheduler+0x134>)
 800c3ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	b2da      	uxtb	r2, r3
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c3b6:	4b18      	ldr	r3, [pc, #96]	; (800c418 <xPortStartScheduler+0x138>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a17      	ldr	r2, [pc, #92]	; (800c418 <xPortStartScheduler+0x138>)
 800c3bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c3c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c3c2:	4b15      	ldr	r3, [pc, #84]	; (800c418 <xPortStartScheduler+0x138>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a14      	ldr	r2, [pc, #80]	; (800c418 <xPortStartScheduler+0x138>)
 800c3c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c3cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c3ce:	f000 f8dd 	bl	800c58c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c3d2:	4b12      	ldr	r3, [pc, #72]	; (800c41c <xPortStartScheduler+0x13c>)
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c3d8:	f000 f8fc 	bl	800c5d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c3dc:	4b10      	ldr	r3, [pc, #64]	; (800c420 <xPortStartScheduler+0x140>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a0f      	ldr	r2, [pc, #60]	; (800c420 <xPortStartScheduler+0x140>)
 800c3e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c3e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c3e8:	f7ff ff66 	bl	800c2b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c3ec:	f7fe ff4a 	bl	800b284 <vTaskSwitchContext>
	prvTaskExitError();
 800c3f0:	f7ff ff1e 	bl	800c230 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c3f4:	2300      	movs	r3, #0
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3718      	adds	r7, #24
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	e000ed00 	.word	0xe000ed00
 800c404:	410fc271 	.word	0x410fc271
 800c408:	410fc270 	.word	0x410fc270
 800c40c:	e000e400 	.word	0xe000e400
 800c410:	200012f8 	.word	0x200012f8
 800c414:	200012fc 	.word	0x200012fc
 800c418:	e000ed20 	.word	0xe000ed20
 800c41c:	20000028 	.word	0x20000028
 800c420:	e000ef34 	.word	0xe000ef34

0800c424 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
	__asm volatile
 800c42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42e:	f383 8811 	msr	BASEPRI, r3
 800c432:	f3bf 8f6f 	isb	sy
 800c436:	f3bf 8f4f 	dsb	sy
 800c43a:	607b      	str	r3, [r7, #4]
}
 800c43c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c43e:	4b0f      	ldr	r3, [pc, #60]	; (800c47c <vPortEnterCritical+0x58>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	3301      	adds	r3, #1
 800c444:	4a0d      	ldr	r2, [pc, #52]	; (800c47c <vPortEnterCritical+0x58>)
 800c446:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c448:	4b0c      	ldr	r3, [pc, #48]	; (800c47c <vPortEnterCritical+0x58>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d10f      	bne.n	800c470 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c450:	4b0b      	ldr	r3, [pc, #44]	; (800c480 <vPortEnterCritical+0x5c>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	b2db      	uxtb	r3, r3
 800c456:	2b00      	cmp	r3, #0
 800c458:	d00a      	beq.n	800c470 <vPortEnterCritical+0x4c>
	__asm volatile
 800c45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45e:	f383 8811 	msr	BASEPRI, r3
 800c462:	f3bf 8f6f 	isb	sy
 800c466:	f3bf 8f4f 	dsb	sy
 800c46a:	603b      	str	r3, [r7, #0]
}
 800c46c:	bf00      	nop
 800c46e:	e7fe      	b.n	800c46e <vPortEnterCritical+0x4a>
	}
}
 800c470:	bf00      	nop
 800c472:	370c      	adds	r7, #12
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr
 800c47c:	20000028 	.word	0x20000028
 800c480:	e000ed04 	.word	0xe000ed04

0800c484 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c484:	b480      	push	{r7}
 800c486:	b083      	sub	sp, #12
 800c488:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c48a:	4b12      	ldr	r3, [pc, #72]	; (800c4d4 <vPortExitCritical+0x50>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d10a      	bne.n	800c4a8 <vPortExitCritical+0x24>
	__asm volatile
 800c492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c496:	f383 8811 	msr	BASEPRI, r3
 800c49a:	f3bf 8f6f 	isb	sy
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	607b      	str	r3, [r7, #4]
}
 800c4a4:	bf00      	nop
 800c4a6:	e7fe      	b.n	800c4a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c4a8:	4b0a      	ldr	r3, [pc, #40]	; (800c4d4 <vPortExitCritical+0x50>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	3b01      	subs	r3, #1
 800c4ae:	4a09      	ldr	r2, [pc, #36]	; (800c4d4 <vPortExitCritical+0x50>)
 800c4b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c4b2:	4b08      	ldr	r3, [pc, #32]	; (800c4d4 <vPortExitCritical+0x50>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d105      	bne.n	800c4c6 <vPortExitCritical+0x42>
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	f383 8811 	msr	BASEPRI, r3
}
 800c4c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c4c6:	bf00      	nop
 800c4c8:	370c      	adds	r7, #12
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	20000028 	.word	0x20000028
	...

0800c4e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c4e0:	f3ef 8009 	mrs	r0, PSP
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	4b15      	ldr	r3, [pc, #84]	; (800c540 <pxCurrentTCBConst>)
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	f01e 0f10 	tst.w	lr, #16
 800c4f0:	bf08      	it	eq
 800c4f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c4f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4fa:	6010      	str	r0, [r2, #0]
 800c4fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c500:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c504:	f380 8811 	msr	BASEPRI, r0
 800c508:	f3bf 8f4f 	dsb	sy
 800c50c:	f3bf 8f6f 	isb	sy
 800c510:	f7fe feb8 	bl	800b284 <vTaskSwitchContext>
 800c514:	f04f 0000 	mov.w	r0, #0
 800c518:	f380 8811 	msr	BASEPRI, r0
 800c51c:	bc09      	pop	{r0, r3}
 800c51e:	6819      	ldr	r1, [r3, #0]
 800c520:	6808      	ldr	r0, [r1, #0]
 800c522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c526:	f01e 0f10 	tst.w	lr, #16
 800c52a:	bf08      	it	eq
 800c52c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c530:	f380 8809 	msr	PSP, r0
 800c534:	f3bf 8f6f 	isb	sy
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	f3af 8000 	nop.w

0800c540 <pxCurrentTCBConst>:
 800c540:	20000ccc 	.word	0x20000ccc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c544:	bf00      	nop
 800c546:	bf00      	nop

0800c548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
	__asm volatile
 800c54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c552:	f383 8811 	msr	BASEPRI, r3
 800c556:	f3bf 8f6f 	isb	sy
 800c55a:	f3bf 8f4f 	dsb	sy
 800c55e:	607b      	str	r3, [r7, #4]
}
 800c560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c562:	f7fe fdd5 	bl	800b110 <xTaskIncrementTick>
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d003      	beq.n	800c574 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c56c:	4b06      	ldr	r3, [pc, #24]	; (800c588 <xPortSysTickHandler+0x40>)
 800c56e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c572:	601a      	str	r2, [r3, #0]
 800c574:	2300      	movs	r3, #0
 800c576:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	f383 8811 	msr	BASEPRI, r3
}
 800c57e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c580:	bf00      	nop
 800c582:	3708      	adds	r7, #8
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}
 800c588:	e000ed04 	.word	0xe000ed04

0800c58c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c58c:	b480      	push	{r7}
 800c58e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c590:	4b0b      	ldr	r3, [pc, #44]	; (800c5c0 <vPortSetupTimerInterrupt+0x34>)
 800c592:	2200      	movs	r2, #0
 800c594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c596:	4b0b      	ldr	r3, [pc, #44]	; (800c5c4 <vPortSetupTimerInterrupt+0x38>)
 800c598:	2200      	movs	r2, #0
 800c59a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c59c:	4b0a      	ldr	r3, [pc, #40]	; (800c5c8 <vPortSetupTimerInterrupt+0x3c>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a0a      	ldr	r2, [pc, #40]	; (800c5cc <vPortSetupTimerInterrupt+0x40>)
 800c5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5a6:	099b      	lsrs	r3, r3, #6
 800c5a8:	4a09      	ldr	r2, [pc, #36]	; (800c5d0 <vPortSetupTimerInterrupt+0x44>)
 800c5aa:	3b01      	subs	r3, #1
 800c5ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c5ae:	4b04      	ldr	r3, [pc, #16]	; (800c5c0 <vPortSetupTimerInterrupt+0x34>)
 800c5b0:	2207      	movs	r2, #7
 800c5b2:	601a      	str	r2, [r3, #0]
}
 800c5b4:	bf00      	nop
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr
 800c5be:	bf00      	nop
 800c5c0:	e000e010 	.word	0xe000e010
 800c5c4:	e000e018 	.word	0xe000e018
 800c5c8:	20000000 	.word	0x20000000
 800c5cc:	10624dd3 	.word	0x10624dd3
 800c5d0:	e000e014 	.word	0xe000e014

0800c5d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c5d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c5e4 <vPortEnableVFP+0x10>
 800c5d8:	6801      	ldr	r1, [r0, #0]
 800c5da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c5de:	6001      	str	r1, [r0, #0]
 800c5e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c5e2:	bf00      	nop
 800c5e4:	e000ed88 	.word	0xe000ed88

0800c5e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b085      	sub	sp, #20
 800c5ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c5ee:	f3ef 8305 	mrs	r3, IPSR
 800c5f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2b0f      	cmp	r3, #15
 800c5f8:	d914      	bls.n	800c624 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c5fa:	4a17      	ldr	r2, [pc, #92]	; (800c658 <vPortValidateInterruptPriority+0x70>)
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	4413      	add	r3, r2
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c604:	4b15      	ldr	r3, [pc, #84]	; (800c65c <vPortValidateInterruptPriority+0x74>)
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	7afa      	ldrb	r2, [r7, #11]
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d20a      	bcs.n	800c624 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	607b      	str	r3, [r7, #4]
}
 800c620:	bf00      	nop
 800c622:	e7fe      	b.n	800c622 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c624:	4b0e      	ldr	r3, [pc, #56]	; (800c660 <vPortValidateInterruptPriority+0x78>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c62c:	4b0d      	ldr	r3, [pc, #52]	; (800c664 <vPortValidateInterruptPriority+0x7c>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	429a      	cmp	r2, r3
 800c632:	d90a      	bls.n	800c64a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c638:	f383 8811 	msr	BASEPRI, r3
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f3bf 8f4f 	dsb	sy
 800c644:	603b      	str	r3, [r7, #0]
}
 800c646:	bf00      	nop
 800c648:	e7fe      	b.n	800c648 <vPortValidateInterruptPriority+0x60>
	}
 800c64a:	bf00      	nop
 800c64c:	3714      	adds	r7, #20
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop
 800c658:	e000e3f0 	.word	0xe000e3f0
 800c65c:	200012f8 	.word	0x200012f8
 800c660:	e000ed0c 	.word	0xe000ed0c
 800c664:	200012fc 	.word	0x200012fc

0800c668 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b08a      	sub	sp, #40	; 0x28
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c670:	2300      	movs	r3, #0
 800c672:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c674:	f7fe fc90 	bl	800af98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c678:	4b5b      	ldr	r3, [pc, #364]	; (800c7e8 <pvPortMalloc+0x180>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d101      	bne.n	800c684 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c680:	f000 f920 	bl	800c8c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c684:	4b59      	ldr	r3, [pc, #356]	; (800c7ec <pvPortMalloc+0x184>)
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	4013      	ands	r3, r2
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	f040 8093 	bne.w	800c7b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d01d      	beq.n	800c6d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c698:	2208      	movs	r2, #8
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4413      	add	r3, r2
 800c69e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f003 0307 	and.w	r3, r3, #7
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d014      	beq.n	800c6d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f023 0307 	bic.w	r3, r3, #7
 800c6b0:	3308      	adds	r3, #8
 800c6b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f003 0307 	and.w	r3, r3, #7
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00a      	beq.n	800c6d4 <pvPortMalloc+0x6c>
	__asm volatile
 800c6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	617b      	str	r3, [r7, #20]
}
 800c6d0:	bf00      	nop
 800c6d2:	e7fe      	b.n	800c6d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d06e      	beq.n	800c7b8 <pvPortMalloc+0x150>
 800c6da:	4b45      	ldr	r3, [pc, #276]	; (800c7f0 <pvPortMalloc+0x188>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d869      	bhi.n	800c7b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c6e4:	4b43      	ldr	r3, [pc, #268]	; (800c7f4 <pvPortMalloc+0x18c>)
 800c6e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c6e8:	4b42      	ldr	r3, [pc, #264]	; (800c7f4 <pvPortMalloc+0x18c>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6ee:	e004      	b.n	800c6fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	429a      	cmp	r2, r3
 800c702:	d903      	bls.n	800c70c <pvPortMalloc+0xa4>
 800c704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d1f1      	bne.n	800c6f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c70c:	4b36      	ldr	r3, [pc, #216]	; (800c7e8 <pvPortMalloc+0x180>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c712:	429a      	cmp	r2, r3
 800c714:	d050      	beq.n	800c7b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c716:	6a3b      	ldr	r3, [r7, #32]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	2208      	movs	r2, #8
 800c71c:	4413      	add	r3, r2
 800c71e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	6a3b      	ldr	r3, [r7, #32]
 800c726:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72a:	685a      	ldr	r2, [r3, #4]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	1ad2      	subs	r2, r2, r3
 800c730:	2308      	movs	r3, #8
 800c732:	005b      	lsls	r3, r3, #1
 800c734:	429a      	cmp	r2, r3
 800c736:	d91f      	bls.n	800c778 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	4413      	add	r3, r2
 800c73e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c740:	69bb      	ldr	r3, [r7, #24]
 800c742:	f003 0307 	and.w	r3, r3, #7
 800c746:	2b00      	cmp	r3, #0
 800c748:	d00a      	beq.n	800c760 <pvPortMalloc+0xf8>
	__asm volatile
 800c74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74e:	f383 8811 	msr	BASEPRI, r3
 800c752:	f3bf 8f6f 	isb	sy
 800c756:	f3bf 8f4f 	dsb	sy
 800c75a:	613b      	str	r3, [r7, #16]
}
 800c75c:	bf00      	nop
 800c75e:	e7fe      	b.n	800c75e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c762:	685a      	ldr	r2, [r3, #4]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	1ad2      	subs	r2, r2, r3
 800c768:	69bb      	ldr	r3, [r7, #24]
 800c76a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c772:	69b8      	ldr	r0, [r7, #24]
 800c774:	f000 f908 	bl	800c988 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c778:	4b1d      	ldr	r3, [pc, #116]	; (800c7f0 <pvPortMalloc+0x188>)
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	1ad3      	subs	r3, r2, r3
 800c782:	4a1b      	ldr	r2, [pc, #108]	; (800c7f0 <pvPortMalloc+0x188>)
 800c784:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c786:	4b1a      	ldr	r3, [pc, #104]	; (800c7f0 <pvPortMalloc+0x188>)
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	4b1b      	ldr	r3, [pc, #108]	; (800c7f8 <pvPortMalloc+0x190>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d203      	bcs.n	800c79a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c792:	4b17      	ldr	r3, [pc, #92]	; (800c7f0 <pvPortMalloc+0x188>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	4a18      	ldr	r2, [pc, #96]	; (800c7f8 <pvPortMalloc+0x190>)
 800c798:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79c:	685a      	ldr	r2, [r3, #4]
 800c79e:	4b13      	ldr	r3, [pc, #76]	; (800c7ec <pvPortMalloc+0x184>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	431a      	orrs	r2, r3
 800c7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c7ae:	4b13      	ldr	r3, [pc, #76]	; (800c7fc <pvPortMalloc+0x194>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	4a11      	ldr	r2, [pc, #68]	; (800c7fc <pvPortMalloc+0x194>)
 800c7b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c7b8:	f7fe fbfc 	bl	800afb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	f003 0307 	and.w	r3, r3, #7
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d00a      	beq.n	800c7dc <pvPortMalloc+0x174>
	__asm volatile
 800c7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ca:	f383 8811 	msr	BASEPRI, r3
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	60fb      	str	r3, [r7, #12]
}
 800c7d8:	bf00      	nop
 800c7da:	e7fe      	b.n	800c7da <pvPortMalloc+0x172>
	return pvReturn;
 800c7dc:	69fb      	ldr	r3, [r7, #28]
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3728      	adds	r7, #40	; 0x28
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	20004f08 	.word	0x20004f08
 800c7ec:	20004f1c 	.word	0x20004f1c
 800c7f0:	20004f0c 	.word	0x20004f0c
 800c7f4:	20004f00 	.word	0x20004f00
 800c7f8:	20004f10 	.word	0x20004f10
 800c7fc:	20004f14 	.word	0x20004f14

0800c800 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b086      	sub	sp, #24
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d04d      	beq.n	800c8ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c812:	2308      	movs	r3, #8
 800c814:	425b      	negs	r3, r3
 800c816:	697a      	ldr	r2, [r7, #20]
 800c818:	4413      	add	r3, r2
 800c81a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	685a      	ldr	r2, [r3, #4]
 800c824:	4b24      	ldr	r3, [pc, #144]	; (800c8b8 <vPortFree+0xb8>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4013      	ands	r3, r2
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d10a      	bne.n	800c844 <vPortFree+0x44>
	__asm volatile
 800c82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c832:	f383 8811 	msr	BASEPRI, r3
 800c836:	f3bf 8f6f 	isb	sy
 800c83a:	f3bf 8f4f 	dsb	sy
 800c83e:	60fb      	str	r3, [r7, #12]
}
 800c840:	bf00      	nop
 800c842:	e7fe      	b.n	800c842 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00a      	beq.n	800c862 <vPortFree+0x62>
	__asm volatile
 800c84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c850:	f383 8811 	msr	BASEPRI, r3
 800c854:	f3bf 8f6f 	isb	sy
 800c858:	f3bf 8f4f 	dsb	sy
 800c85c:	60bb      	str	r3, [r7, #8]
}
 800c85e:	bf00      	nop
 800c860:	e7fe      	b.n	800c860 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	685a      	ldr	r2, [r3, #4]
 800c866:	4b14      	ldr	r3, [pc, #80]	; (800c8b8 <vPortFree+0xb8>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4013      	ands	r3, r2
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d01e      	beq.n	800c8ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d11a      	bne.n	800c8ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	685a      	ldr	r2, [r3, #4]
 800c87c:	4b0e      	ldr	r3, [pc, #56]	; (800c8b8 <vPortFree+0xb8>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	43db      	mvns	r3, r3
 800c882:	401a      	ands	r2, r3
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c888:	f7fe fb86 	bl	800af98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	685a      	ldr	r2, [r3, #4]
 800c890:	4b0a      	ldr	r3, [pc, #40]	; (800c8bc <vPortFree+0xbc>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4413      	add	r3, r2
 800c896:	4a09      	ldr	r2, [pc, #36]	; (800c8bc <vPortFree+0xbc>)
 800c898:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c89a:	6938      	ldr	r0, [r7, #16]
 800c89c:	f000 f874 	bl	800c988 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c8a0:	4b07      	ldr	r3, [pc, #28]	; (800c8c0 <vPortFree+0xc0>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	4a06      	ldr	r2, [pc, #24]	; (800c8c0 <vPortFree+0xc0>)
 800c8a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c8aa:	f7fe fb83 	bl	800afb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c8ae:	bf00      	nop
 800c8b0:	3718      	adds	r7, #24
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	20004f1c 	.word	0x20004f1c
 800c8bc:	20004f0c 	.word	0x20004f0c
 800c8c0:	20004f18 	.word	0x20004f18

0800c8c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b085      	sub	sp, #20
 800c8c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c8ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c8ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c8d0:	4b27      	ldr	r3, [pc, #156]	; (800c970 <prvHeapInit+0xac>)
 800c8d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f003 0307 	and.w	r3, r3, #7
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d00c      	beq.n	800c8f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	3307      	adds	r3, #7
 800c8e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f023 0307 	bic.w	r3, r3, #7
 800c8ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	1ad3      	subs	r3, r2, r3
 800c8f2:	4a1f      	ldr	r2, [pc, #124]	; (800c970 <prvHeapInit+0xac>)
 800c8f4:	4413      	add	r3, r2
 800c8f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c8fc:	4a1d      	ldr	r2, [pc, #116]	; (800c974 <prvHeapInit+0xb0>)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c902:	4b1c      	ldr	r3, [pc, #112]	; (800c974 <prvHeapInit+0xb0>)
 800c904:	2200      	movs	r2, #0
 800c906:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	68ba      	ldr	r2, [r7, #8]
 800c90c:	4413      	add	r3, r2
 800c90e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c910:	2208      	movs	r2, #8
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	1a9b      	subs	r3, r3, r2
 800c916:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f023 0307 	bic.w	r3, r3, #7
 800c91e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	4a15      	ldr	r2, [pc, #84]	; (800c978 <prvHeapInit+0xb4>)
 800c924:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c926:	4b14      	ldr	r3, [pc, #80]	; (800c978 <prvHeapInit+0xb4>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	2200      	movs	r2, #0
 800c92c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c92e:	4b12      	ldr	r3, [pc, #72]	; (800c978 <prvHeapInit+0xb4>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2200      	movs	r2, #0
 800c934:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	1ad2      	subs	r2, r2, r3
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c944:	4b0c      	ldr	r3, [pc, #48]	; (800c978 <prvHeapInit+0xb4>)
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	4a0a      	ldr	r2, [pc, #40]	; (800c97c <prvHeapInit+0xb8>)
 800c952:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	4a09      	ldr	r2, [pc, #36]	; (800c980 <prvHeapInit+0xbc>)
 800c95a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c95c:	4b09      	ldr	r3, [pc, #36]	; (800c984 <prvHeapInit+0xc0>)
 800c95e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c962:	601a      	str	r2, [r3, #0]
}
 800c964:	bf00      	nop
 800c966:	3714      	adds	r7, #20
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr
 800c970:	20001300 	.word	0x20001300
 800c974:	20004f00 	.word	0x20004f00
 800c978:	20004f08 	.word	0x20004f08
 800c97c:	20004f10 	.word	0x20004f10
 800c980:	20004f0c 	.word	0x20004f0c
 800c984:	20004f1c 	.word	0x20004f1c

0800c988 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c990:	4b28      	ldr	r3, [pc, #160]	; (800ca34 <prvInsertBlockIntoFreeList+0xac>)
 800c992:	60fb      	str	r3, [r7, #12]
 800c994:	e002      	b.n	800c99c <prvInsertBlockIntoFreeList+0x14>
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	60fb      	str	r3, [r7, #12]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d8f7      	bhi.n	800c996 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	68ba      	ldr	r2, [r7, #8]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d108      	bne.n	800c9ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	685a      	ldr	r2, [r3, #4]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	441a      	add	r2, r3
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	68ba      	ldr	r2, [r7, #8]
 800c9d4:	441a      	add	r2, r3
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d118      	bne.n	800ca10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	4b15      	ldr	r3, [pc, #84]	; (800ca38 <prvInsertBlockIntoFreeList+0xb0>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d00d      	beq.n	800ca06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	685a      	ldr	r2, [r3, #4]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	441a      	add	r2, r3
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	601a      	str	r2, [r3, #0]
 800ca04:	e008      	b.n	800ca18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ca06:	4b0c      	ldr	r3, [pc, #48]	; (800ca38 <prvInsertBlockIntoFreeList+0xb0>)
 800ca08:	681a      	ldr	r2, [r3, #0]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	601a      	str	r2, [r3, #0]
 800ca0e:	e003      	b.n	800ca18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d002      	beq.n	800ca26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca26:	bf00      	nop
 800ca28:	3714      	adds	r7, #20
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	20004f00 	.word	0x20004f00
 800ca38:	20004f08 	.word	0x20004f08

0800ca3c <calloc>:
 800ca3c:	4b02      	ldr	r3, [pc, #8]	; (800ca48 <calloc+0xc>)
 800ca3e:	460a      	mov	r2, r1
 800ca40:	4601      	mov	r1, r0
 800ca42:	6818      	ldr	r0, [r3, #0]
 800ca44:	f000 b85c 	b.w	800cb00 <_calloc_r>
 800ca48:	2000002c 	.word	0x2000002c

0800ca4c <__errno>:
 800ca4c:	4b01      	ldr	r3, [pc, #4]	; (800ca54 <__errno+0x8>)
 800ca4e:	6818      	ldr	r0, [r3, #0]
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	2000002c 	.word	0x2000002c

0800ca58 <__libc_init_array>:
 800ca58:	b570      	push	{r4, r5, r6, lr}
 800ca5a:	4d0d      	ldr	r5, [pc, #52]	; (800ca90 <__libc_init_array+0x38>)
 800ca5c:	4c0d      	ldr	r4, [pc, #52]	; (800ca94 <__libc_init_array+0x3c>)
 800ca5e:	1b64      	subs	r4, r4, r5
 800ca60:	10a4      	asrs	r4, r4, #2
 800ca62:	2600      	movs	r6, #0
 800ca64:	42a6      	cmp	r6, r4
 800ca66:	d109      	bne.n	800ca7c <__libc_init_array+0x24>
 800ca68:	4d0b      	ldr	r5, [pc, #44]	; (800ca98 <__libc_init_array+0x40>)
 800ca6a:	4c0c      	ldr	r4, [pc, #48]	; (800ca9c <__libc_init_array+0x44>)
 800ca6c:	f000 fd2c 	bl	800d4c8 <_init>
 800ca70:	1b64      	subs	r4, r4, r5
 800ca72:	10a4      	asrs	r4, r4, #2
 800ca74:	2600      	movs	r6, #0
 800ca76:	42a6      	cmp	r6, r4
 800ca78:	d105      	bne.n	800ca86 <__libc_init_array+0x2e>
 800ca7a:	bd70      	pop	{r4, r5, r6, pc}
 800ca7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca80:	4798      	blx	r3
 800ca82:	3601      	adds	r6, #1
 800ca84:	e7ee      	b.n	800ca64 <__libc_init_array+0xc>
 800ca86:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca8a:	4798      	blx	r3
 800ca8c:	3601      	adds	r6, #1
 800ca8e:	e7f2      	b.n	800ca76 <__libc_init_array+0x1e>
 800ca90:	0802c9dc 	.word	0x0802c9dc
 800ca94:	0802c9dc 	.word	0x0802c9dc
 800ca98:	0802c9dc 	.word	0x0802c9dc
 800ca9c:	0802c9e0 	.word	0x0802c9e0

0800caa0 <__retarget_lock_acquire_recursive>:
 800caa0:	4770      	bx	lr

0800caa2 <__retarget_lock_release_recursive>:
 800caa2:	4770      	bx	lr

0800caa4 <free>:
 800caa4:	4b02      	ldr	r3, [pc, #8]	; (800cab0 <free+0xc>)
 800caa6:	4601      	mov	r1, r0
 800caa8:	6818      	ldr	r0, [r3, #0]
 800caaa:	f000 b83f 	b.w	800cb2c <_free_r>
 800caae:	bf00      	nop
 800cab0:	2000002c 	.word	0x2000002c

0800cab4 <memcmp>:
 800cab4:	b510      	push	{r4, lr}
 800cab6:	3901      	subs	r1, #1
 800cab8:	4402      	add	r2, r0
 800caba:	4290      	cmp	r0, r2
 800cabc:	d101      	bne.n	800cac2 <memcmp+0xe>
 800cabe:	2000      	movs	r0, #0
 800cac0:	e005      	b.n	800cace <memcmp+0x1a>
 800cac2:	7803      	ldrb	r3, [r0, #0]
 800cac4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cac8:	42a3      	cmp	r3, r4
 800caca:	d001      	beq.n	800cad0 <memcmp+0x1c>
 800cacc:	1b18      	subs	r0, r3, r4
 800cace:	bd10      	pop	{r4, pc}
 800cad0:	3001      	adds	r0, #1
 800cad2:	e7f2      	b.n	800caba <memcmp+0x6>

0800cad4 <memcpy>:
 800cad4:	440a      	add	r2, r1
 800cad6:	4291      	cmp	r1, r2
 800cad8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cadc:	d100      	bne.n	800cae0 <memcpy+0xc>
 800cade:	4770      	bx	lr
 800cae0:	b510      	push	{r4, lr}
 800cae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800caea:	4291      	cmp	r1, r2
 800caec:	d1f9      	bne.n	800cae2 <memcpy+0xe>
 800caee:	bd10      	pop	{r4, pc}

0800caf0 <memset>:
 800caf0:	4402      	add	r2, r0
 800caf2:	4603      	mov	r3, r0
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d100      	bne.n	800cafa <memset+0xa>
 800caf8:	4770      	bx	lr
 800cafa:	f803 1b01 	strb.w	r1, [r3], #1
 800cafe:	e7f9      	b.n	800caf4 <memset+0x4>

0800cb00 <_calloc_r>:
 800cb00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb02:	fba1 2402 	umull	r2, r4, r1, r2
 800cb06:	b94c      	cbnz	r4, 800cb1c <_calloc_r+0x1c>
 800cb08:	4611      	mov	r1, r2
 800cb0a:	9201      	str	r2, [sp, #4]
 800cb0c:	f000 f87a 	bl	800cc04 <_malloc_r>
 800cb10:	9a01      	ldr	r2, [sp, #4]
 800cb12:	4605      	mov	r5, r0
 800cb14:	b930      	cbnz	r0, 800cb24 <_calloc_r+0x24>
 800cb16:	4628      	mov	r0, r5
 800cb18:	b003      	add	sp, #12
 800cb1a:	bd30      	pop	{r4, r5, pc}
 800cb1c:	220c      	movs	r2, #12
 800cb1e:	6002      	str	r2, [r0, #0]
 800cb20:	2500      	movs	r5, #0
 800cb22:	e7f8      	b.n	800cb16 <_calloc_r+0x16>
 800cb24:	4621      	mov	r1, r4
 800cb26:	f7ff ffe3 	bl	800caf0 <memset>
 800cb2a:	e7f4      	b.n	800cb16 <_calloc_r+0x16>

0800cb2c <_free_r>:
 800cb2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb2e:	2900      	cmp	r1, #0
 800cb30:	d044      	beq.n	800cbbc <_free_r+0x90>
 800cb32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb36:	9001      	str	r0, [sp, #4]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	f1a1 0404 	sub.w	r4, r1, #4
 800cb3e:	bfb8      	it	lt
 800cb40:	18e4      	addlt	r4, r4, r3
 800cb42:	f000 f975 	bl	800ce30 <__malloc_lock>
 800cb46:	4a1e      	ldr	r2, [pc, #120]	; (800cbc0 <_free_r+0x94>)
 800cb48:	9801      	ldr	r0, [sp, #4]
 800cb4a:	6813      	ldr	r3, [r2, #0]
 800cb4c:	b933      	cbnz	r3, 800cb5c <_free_r+0x30>
 800cb4e:	6063      	str	r3, [r4, #4]
 800cb50:	6014      	str	r4, [r2, #0]
 800cb52:	b003      	add	sp, #12
 800cb54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb58:	f000 b970 	b.w	800ce3c <__malloc_unlock>
 800cb5c:	42a3      	cmp	r3, r4
 800cb5e:	d908      	bls.n	800cb72 <_free_r+0x46>
 800cb60:	6825      	ldr	r5, [r4, #0]
 800cb62:	1961      	adds	r1, r4, r5
 800cb64:	428b      	cmp	r3, r1
 800cb66:	bf01      	itttt	eq
 800cb68:	6819      	ldreq	r1, [r3, #0]
 800cb6a:	685b      	ldreq	r3, [r3, #4]
 800cb6c:	1949      	addeq	r1, r1, r5
 800cb6e:	6021      	streq	r1, [r4, #0]
 800cb70:	e7ed      	b.n	800cb4e <_free_r+0x22>
 800cb72:	461a      	mov	r2, r3
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	b10b      	cbz	r3, 800cb7c <_free_r+0x50>
 800cb78:	42a3      	cmp	r3, r4
 800cb7a:	d9fa      	bls.n	800cb72 <_free_r+0x46>
 800cb7c:	6811      	ldr	r1, [r2, #0]
 800cb7e:	1855      	adds	r5, r2, r1
 800cb80:	42a5      	cmp	r5, r4
 800cb82:	d10b      	bne.n	800cb9c <_free_r+0x70>
 800cb84:	6824      	ldr	r4, [r4, #0]
 800cb86:	4421      	add	r1, r4
 800cb88:	1854      	adds	r4, r2, r1
 800cb8a:	42a3      	cmp	r3, r4
 800cb8c:	6011      	str	r1, [r2, #0]
 800cb8e:	d1e0      	bne.n	800cb52 <_free_r+0x26>
 800cb90:	681c      	ldr	r4, [r3, #0]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	6053      	str	r3, [r2, #4]
 800cb96:	4421      	add	r1, r4
 800cb98:	6011      	str	r1, [r2, #0]
 800cb9a:	e7da      	b.n	800cb52 <_free_r+0x26>
 800cb9c:	d902      	bls.n	800cba4 <_free_r+0x78>
 800cb9e:	230c      	movs	r3, #12
 800cba0:	6003      	str	r3, [r0, #0]
 800cba2:	e7d6      	b.n	800cb52 <_free_r+0x26>
 800cba4:	6825      	ldr	r5, [r4, #0]
 800cba6:	1961      	adds	r1, r4, r5
 800cba8:	428b      	cmp	r3, r1
 800cbaa:	bf04      	itt	eq
 800cbac:	6819      	ldreq	r1, [r3, #0]
 800cbae:	685b      	ldreq	r3, [r3, #4]
 800cbb0:	6063      	str	r3, [r4, #4]
 800cbb2:	bf04      	itt	eq
 800cbb4:	1949      	addeq	r1, r1, r5
 800cbb6:	6021      	streq	r1, [r4, #0]
 800cbb8:	6054      	str	r4, [r2, #4]
 800cbba:	e7ca      	b.n	800cb52 <_free_r+0x26>
 800cbbc:	b003      	add	sp, #12
 800cbbe:	bd30      	pop	{r4, r5, pc}
 800cbc0:	20004f24 	.word	0x20004f24

0800cbc4 <sbrk_aligned>:
 800cbc4:	b570      	push	{r4, r5, r6, lr}
 800cbc6:	4e0e      	ldr	r6, [pc, #56]	; (800cc00 <sbrk_aligned+0x3c>)
 800cbc8:	460c      	mov	r4, r1
 800cbca:	6831      	ldr	r1, [r6, #0]
 800cbcc:	4605      	mov	r5, r0
 800cbce:	b911      	cbnz	r1, 800cbd6 <sbrk_aligned+0x12>
 800cbd0:	f000 f8fe 	bl	800cdd0 <_sbrk_r>
 800cbd4:	6030      	str	r0, [r6, #0]
 800cbd6:	4621      	mov	r1, r4
 800cbd8:	4628      	mov	r0, r5
 800cbda:	f000 f8f9 	bl	800cdd0 <_sbrk_r>
 800cbde:	1c43      	adds	r3, r0, #1
 800cbe0:	d00a      	beq.n	800cbf8 <sbrk_aligned+0x34>
 800cbe2:	1cc4      	adds	r4, r0, #3
 800cbe4:	f024 0403 	bic.w	r4, r4, #3
 800cbe8:	42a0      	cmp	r0, r4
 800cbea:	d007      	beq.n	800cbfc <sbrk_aligned+0x38>
 800cbec:	1a21      	subs	r1, r4, r0
 800cbee:	4628      	mov	r0, r5
 800cbf0:	f000 f8ee 	bl	800cdd0 <_sbrk_r>
 800cbf4:	3001      	adds	r0, #1
 800cbf6:	d101      	bne.n	800cbfc <sbrk_aligned+0x38>
 800cbf8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cbfc:	4620      	mov	r0, r4
 800cbfe:	bd70      	pop	{r4, r5, r6, pc}
 800cc00:	20004f28 	.word	0x20004f28

0800cc04 <_malloc_r>:
 800cc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc08:	1ccd      	adds	r5, r1, #3
 800cc0a:	f025 0503 	bic.w	r5, r5, #3
 800cc0e:	3508      	adds	r5, #8
 800cc10:	2d0c      	cmp	r5, #12
 800cc12:	bf38      	it	cc
 800cc14:	250c      	movcc	r5, #12
 800cc16:	2d00      	cmp	r5, #0
 800cc18:	4607      	mov	r7, r0
 800cc1a:	db01      	blt.n	800cc20 <_malloc_r+0x1c>
 800cc1c:	42a9      	cmp	r1, r5
 800cc1e:	d905      	bls.n	800cc2c <_malloc_r+0x28>
 800cc20:	230c      	movs	r3, #12
 800cc22:	603b      	str	r3, [r7, #0]
 800cc24:	2600      	movs	r6, #0
 800cc26:	4630      	mov	r0, r6
 800cc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc2c:	4e2e      	ldr	r6, [pc, #184]	; (800cce8 <_malloc_r+0xe4>)
 800cc2e:	f000 f8ff 	bl	800ce30 <__malloc_lock>
 800cc32:	6833      	ldr	r3, [r6, #0]
 800cc34:	461c      	mov	r4, r3
 800cc36:	bb34      	cbnz	r4, 800cc86 <_malloc_r+0x82>
 800cc38:	4629      	mov	r1, r5
 800cc3a:	4638      	mov	r0, r7
 800cc3c:	f7ff ffc2 	bl	800cbc4 <sbrk_aligned>
 800cc40:	1c43      	adds	r3, r0, #1
 800cc42:	4604      	mov	r4, r0
 800cc44:	d14d      	bne.n	800cce2 <_malloc_r+0xde>
 800cc46:	6834      	ldr	r4, [r6, #0]
 800cc48:	4626      	mov	r6, r4
 800cc4a:	2e00      	cmp	r6, #0
 800cc4c:	d140      	bne.n	800ccd0 <_malloc_r+0xcc>
 800cc4e:	6823      	ldr	r3, [r4, #0]
 800cc50:	4631      	mov	r1, r6
 800cc52:	4638      	mov	r0, r7
 800cc54:	eb04 0803 	add.w	r8, r4, r3
 800cc58:	f000 f8ba 	bl	800cdd0 <_sbrk_r>
 800cc5c:	4580      	cmp	r8, r0
 800cc5e:	d13a      	bne.n	800ccd6 <_malloc_r+0xd2>
 800cc60:	6821      	ldr	r1, [r4, #0]
 800cc62:	3503      	adds	r5, #3
 800cc64:	1a6d      	subs	r5, r5, r1
 800cc66:	f025 0503 	bic.w	r5, r5, #3
 800cc6a:	3508      	adds	r5, #8
 800cc6c:	2d0c      	cmp	r5, #12
 800cc6e:	bf38      	it	cc
 800cc70:	250c      	movcc	r5, #12
 800cc72:	4629      	mov	r1, r5
 800cc74:	4638      	mov	r0, r7
 800cc76:	f7ff ffa5 	bl	800cbc4 <sbrk_aligned>
 800cc7a:	3001      	adds	r0, #1
 800cc7c:	d02b      	beq.n	800ccd6 <_malloc_r+0xd2>
 800cc7e:	6823      	ldr	r3, [r4, #0]
 800cc80:	442b      	add	r3, r5
 800cc82:	6023      	str	r3, [r4, #0]
 800cc84:	e00e      	b.n	800cca4 <_malloc_r+0xa0>
 800cc86:	6822      	ldr	r2, [r4, #0]
 800cc88:	1b52      	subs	r2, r2, r5
 800cc8a:	d41e      	bmi.n	800ccca <_malloc_r+0xc6>
 800cc8c:	2a0b      	cmp	r2, #11
 800cc8e:	d916      	bls.n	800ccbe <_malloc_r+0xba>
 800cc90:	1961      	adds	r1, r4, r5
 800cc92:	42a3      	cmp	r3, r4
 800cc94:	6025      	str	r5, [r4, #0]
 800cc96:	bf18      	it	ne
 800cc98:	6059      	strne	r1, [r3, #4]
 800cc9a:	6863      	ldr	r3, [r4, #4]
 800cc9c:	bf08      	it	eq
 800cc9e:	6031      	streq	r1, [r6, #0]
 800cca0:	5162      	str	r2, [r4, r5]
 800cca2:	604b      	str	r3, [r1, #4]
 800cca4:	4638      	mov	r0, r7
 800cca6:	f104 060b 	add.w	r6, r4, #11
 800ccaa:	f000 f8c7 	bl	800ce3c <__malloc_unlock>
 800ccae:	f026 0607 	bic.w	r6, r6, #7
 800ccb2:	1d23      	adds	r3, r4, #4
 800ccb4:	1af2      	subs	r2, r6, r3
 800ccb6:	d0b6      	beq.n	800cc26 <_malloc_r+0x22>
 800ccb8:	1b9b      	subs	r3, r3, r6
 800ccba:	50a3      	str	r3, [r4, r2]
 800ccbc:	e7b3      	b.n	800cc26 <_malloc_r+0x22>
 800ccbe:	6862      	ldr	r2, [r4, #4]
 800ccc0:	42a3      	cmp	r3, r4
 800ccc2:	bf0c      	ite	eq
 800ccc4:	6032      	streq	r2, [r6, #0]
 800ccc6:	605a      	strne	r2, [r3, #4]
 800ccc8:	e7ec      	b.n	800cca4 <_malloc_r+0xa0>
 800ccca:	4623      	mov	r3, r4
 800cccc:	6864      	ldr	r4, [r4, #4]
 800ccce:	e7b2      	b.n	800cc36 <_malloc_r+0x32>
 800ccd0:	4634      	mov	r4, r6
 800ccd2:	6876      	ldr	r6, [r6, #4]
 800ccd4:	e7b9      	b.n	800cc4a <_malloc_r+0x46>
 800ccd6:	230c      	movs	r3, #12
 800ccd8:	603b      	str	r3, [r7, #0]
 800ccda:	4638      	mov	r0, r7
 800ccdc:	f000 f8ae 	bl	800ce3c <__malloc_unlock>
 800cce0:	e7a1      	b.n	800cc26 <_malloc_r+0x22>
 800cce2:	6025      	str	r5, [r4, #0]
 800cce4:	e7de      	b.n	800cca4 <_malloc_r+0xa0>
 800cce6:	bf00      	nop
 800cce8:	20004f24 	.word	0x20004f24

0800ccec <realloc>:
 800ccec:	4b02      	ldr	r3, [pc, #8]	; (800ccf8 <realloc+0xc>)
 800ccee:	460a      	mov	r2, r1
 800ccf0:	4601      	mov	r1, r0
 800ccf2:	6818      	ldr	r0, [r3, #0]
 800ccf4:	f000 b8a8 	b.w	800ce48 <_realloc_r>
 800ccf8:	2000002c 	.word	0x2000002c

0800ccfc <cleanup_glue>:
 800ccfc:	b538      	push	{r3, r4, r5, lr}
 800ccfe:	460c      	mov	r4, r1
 800cd00:	6809      	ldr	r1, [r1, #0]
 800cd02:	4605      	mov	r5, r0
 800cd04:	b109      	cbz	r1, 800cd0a <cleanup_glue+0xe>
 800cd06:	f7ff fff9 	bl	800ccfc <cleanup_glue>
 800cd0a:	4621      	mov	r1, r4
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd12:	f7ff bf0b 	b.w	800cb2c <_free_r>
	...

0800cd18 <_reclaim_reent>:
 800cd18:	4b2c      	ldr	r3, [pc, #176]	; (800cdcc <_reclaim_reent+0xb4>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4283      	cmp	r3, r0
 800cd1e:	b570      	push	{r4, r5, r6, lr}
 800cd20:	4604      	mov	r4, r0
 800cd22:	d051      	beq.n	800cdc8 <_reclaim_reent+0xb0>
 800cd24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cd26:	b143      	cbz	r3, 800cd3a <_reclaim_reent+0x22>
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d14a      	bne.n	800cdc4 <_reclaim_reent+0xac>
 800cd2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd30:	6819      	ldr	r1, [r3, #0]
 800cd32:	b111      	cbz	r1, 800cd3a <_reclaim_reent+0x22>
 800cd34:	4620      	mov	r0, r4
 800cd36:	f7ff fef9 	bl	800cb2c <_free_r>
 800cd3a:	6961      	ldr	r1, [r4, #20]
 800cd3c:	b111      	cbz	r1, 800cd44 <_reclaim_reent+0x2c>
 800cd3e:	4620      	mov	r0, r4
 800cd40:	f7ff fef4 	bl	800cb2c <_free_r>
 800cd44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cd46:	b111      	cbz	r1, 800cd4e <_reclaim_reent+0x36>
 800cd48:	4620      	mov	r0, r4
 800cd4a:	f7ff feef 	bl	800cb2c <_free_r>
 800cd4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cd50:	b111      	cbz	r1, 800cd58 <_reclaim_reent+0x40>
 800cd52:	4620      	mov	r0, r4
 800cd54:	f7ff feea 	bl	800cb2c <_free_r>
 800cd58:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cd5a:	b111      	cbz	r1, 800cd62 <_reclaim_reent+0x4a>
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	f7ff fee5 	bl	800cb2c <_free_r>
 800cd62:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cd64:	b111      	cbz	r1, 800cd6c <_reclaim_reent+0x54>
 800cd66:	4620      	mov	r0, r4
 800cd68:	f7ff fee0 	bl	800cb2c <_free_r>
 800cd6c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cd6e:	b111      	cbz	r1, 800cd76 <_reclaim_reent+0x5e>
 800cd70:	4620      	mov	r0, r4
 800cd72:	f7ff fedb 	bl	800cb2c <_free_r>
 800cd76:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cd78:	b111      	cbz	r1, 800cd80 <_reclaim_reent+0x68>
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	f7ff fed6 	bl	800cb2c <_free_r>
 800cd80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd82:	b111      	cbz	r1, 800cd8a <_reclaim_reent+0x72>
 800cd84:	4620      	mov	r0, r4
 800cd86:	f7ff fed1 	bl	800cb2c <_free_r>
 800cd8a:	69a3      	ldr	r3, [r4, #24]
 800cd8c:	b1e3      	cbz	r3, 800cdc8 <_reclaim_reent+0xb0>
 800cd8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cd90:	4620      	mov	r0, r4
 800cd92:	4798      	blx	r3
 800cd94:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cd96:	b1b9      	cbz	r1, 800cdc8 <_reclaim_reent+0xb0>
 800cd98:	4620      	mov	r0, r4
 800cd9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd9e:	f7ff bfad 	b.w	800ccfc <cleanup_glue>
 800cda2:	5949      	ldr	r1, [r1, r5]
 800cda4:	b941      	cbnz	r1, 800cdb8 <_reclaim_reent+0xa0>
 800cda6:	3504      	adds	r5, #4
 800cda8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdaa:	2d80      	cmp	r5, #128	; 0x80
 800cdac:	68d9      	ldr	r1, [r3, #12]
 800cdae:	d1f8      	bne.n	800cda2 <_reclaim_reent+0x8a>
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	f7ff febb 	bl	800cb2c <_free_r>
 800cdb6:	e7ba      	b.n	800cd2e <_reclaim_reent+0x16>
 800cdb8:	680e      	ldr	r6, [r1, #0]
 800cdba:	4620      	mov	r0, r4
 800cdbc:	f7ff feb6 	bl	800cb2c <_free_r>
 800cdc0:	4631      	mov	r1, r6
 800cdc2:	e7ef      	b.n	800cda4 <_reclaim_reent+0x8c>
 800cdc4:	2500      	movs	r5, #0
 800cdc6:	e7ef      	b.n	800cda8 <_reclaim_reent+0x90>
 800cdc8:	bd70      	pop	{r4, r5, r6, pc}
 800cdca:	bf00      	nop
 800cdcc:	2000002c 	.word	0x2000002c

0800cdd0 <_sbrk_r>:
 800cdd0:	b538      	push	{r3, r4, r5, lr}
 800cdd2:	4d06      	ldr	r5, [pc, #24]	; (800cdec <_sbrk_r+0x1c>)
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	4608      	mov	r0, r1
 800cdda:	602b      	str	r3, [r5, #0]
 800cddc:	f7f4 fa2a 	bl	8001234 <_sbrk>
 800cde0:	1c43      	adds	r3, r0, #1
 800cde2:	d102      	bne.n	800cdea <_sbrk_r+0x1a>
 800cde4:	682b      	ldr	r3, [r5, #0]
 800cde6:	b103      	cbz	r3, 800cdea <_sbrk_r+0x1a>
 800cde8:	6023      	str	r3, [r4, #0]
 800cdea:	bd38      	pop	{r3, r4, r5, pc}
 800cdec:	20004f2c 	.word	0x20004f2c

0800cdf0 <siprintf>:
 800cdf0:	b40e      	push	{r1, r2, r3}
 800cdf2:	b500      	push	{lr}
 800cdf4:	b09c      	sub	sp, #112	; 0x70
 800cdf6:	ab1d      	add	r3, sp, #116	; 0x74
 800cdf8:	9002      	str	r0, [sp, #8]
 800cdfa:	9006      	str	r0, [sp, #24]
 800cdfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce00:	4809      	ldr	r0, [pc, #36]	; (800ce28 <siprintf+0x38>)
 800ce02:	9107      	str	r1, [sp, #28]
 800ce04:	9104      	str	r1, [sp, #16]
 800ce06:	4909      	ldr	r1, [pc, #36]	; (800ce2c <siprintf+0x3c>)
 800ce08:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce0c:	9105      	str	r1, [sp, #20]
 800ce0e:	6800      	ldr	r0, [r0, #0]
 800ce10:	9301      	str	r3, [sp, #4]
 800ce12:	a902      	add	r1, sp, #8
 800ce14:	f000 f8a2 	bl	800cf5c <_svfiprintf_r>
 800ce18:	9b02      	ldr	r3, [sp, #8]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	701a      	strb	r2, [r3, #0]
 800ce1e:	b01c      	add	sp, #112	; 0x70
 800ce20:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce24:	b003      	add	sp, #12
 800ce26:	4770      	bx	lr
 800ce28:	2000002c 	.word	0x2000002c
 800ce2c:	ffff0208 	.word	0xffff0208

0800ce30 <__malloc_lock>:
 800ce30:	4801      	ldr	r0, [pc, #4]	; (800ce38 <__malloc_lock+0x8>)
 800ce32:	f7ff be35 	b.w	800caa0 <__retarget_lock_acquire_recursive>
 800ce36:	bf00      	nop
 800ce38:	20004f20 	.word	0x20004f20

0800ce3c <__malloc_unlock>:
 800ce3c:	4801      	ldr	r0, [pc, #4]	; (800ce44 <__malloc_unlock+0x8>)
 800ce3e:	f7ff be30 	b.w	800caa2 <__retarget_lock_release_recursive>
 800ce42:	bf00      	nop
 800ce44:	20004f20 	.word	0x20004f20

0800ce48 <_realloc_r>:
 800ce48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce4c:	4680      	mov	r8, r0
 800ce4e:	4614      	mov	r4, r2
 800ce50:	460e      	mov	r6, r1
 800ce52:	b921      	cbnz	r1, 800ce5e <_realloc_r+0x16>
 800ce54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce58:	4611      	mov	r1, r2
 800ce5a:	f7ff bed3 	b.w	800cc04 <_malloc_r>
 800ce5e:	b92a      	cbnz	r2, 800ce6c <_realloc_r+0x24>
 800ce60:	f7ff fe64 	bl	800cb2c <_free_r>
 800ce64:	4625      	mov	r5, r4
 800ce66:	4628      	mov	r0, r5
 800ce68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce6c:	f000 fb24 	bl	800d4b8 <_malloc_usable_size_r>
 800ce70:	4284      	cmp	r4, r0
 800ce72:	4607      	mov	r7, r0
 800ce74:	d802      	bhi.n	800ce7c <_realloc_r+0x34>
 800ce76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce7a:	d812      	bhi.n	800cea2 <_realloc_r+0x5a>
 800ce7c:	4621      	mov	r1, r4
 800ce7e:	4640      	mov	r0, r8
 800ce80:	f7ff fec0 	bl	800cc04 <_malloc_r>
 800ce84:	4605      	mov	r5, r0
 800ce86:	2800      	cmp	r0, #0
 800ce88:	d0ed      	beq.n	800ce66 <_realloc_r+0x1e>
 800ce8a:	42bc      	cmp	r4, r7
 800ce8c:	4622      	mov	r2, r4
 800ce8e:	4631      	mov	r1, r6
 800ce90:	bf28      	it	cs
 800ce92:	463a      	movcs	r2, r7
 800ce94:	f7ff fe1e 	bl	800cad4 <memcpy>
 800ce98:	4631      	mov	r1, r6
 800ce9a:	4640      	mov	r0, r8
 800ce9c:	f7ff fe46 	bl	800cb2c <_free_r>
 800cea0:	e7e1      	b.n	800ce66 <_realloc_r+0x1e>
 800cea2:	4635      	mov	r5, r6
 800cea4:	e7df      	b.n	800ce66 <_realloc_r+0x1e>

0800cea6 <__ssputs_r>:
 800cea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceaa:	688e      	ldr	r6, [r1, #8]
 800ceac:	429e      	cmp	r6, r3
 800ceae:	4682      	mov	sl, r0
 800ceb0:	460c      	mov	r4, r1
 800ceb2:	4690      	mov	r8, r2
 800ceb4:	461f      	mov	r7, r3
 800ceb6:	d838      	bhi.n	800cf2a <__ssputs_r+0x84>
 800ceb8:	898a      	ldrh	r2, [r1, #12]
 800ceba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cebe:	d032      	beq.n	800cf26 <__ssputs_r+0x80>
 800cec0:	6825      	ldr	r5, [r4, #0]
 800cec2:	6909      	ldr	r1, [r1, #16]
 800cec4:	eba5 0901 	sub.w	r9, r5, r1
 800cec8:	6965      	ldr	r5, [r4, #20]
 800ceca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cece:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ced2:	3301      	adds	r3, #1
 800ced4:	444b      	add	r3, r9
 800ced6:	106d      	asrs	r5, r5, #1
 800ced8:	429d      	cmp	r5, r3
 800ceda:	bf38      	it	cc
 800cedc:	461d      	movcc	r5, r3
 800cede:	0553      	lsls	r3, r2, #21
 800cee0:	d531      	bpl.n	800cf46 <__ssputs_r+0xa0>
 800cee2:	4629      	mov	r1, r5
 800cee4:	f7ff fe8e 	bl	800cc04 <_malloc_r>
 800cee8:	4606      	mov	r6, r0
 800ceea:	b950      	cbnz	r0, 800cf02 <__ssputs_r+0x5c>
 800ceec:	230c      	movs	r3, #12
 800ceee:	f8ca 3000 	str.w	r3, [sl]
 800cef2:	89a3      	ldrh	r3, [r4, #12]
 800cef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cef8:	81a3      	strh	r3, [r4, #12]
 800cefa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf02:	6921      	ldr	r1, [r4, #16]
 800cf04:	464a      	mov	r2, r9
 800cf06:	f7ff fde5 	bl	800cad4 <memcpy>
 800cf0a:	89a3      	ldrh	r3, [r4, #12]
 800cf0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf14:	81a3      	strh	r3, [r4, #12]
 800cf16:	6126      	str	r6, [r4, #16]
 800cf18:	6165      	str	r5, [r4, #20]
 800cf1a:	444e      	add	r6, r9
 800cf1c:	eba5 0509 	sub.w	r5, r5, r9
 800cf20:	6026      	str	r6, [r4, #0]
 800cf22:	60a5      	str	r5, [r4, #8]
 800cf24:	463e      	mov	r6, r7
 800cf26:	42be      	cmp	r6, r7
 800cf28:	d900      	bls.n	800cf2c <__ssputs_r+0x86>
 800cf2a:	463e      	mov	r6, r7
 800cf2c:	6820      	ldr	r0, [r4, #0]
 800cf2e:	4632      	mov	r2, r6
 800cf30:	4641      	mov	r1, r8
 800cf32:	f000 faa7 	bl	800d484 <memmove>
 800cf36:	68a3      	ldr	r3, [r4, #8]
 800cf38:	1b9b      	subs	r3, r3, r6
 800cf3a:	60a3      	str	r3, [r4, #8]
 800cf3c:	6823      	ldr	r3, [r4, #0]
 800cf3e:	4433      	add	r3, r6
 800cf40:	6023      	str	r3, [r4, #0]
 800cf42:	2000      	movs	r0, #0
 800cf44:	e7db      	b.n	800cefe <__ssputs_r+0x58>
 800cf46:	462a      	mov	r2, r5
 800cf48:	f7ff ff7e 	bl	800ce48 <_realloc_r>
 800cf4c:	4606      	mov	r6, r0
 800cf4e:	2800      	cmp	r0, #0
 800cf50:	d1e1      	bne.n	800cf16 <__ssputs_r+0x70>
 800cf52:	6921      	ldr	r1, [r4, #16]
 800cf54:	4650      	mov	r0, sl
 800cf56:	f7ff fde9 	bl	800cb2c <_free_r>
 800cf5a:	e7c7      	b.n	800ceec <__ssputs_r+0x46>

0800cf5c <_svfiprintf_r>:
 800cf5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf60:	4698      	mov	r8, r3
 800cf62:	898b      	ldrh	r3, [r1, #12]
 800cf64:	061b      	lsls	r3, r3, #24
 800cf66:	b09d      	sub	sp, #116	; 0x74
 800cf68:	4607      	mov	r7, r0
 800cf6a:	460d      	mov	r5, r1
 800cf6c:	4614      	mov	r4, r2
 800cf6e:	d50e      	bpl.n	800cf8e <_svfiprintf_r+0x32>
 800cf70:	690b      	ldr	r3, [r1, #16]
 800cf72:	b963      	cbnz	r3, 800cf8e <_svfiprintf_r+0x32>
 800cf74:	2140      	movs	r1, #64	; 0x40
 800cf76:	f7ff fe45 	bl	800cc04 <_malloc_r>
 800cf7a:	6028      	str	r0, [r5, #0]
 800cf7c:	6128      	str	r0, [r5, #16]
 800cf7e:	b920      	cbnz	r0, 800cf8a <_svfiprintf_r+0x2e>
 800cf80:	230c      	movs	r3, #12
 800cf82:	603b      	str	r3, [r7, #0]
 800cf84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf88:	e0d1      	b.n	800d12e <_svfiprintf_r+0x1d2>
 800cf8a:	2340      	movs	r3, #64	; 0x40
 800cf8c:	616b      	str	r3, [r5, #20]
 800cf8e:	2300      	movs	r3, #0
 800cf90:	9309      	str	r3, [sp, #36]	; 0x24
 800cf92:	2320      	movs	r3, #32
 800cf94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf98:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf9c:	2330      	movs	r3, #48	; 0x30
 800cf9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d148 <_svfiprintf_r+0x1ec>
 800cfa2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfa6:	f04f 0901 	mov.w	r9, #1
 800cfaa:	4623      	mov	r3, r4
 800cfac:	469a      	mov	sl, r3
 800cfae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfb2:	b10a      	cbz	r2, 800cfb8 <_svfiprintf_r+0x5c>
 800cfb4:	2a25      	cmp	r2, #37	; 0x25
 800cfb6:	d1f9      	bne.n	800cfac <_svfiprintf_r+0x50>
 800cfb8:	ebba 0b04 	subs.w	fp, sl, r4
 800cfbc:	d00b      	beq.n	800cfd6 <_svfiprintf_r+0x7a>
 800cfbe:	465b      	mov	r3, fp
 800cfc0:	4622      	mov	r2, r4
 800cfc2:	4629      	mov	r1, r5
 800cfc4:	4638      	mov	r0, r7
 800cfc6:	f7ff ff6e 	bl	800cea6 <__ssputs_r>
 800cfca:	3001      	adds	r0, #1
 800cfcc:	f000 80aa 	beq.w	800d124 <_svfiprintf_r+0x1c8>
 800cfd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfd2:	445a      	add	r2, fp
 800cfd4:	9209      	str	r2, [sp, #36]	; 0x24
 800cfd6:	f89a 3000 	ldrb.w	r3, [sl]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	f000 80a2 	beq.w	800d124 <_svfiprintf_r+0x1c8>
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfea:	f10a 0a01 	add.w	sl, sl, #1
 800cfee:	9304      	str	r3, [sp, #16]
 800cff0:	9307      	str	r3, [sp, #28]
 800cff2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cff6:	931a      	str	r3, [sp, #104]	; 0x68
 800cff8:	4654      	mov	r4, sl
 800cffa:	2205      	movs	r2, #5
 800cffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d000:	4851      	ldr	r0, [pc, #324]	; (800d148 <_svfiprintf_r+0x1ec>)
 800d002:	f7f3 f8ed 	bl	80001e0 <memchr>
 800d006:	9a04      	ldr	r2, [sp, #16]
 800d008:	b9d8      	cbnz	r0, 800d042 <_svfiprintf_r+0xe6>
 800d00a:	06d0      	lsls	r0, r2, #27
 800d00c:	bf44      	itt	mi
 800d00e:	2320      	movmi	r3, #32
 800d010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d014:	0711      	lsls	r1, r2, #28
 800d016:	bf44      	itt	mi
 800d018:	232b      	movmi	r3, #43	; 0x2b
 800d01a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d01e:	f89a 3000 	ldrb.w	r3, [sl]
 800d022:	2b2a      	cmp	r3, #42	; 0x2a
 800d024:	d015      	beq.n	800d052 <_svfiprintf_r+0xf6>
 800d026:	9a07      	ldr	r2, [sp, #28]
 800d028:	4654      	mov	r4, sl
 800d02a:	2000      	movs	r0, #0
 800d02c:	f04f 0c0a 	mov.w	ip, #10
 800d030:	4621      	mov	r1, r4
 800d032:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d036:	3b30      	subs	r3, #48	; 0x30
 800d038:	2b09      	cmp	r3, #9
 800d03a:	d94e      	bls.n	800d0da <_svfiprintf_r+0x17e>
 800d03c:	b1b0      	cbz	r0, 800d06c <_svfiprintf_r+0x110>
 800d03e:	9207      	str	r2, [sp, #28]
 800d040:	e014      	b.n	800d06c <_svfiprintf_r+0x110>
 800d042:	eba0 0308 	sub.w	r3, r0, r8
 800d046:	fa09 f303 	lsl.w	r3, r9, r3
 800d04a:	4313      	orrs	r3, r2
 800d04c:	9304      	str	r3, [sp, #16]
 800d04e:	46a2      	mov	sl, r4
 800d050:	e7d2      	b.n	800cff8 <_svfiprintf_r+0x9c>
 800d052:	9b03      	ldr	r3, [sp, #12]
 800d054:	1d19      	adds	r1, r3, #4
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	9103      	str	r1, [sp, #12]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	bfbb      	ittet	lt
 800d05e:	425b      	neglt	r3, r3
 800d060:	f042 0202 	orrlt.w	r2, r2, #2
 800d064:	9307      	strge	r3, [sp, #28]
 800d066:	9307      	strlt	r3, [sp, #28]
 800d068:	bfb8      	it	lt
 800d06a:	9204      	strlt	r2, [sp, #16]
 800d06c:	7823      	ldrb	r3, [r4, #0]
 800d06e:	2b2e      	cmp	r3, #46	; 0x2e
 800d070:	d10c      	bne.n	800d08c <_svfiprintf_r+0x130>
 800d072:	7863      	ldrb	r3, [r4, #1]
 800d074:	2b2a      	cmp	r3, #42	; 0x2a
 800d076:	d135      	bne.n	800d0e4 <_svfiprintf_r+0x188>
 800d078:	9b03      	ldr	r3, [sp, #12]
 800d07a:	1d1a      	adds	r2, r3, #4
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	9203      	str	r2, [sp, #12]
 800d080:	2b00      	cmp	r3, #0
 800d082:	bfb8      	it	lt
 800d084:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d088:	3402      	adds	r4, #2
 800d08a:	9305      	str	r3, [sp, #20]
 800d08c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d158 <_svfiprintf_r+0x1fc>
 800d090:	7821      	ldrb	r1, [r4, #0]
 800d092:	2203      	movs	r2, #3
 800d094:	4650      	mov	r0, sl
 800d096:	f7f3 f8a3 	bl	80001e0 <memchr>
 800d09a:	b140      	cbz	r0, 800d0ae <_svfiprintf_r+0x152>
 800d09c:	2340      	movs	r3, #64	; 0x40
 800d09e:	eba0 000a 	sub.w	r0, r0, sl
 800d0a2:	fa03 f000 	lsl.w	r0, r3, r0
 800d0a6:	9b04      	ldr	r3, [sp, #16]
 800d0a8:	4303      	orrs	r3, r0
 800d0aa:	3401      	adds	r4, #1
 800d0ac:	9304      	str	r3, [sp, #16]
 800d0ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0b2:	4826      	ldr	r0, [pc, #152]	; (800d14c <_svfiprintf_r+0x1f0>)
 800d0b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0b8:	2206      	movs	r2, #6
 800d0ba:	f7f3 f891 	bl	80001e0 <memchr>
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d038      	beq.n	800d134 <_svfiprintf_r+0x1d8>
 800d0c2:	4b23      	ldr	r3, [pc, #140]	; (800d150 <_svfiprintf_r+0x1f4>)
 800d0c4:	bb1b      	cbnz	r3, 800d10e <_svfiprintf_r+0x1b2>
 800d0c6:	9b03      	ldr	r3, [sp, #12]
 800d0c8:	3307      	adds	r3, #7
 800d0ca:	f023 0307 	bic.w	r3, r3, #7
 800d0ce:	3308      	adds	r3, #8
 800d0d0:	9303      	str	r3, [sp, #12]
 800d0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0d4:	4433      	add	r3, r6
 800d0d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d0d8:	e767      	b.n	800cfaa <_svfiprintf_r+0x4e>
 800d0da:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0de:	460c      	mov	r4, r1
 800d0e0:	2001      	movs	r0, #1
 800d0e2:	e7a5      	b.n	800d030 <_svfiprintf_r+0xd4>
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	3401      	adds	r4, #1
 800d0e8:	9305      	str	r3, [sp, #20]
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	f04f 0c0a 	mov.w	ip, #10
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0f6:	3a30      	subs	r2, #48	; 0x30
 800d0f8:	2a09      	cmp	r2, #9
 800d0fa:	d903      	bls.n	800d104 <_svfiprintf_r+0x1a8>
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d0c5      	beq.n	800d08c <_svfiprintf_r+0x130>
 800d100:	9105      	str	r1, [sp, #20]
 800d102:	e7c3      	b.n	800d08c <_svfiprintf_r+0x130>
 800d104:	fb0c 2101 	mla	r1, ip, r1, r2
 800d108:	4604      	mov	r4, r0
 800d10a:	2301      	movs	r3, #1
 800d10c:	e7f0      	b.n	800d0f0 <_svfiprintf_r+0x194>
 800d10e:	ab03      	add	r3, sp, #12
 800d110:	9300      	str	r3, [sp, #0]
 800d112:	462a      	mov	r2, r5
 800d114:	4b0f      	ldr	r3, [pc, #60]	; (800d154 <_svfiprintf_r+0x1f8>)
 800d116:	a904      	add	r1, sp, #16
 800d118:	4638      	mov	r0, r7
 800d11a:	f3af 8000 	nop.w
 800d11e:	1c42      	adds	r2, r0, #1
 800d120:	4606      	mov	r6, r0
 800d122:	d1d6      	bne.n	800d0d2 <_svfiprintf_r+0x176>
 800d124:	89ab      	ldrh	r3, [r5, #12]
 800d126:	065b      	lsls	r3, r3, #25
 800d128:	f53f af2c 	bmi.w	800cf84 <_svfiprintf_r+0x28>
 800d12c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d12e:	b01d      	add	sp, #116	; 0x74
 800d130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d134:	ab03      	add	r3, sp, #12
 800d136:	9300      	str	r3, [sp, #0]
 800d138:	462a      	mov	r2, r5
 800d13a:	4b06      	ldr	r3, [pc, #24]	; (800d154 <_svfiprintf_r+0x1f8>)
 800d13c:	a904      	add	r1, sp, #16
 800d13e:	4638      	mov	r0, r7
 800d140:	f000 f87a 	bl	800d238 <_printf_i>
 800d144:	e7eb      	b.n	800d11e <_svfiprintf_r+0x1c2>
 800d146:	bf00      	nop
 800d148:	0802c9a0 	.word	0x0802c9a0
 800d14c:	0802c9aa 	.word	0x0802c9aa
 800d150:	00000000 	.word	0x00000000
 800d154:	0800cea7 	.word	0x0800cea7
 800d158:	0802c9a6 	.word	0x0802c9a6

0800d15c <_printf_common>:
 800d15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d160:	4616      	mov	r6, r2
 800d162:	4699      	mov	r9, r3
 800d164:	688a      	ldr	r2, [r1, #8]
 800d166:	690b      	ldr	r3, [r1, #16]
 800d168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d16c:	4293      	cmp	r3, r2
 800d16e:	bfb8      	it	lt
 800d170:	4613      	movlt	r3, r2
 800d172:	6033      	str	r3, [r6, #0]
 800d174:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d178:	4607      	mov	r7, r0
 800d17a:	460c      	mov	r4, r1
 800d17c:	b10a      	cbz	r2, 800d182 <_printf_common+0x26>
 800d17e:	3301      	adds	r3, #1
 800d180:	6033      	str	r3, [r6, #0]
 800d182:	6823      	ldr	r3, [r4, #0]
 800d184:	0699      	lsls	r1, r3, #26
 800d186:	bf42      	ittt	mi
 800d188:	6833      	ldrmi	r3, [r6, #0]
 800d18a:	3302      	addmi	r3, #2
 800d18c:	6033      	strmi	r3, [r6, #0]
 800d18e:	6825      	ldr	r5, [r4, #0]
 800d190:	f015 0506 	ands.w	r5, r5, #6
 800d194:	d106      	bne.n	800d1a4 <_printf_common+0x48>
 800d196:	f104 0a19 	add.w	sl, r4, #25
 800d19a:	68e3      	ldr	r3, [r4, #12]
 800d19c:	6832      	ldr	r2, [r6, #0]
 800d19e:	1a9b      	subs	r3, r3, r2
 800d1a0:	42ab      	cmp	r3, r5
 800d1a2:	dc26      	bgt.n	800d1f2 <_printf_common+0x96>
 800d1a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d1a8:	1e13      	subs	r3, r2, #0
 800d1aa:	6822      	ldr	r2, [r4, #0]
 800d1ac:	bf18      	it	ne
 800d1ae:	2301      	movne	r3, #1
 800d1b0:	0692      	lsls	r2, r2, #26
 800d1b2:	d42b      	bmi.n	800d20c <_printf_common+0xb0>
 800d1b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1b8:	4649      	mov	r1, r9
 800d1ba:	4638      	mov	r0, r7
 800d1bc:	47c0      	blx	r8
 800d1be:	3001      	adds	r0, #1
 800d1c0:	d01e      	beq.n	800d200 <_printf_common+0xa4>
 800d1c2:	6823      	ldr	r3, [r4, #0]
 800d1c4:	68e5      	ldr	r5, [r4, #12]
 800d1c6:	6832      	ldr	r2, [r6, #0]
 800d1c8:	f003 0306 	and.w	r3, r3, #6
 800d1cc:	2b04      	cmp	r3, #4
 800d1ce:	bf08      	it	eq
 800d1d0:	1aad      	subeq	r5, r5, r2
 800d1d2:	68a3      	ldr	r3, [r4, #8]
 800d1d4:	6922      	ldr	r2, [r4, #16]
 800d1d6:	bf0c      	ite	eq
 800d1d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1dc:	2500      	movne	r5, #0
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	bfc4      	itt	gt
 800d1e2:	1a9b      	subgt	r3, r3, r2
 800d1e4:	18ed      	addgt	r5, r5, r3
 800d1e6:	2600      	movs	r6, #0
 800d1e8:	341a      	adds	r4, #26
 800d1ea:	42b5      	cmp	r5, r6
 800d1ec:	d11a      	bne.n	800d224 <_printf_common+0xc8>
 800d1ee:	2000      	movs	r0, #0
 800d1f0:	e008      	b.n	800d204 <_printf_common+0xa8>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	4652      	mov	r2, sl
 800d1f6:	4649      	mov	r1, r9
 800d1f8:	4638      	mov	r0, r7
 800d1fa:	47c0      	blx	r8
 800d1fc:	3001      	adds	r0, #1
 800d1fe:	d103      	bne.n	800d208 <_printf_common+0xac>
 800d200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d208:	3501      	adds	r5, #1
 800d20a:	e7c6      	b.n	800d19a <_printf_common+0x3e>
 800d20c:	18e1      	adds	r1, r4, r3
 800d20e:	1c5a      	adds	r2, r3, #1
 800d210:	2030      	movs	r0, #48	; 0x30
 800d212:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d216:	4422      	add	r2, r4
 800d218:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d21c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d220:	3302      	adds	r3, #2
 800d222:	e7c7      	b.n	800d1b4 <_printf_common+0x58>
 800d224:	2301      	movs	r3, #1
 800d226:	4622      	mov	r2, r4
 800d228:	4649      	mov	r1, r9
 800d22a:	4638      	mov	r0, r7
 800d22c:	47c0      	blx	r8
 800d22e:	3001      	adds	r0, #1
 800d230:	d0e6      	beq.n	800d200 <_printf_common+0xa4>
 800d232:	3601      	adds	r6, #1
 800d234:	e7d9      	b.n	800d1ea <_printf_common+0x8e>
	...

0800d238 <_printf_i>:
 800d238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d23c:	7e0f      	ldrb	r7, [r1, #24]
 800d23e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d240:	2f78      	cmp	r7, #120	; 0x78
 800d242:	4691      	mov	r9, r2
 800d244:	4680      	mov	r8, r0
 800d246:	460c      	mov	r4, r1
 800d248:	469a      	mov	sl, r3
 800d24a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d24e:	d807      	bhi.n	800d260 <_printf_i+0x28>
 800d250:	2f62      	cmp	r7, #98	; 0x62
 800d252:	d80a      	bhi.n	800d26a <_printf_i+0x32>
 800d254:	2f00      	cmp	r7, #0
 800d256:	f000 80d8 	beq.w	800d40a <_printf_i+0x1d2>
 800d25a:	2f58      	cmp	r7, #88	; 0x58
 800d25c:	f000 80a3 	beq.w	800d3a6 <_printf_i+0x16e>
 800d260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d264:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d268:	e03a      	b.n	800d2e0 <_printf_i+0xa8>
 800d26a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d26e:	2b15      	cmp	r3, #21
 800d270:	d8f6      	bhi.n	800d260 <_printf_i+0x28>
 800d272:	a101      	add	r1, pc, #4	; (adr r1, 800d278 <_printf_i+0x40>)
 800d274:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d278:	0800d2d1 	.word	0x0800d2d1
 800d27c:	0800d2e5 	.word	0x0800d2e5
 800d280:	0800d261 	.word	0x0800d261
 800d284:	0800d261 	.word	0x0800d261
 800d288:	0800d261 	.word	0x0800d261
 800d28c:	0800d261 	.word	0x0800d261
 800d290:	0800d2e5 	.word	0x0800d2e5
 800d294:	0800d261 	.word	0x0800d261
 800d298:	0800d261 	.word	0x0800d261
 800d29c:	0800d261 	.word	0x0800d261
 800d2a0:	0800d261 	.word	0x0800d261
 800d2a4:	0800d3f1 	.word	0x0800d3f1
 800d2a8:	0800d315 	.word	0x0800d315
 800d2ac:	0800d3d3 	.word	0x0800d3d3
 800d2b0:	0800d261 	.word	0x0800d261
 800d2b4:	0800d261 	.word	0x0800d261
 800d2b8:	0800d413 	.word	0x0800d413
 800d2bc:	0800d261 	.word	0x0800d261
 800d2c0:	0800d315 	.word	0x0800d315
 800d2c4:	0800d261 	.word	0x0800d261
 800d2c8:	0800d261 	.word	0x0800d261
 800d2cc:	0800d3db 	.word	0x0800d3db
 800d2d0:	682b      	ldr	r3, [r5, #0]
 800d2d2:	1d1a      	adds	r2, r3, #4
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	602a      	str	r2, [r5, #0]
 800d2d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	e0a3      	b.n	800d42c <_printf_i+0x1f4>
 800d2e4:	6820      	ldr	r0, [r4, #0]
 800d2e6:	6829      	ldr	r1, [r5, #0]
 800d2e8:	0606      	lsls	r6, r0, #24
 800d2ea:	f101 0304 	add.w	r3, r1, #4
 800d2ee:	d50a      	bpl.n	800d306 <_printf_i+0xce>
 800d2f0:	680e      	ldr	r6, [r1, #0]
 800d2f2:	602b      	str	r3, [r5, #0]
 800d2f4:	2e00      	cmp	r6, #0
 800d2f6:	da03      	bge.n	800d300 <_printf_i+0xc8>
 800d2f8:	232d      	movs	r3, #45	; 0x2d
 800d2fa:	4276      	negs	r6, r6
 800d2fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d300:	485e      	ldr	r0, [pc, #376]	; (800d47c <_printf_i+0x244>)
 800d302:	230a      	movs	r3, #10
 800d304:	e019      	b.n	800d33a <_printf_i+0x102>
 800d306:	680e      	ldr	r6, [r1, #0]
 800d308:	602b      	str	r3, [r5, #0]
 800d30a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d30e:	bf18      	it	ne
 800d310:	b236      	sxthne	r6, r6
 800d312:	e7ef      	b.n	800d2f4 <_printf_i+0xbc>
 800d314:	682b      	ldr	r3, [r5, #0]
 800d316:	6820      	ldr	r0, [r4, #0]
 800d318:	1d19      	adds	r1, r3, #4
 800d31a:	6029      	str	r1, [r5, #0]
 800d31c:	0601      	lsls	r1, r0, #24
 800d31e:	d501      	bpl.n	800d324 <_printf_i+0xec>
 800d320:	681e      	ldr	r6, [r3, #0]
 800d322:	e002      	b.n	800d32a <_printf_i+0xf2>
 800d324:	0646      	lsls	r6, r0, #25
 800d326:	d5fb      	bpl.n	800d320 <_printf_i+0xe8>
 800d328:	881e      	ldrh	r6, [r3, #0]
 800d32a:	4854      	ldr	r0, [pc, #336]	; (800d47c <_printf_i+0x244>)
 800d32c:	2f6f      	cmp	r7, #111	; 0x6f
 800d32e:	bf0c      	ite	eq
 800d330:	2308      	moveq	r3, #8
 800d332:	230a      	movne	r3, #10
 800d334:	2100      	movs	r1, #0
 800d336:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d33a:	6865      	ldr	r5, [r4, #4]
 800d33c:	60a5      	str	r5, [r4, #8]
 800d33e:	2d00      	cmp	r5, #0
 800d340:	bfa2      	ittt	ge
 800d342:	6821      	ldrge	r1, [r4, #0]
 800d344:	f021 0104 	bicge.w	r1, r1, #4
 800d348:	6021      	strge	r1, [r4, #0]
 800d34a:	b90e      	cbnz	r6, 800d350 <_printf_i+0x118>
 800d34c:	2d00      	cmp	r5, #0
 800d34e:	d04d      	beq.n	800d3ec <_printf_i+0x1b4>
 800d350:	4615      	mov	r5, r2
 800d352:	fbb6 f1f3 	udiv	r1, r6, r3
 800d356:	fb03 6711 	mls	r7, r3, r1, r6
 800d35a:	5dc7      	ldrb	r7, [r0, r7]
 800d35c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d360:	4637      	mov	r7, r6
 800d362:	42bb      	cmp	r3, r7
 800d364:	460e      	mov	r6, r1
 800d366:	d9f4      	bls.n	800d352 <_printf_i+0x11a>
 800d368:	2b08      	cmp	r3, #8
 800d36a:	d10b      	bne.n	800d384 <_printf_i+0x14c>
 800d36c:	6823      	ldr	r3, [r4, #0]
 800d36e:	07de      	lsls	r6, r3, #31
 800d370:	d508      	bpl.n	800d384 <_printf_i+0x14c>
 800d372:	6923      	ldr	r3, [r4, #16]
 800d374:	6861      	ldr	r1, [r4, #4]
 800d376:	4299      	cmp	r1, r3
 800d378:	bfde      	ittt	le
 800d37a:	2330      	movle	r3, #48	; 0x30
 800d37c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d380:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d384:	1b52      	subs	r2, r2, r5
 800d386:	6122      	str	r2, [r4, #16]
 800d388:	f8cd a000 	str.w	sl, [sp]
 800d38c:	464b      	mov	r3, r9
 800d38e:	aa03      	add	r2, sp, #12
 800d390:	4621      	mov	r1, r4
 800d392:	4640      	mov	r0, r8
 800d394:	f7ff fee2 	bl	800d15c <_printf_common>
 800d398:	3001      	adds	r0, #1
 800d39a:	d14c      	bne.n	800d436 <_printf_i+0x1fe>
 800d39c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3a0:	b004      	add	sp, #16
 800d3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3a6:	4835      	ldr	r0, [pc, #212]	; (800d47c <_printf_i+0x244>)
 800d3a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d3ac:	6829      	ldr	r1, [r5, #0]
 800d3ae:	6823      	ldr	r3, [r4, #0]
 800d3b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800d3b4:	6029      	str	r1, [r5, #0]
 800d3b6:	061d      	lsls	r5, r3, #24
 800d3b8:	d514      	bpl.n	800d3e4 <_printf_i+0x1ac>
 800d3ba:	07df      	lsls	r7, r3, #31
 800d3bc:	bf44      	itt	mi
 800d3be:	f043 0320 	orrmi.w	r3, r3, #32
 800d3c2:	6023      	strmi	r3, [r4, #0]
 800d3c4:	b91e      	cbnz	r6, 800d3ce <_printf_i+0x196>
 800d3c6:	6823      	ldr	r3, [r4, #0]
 800d3c8:	f023 0320 	bic.w	r3, r3, #32
 800d3cc:	6023      	str	r3, [r4, #0]
 800d3ce:	2310      	movs	r3, #16
 800d3d0:	e7b0      	b.n	800d334 <_printf_i+0xfc>
 800d3d2:	6823      	ldr	r3, [r4, #0]
 800d3d4:	f043 0320 	orr.w	r3, r3, #32
 800d3d8:	6023      	str	r3, [r4, #0]
 800d3da:	2378      	movs	r3, #120	; 0x78
 800d3dc:	4828      	ldr	r0, [pc, #160]	; (800d480 <_printf_i+0x248>)
 800d3de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d3e2:	e7e3      	b.n	800d3ac <_printf_i+0x174>
 800d3e4:	0659      	lsls	r1, r3, #25
 800d3e6:	bf48      	it	mi
 800d3e8:	b2b6      	uxthmi	r6, r6
 800d3ea:	e7e6      	b.n	800d3ba <_printf_i+0x182>
 800d3ec:	4615      	mov	r5, r2
 800d3ee:	e7bb      	b.n	800d368 <_printf_i+0x130>
 800d3f0:	682b      	ldr	r3, [r5, #0]
 800d3f2:	6826      	ldr	r6, [r4, #0]
 800d3f4:	6961      	ldr	r1, [r4, #20]
 800d3f6:	1d18      	adds	r0, r3, #4
 800d3f8:	6028      	str	r0, [r5, #0]
 800d3fa:	0635      	lsls	r5, r6, #24
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	d501      	bpl.n	800d404 <_printf_i+0x1cc>
 800d400:	6019      	str	r1, [r3, #0]
 800d402:	e002      	b.n	800d40a <_printf_i+0x1d2>
 800d404:	0670      	lsls	r0, r6, #25
 800d406:	d5fb      	bpl.n	800d400 <_printf_i+0x1c8>
 800d408:	8019      	strh	r1, [r3, #0]
 800d40a:	2300      	movs	r3, #0
 800d40c:	6123      	str	r3, [r4, #16]
 800d40e:	4615      	mov	r5, r2
 800d410:	e7ba      	b.n	800d388 <_printf_i+0x150>
 800d412:	682b      	ldr	r3, [r5, #0]
 800d414:	1d1a      	adds	r2, r3, #4
 800d416:	602a      	str	r2, [r5, #0]
 800d418:	681d      	ldr	r5, [r3, #0]
 800d41a:	6862      	ldr	r2, [r4, #4]
 800d41c:	2100      	movs	r1, #0
 800d41e:	4628      	mov	r0, r5
 800d420:	f7f2 fede 	bl	80001e0 <memchr>
 800d424:	b108      	cbz	r0, 800d42a <_printf_i+0x1f2>
 800d426:	1b40      	subs	r0, r0, r5
 800d428:	6060      	str	r0, [r4, #4]
 800d42a:	6863      	ldr	r3, [r4, #4]
 800d42c:	6123      	str	r3, [r4, #16]
 800d42e:	2300      	movs	r3, #0
 800d430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d434:	e7a8      	b.n	800d388 <_printf_i+0x150>
 800d436:	6923      	ldr	r3, [r4, #16]
 800d438:	462a      	mov	r2, r5
 800d43a:	4649      	mov	r1, r9
 800d43c:	4640      	mov	r0, r8
 800d43e:	47d0      	blx	sl
 800d440:	3001      	adds	r0, #1
 800d442:	d0ab      	beq.n	800d39c <_printf_i+0x164>
 800d444:	6823      	ldr	r3, [r4, #0]
 800d446:	079b      	lsls	r3, r3, #30
 800d448:	d413      	bmi.n	800d472 <_printf_i+0x23a>
 800d44a:	68e0      	ldr	r0, [r4, #12]
 800d44c:	9b03      	ldr	r3, [sp, #12]
 800d44e:	4298      	cmp	r0, r3
 800d450:	bfb8      	it	lt
 800d452:	4618      	movlt	r0, r3
 800d454:	e7a4      	b.n	800d3a0 <_printf_i+0x168>
 800d456:	2301      	movs	r3, #1
 800d458:	4632      	mov	r2, r6
 800d45a:	4649      	mov	r1, r9
 800d45c:	4640      	mov	r0, r8
 800d45e:	47d0      	blx	sl
 800d460:	3001      	adds	r0, #1
 800d462:	d09b      	beq.n	800d39c <_printf_i+0x164>
 800d464:	3501      	adds	r5, #1
 800d466:	68e3      	ldr	r3, [r4, #12]
 800d468:	9903      	ldr	r1, [sp, #12]
 800d46a:	1a5b      	subs	r3, r3, r1
 800d46c:	42ab      	cmp	r3, r5
 800d46e:	dcf2      	bgt.n	800d456 <_printf_i+0x21e>
 800d470:	e7eb      	b.n	800d44a <_printf_i+0x212>
 800d472:	2500      	movs	r5, #0
 800d474:	f104 0619 	add.w	r6, r4, #25
 800d478:	e7f5      	b.n	800d466 <_printf_i+0x22e>
 800d47a:	bf00      	nop
 800d47c:	0802c9b1 	.word	0x0802c9b1
 800d480:	0802c9c2 	.word	0x0802c9c2

0800d484 <memmove>:
 800d484:	4288      	cmp	r0, r1
 800d486:	b510      	push	{r4, lr}
 800d488:	eb01 0402 	add.w	r4, r1, r2
 800d48c:	d902      	bls.n	800d494 <memmove+0x10>
 800d48e:	4284      	cmp	r4, r0
 800d490:	4623      	mov	r3, r4
 800d492:	d807      	bhi.n	800d4a4 <memmove+0x20>
 800d494:	1e43      	subs	r3, r0, #1
 800d496:	42a1      	cmp	r1, r4
 800d498:	d008      	beq.n	800d4ac <memmove+0x28>
 800d49a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d49e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4a2:	e7f8      	b.n	800d496 <memmove+0x12>
 800d4a4:	4402      	add	r2, r0
 800d4a6:	4601      	mov	r1, r0
 800d4a8:	428a      	cmp	r2, r1
 800d4aa:	d100      	bne.n	800d4ae <memmove+0x2a>
 800d4ac:	bd10      	pop	{r4, pc}
 800d4ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4b6:	e7f7      	b.n	800d4a8 <memmove+0x24>

0800d4b8 <_malloc_usable_size_r>:
 800d4b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4bc:	1f18      	subs	r0, r3, #4
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	bfbc      	itt	lt
 800d4c2:	580b      	ldrlt	r3, [r1, r0]
 800d4c4:	18c0      	addlt	r0, r0, r3
 800d4c6:	4770      	bx	lr

0800d4c8 <_init>:
 800d4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ca:	bf00      	nop
 800d4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4ce:	bc08      	pop	{r3}
 800d4d0:	469e      	mov	lr, r3
 800d4d2:	4770      	bx	lr

0800d4d4 <_fini>:
 800d4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4d6:	bf00      	nop
 800d4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4da:	bc08      	pop	{r3}
 800d4dc:	469e      	mov	lr, r3
 800d4de:	4770      	bx	lr
